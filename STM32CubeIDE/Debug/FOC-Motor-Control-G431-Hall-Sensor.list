
FOC-Motor-Control-G431-Hall-Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009278  08009278  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009280  08009280  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  08009288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001554  20000438  080096c0  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  080096c0  0002198c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .debug_line   00040b0f  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000457d6  00000000  00000000  00060f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ea7  00000000  00000000  000a674d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  000ae5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010032e  00000000  00000000  000b0178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005dd0  00000000  00000000  001b04a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002d7e3  00000000  00000000  001b6278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002af49  00000000  00000000  001e3a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020e9a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005094  00000000  00000000  0020e9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000438 	.word	0x20000438
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e74 	.word	0x08008e74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000043c 	.word	0x2000043c
 8000214:	08008e74 	.word	0x08008e74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f003 fec5 	bl	80042d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f008 fc59 	bl	8008e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f000 ffbb 	bl	80014c8 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8000560:	08009288 	.word	0x08009288
  ldr r2, =_sbss
 8000564:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8000568:	2000198c 	.word	0x2000198c

0800056c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <BusFault_Handler>
	...

08000570 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000574:	6940      	ldr	r0, [r0, #20]
 8000576:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000578:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800057a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800057c:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800057e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000582:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000586:	6960      	ldr	r0, [r4, #20]
 8000588:	f104 011c 	add.w	r1, r4, #28
 800058c:	462b      	mov	r3, r5
 800058e:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000594:	4718      	bx	r3
 8000596:	bf00      	nop

08000598 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000598:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800059a:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 800059c:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800059e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005a2:	4c1e      	ldr	r4, [pc, #120]	; (800061c <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005a4:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005aa:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005b0:	78ca      	ldrb	r2, [r1, #3]
 80005b2:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80005b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005c0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005c4:	5ca2      	ldrb	r2, [r4, r2]
 80005c6:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005ca:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005cc:	5ca2      	ldrb	r2, [r4, r2]
 80005ce:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005d2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005d4:	5ca2      	ldrb	r2, [r4, r2]
 80005d6:	4c12      	ldr	r4, [pc, #72]	; (8000620 <ASPEP_sendBeacon+0x88>)
 80005d8:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005dc:	5ca2      	ldrb	r2, [r4, r2]
 80005de:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005e2:	f043 0305 	orr.w	r3, r3, #5
 80005e6:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005ec:	b14b      	cbz	r3, 8000602 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ee:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005f4:	b913      	cbnz	r3, 80005fc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005f6:	2302      	movs	r3, #2
 80005f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000600:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000602:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000606:	2303      	movs	r3, #3
 8000608:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800060c:	6481      	str	r1, [r0, #72]	; 0x48
 800060e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000610:	2204      	movs	r2, #4
 8000612:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8000614:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000618:	6940      	ldr	r0, [r0, #20]
 800061a:	4718      	bx	r3
 800061c:	08008e9c 	.word	0x08008e9c
 8000620:	08008e8c 	.word	0x08008e8c

08000624 <ASPEP_sendPing>:
{
 8000624:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 8000626:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800062a:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 800062e:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000632:	4d1e      	ldr	r5, [pc, #120]	; (80006ac <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000634:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000638:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800063c:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 8000640:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 8000644:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000648:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800064c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4c17      	ldr	r4, [pc, #92]	; (80006b0 <ASPEP_sendPing+0x8c>)
 8000654:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000658:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800065c:	5ca2      	ldrb	r2, [r4, r2]
 800065e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000662:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000664:	5ca2      	ldrb	r2, [r4, r2]
 8000666:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 800066a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800066c:	5ca2      	ldrb	r2, [r4, r2]
 800066e:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000672:	5ceb      	ldrb	r3, [r5, r3]
 8000674:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000678:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800067c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800067e:	b13b      	cbz	r3, 8000690 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000680:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000682:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000686:	b913      	cbnz	r3, 800068e <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8000688:	2302      	movs	r3, #2
 800068a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800068e:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000690:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000694:	2303      	movs	r3, #3
 8000696:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800069a:	6481      	str	r1, [r0, #72]	; 0x48
 800069c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800069e:	2204      	movs	r2, #4
 80006a0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80006a2:	6940      	ldr	r0, [r0, #20]
}
 80006a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80006a8:	4718      	bx	r3
 80006aa:	bf00      	nop
 80006ac:	08008e8c 	.word	0x08008e8c
 80006b0:	08008e9c 	.word	0x08008e9c

080006b4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006b4:	2a0a      	cmp	r2, #10
{
 80006b6:	b410      	push	{r4}
 80006b8:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006ba:	d00b      	beq.n	80006d4 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006bc:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d921      	bls.n	8000708 <ASPEP_getBuffer+0x54>
 80006c4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	d911      	bls.n	80006f0 <ASPEP_getBuffer+0x3c>
        result = false;
 80006cc:	2000      	movs	r0, #0
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006d4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006d8:	2a01      	cmp	r2, #1
 80006da:	d8f7      	bhi.n	80006cc <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006de:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006e0:	3204      	adds	r2, #4
 80006e2:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006e4:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006e8:	4620      	mov	r0, r4
}
 80006ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ee:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006f2:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006f4:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006f8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006fc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006fe:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000700:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000704:	600a      	str	r2, [r1, #0]
}
 8000706:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000708:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 800070a:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800070c:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000710:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000714:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000716:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000718:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800071c:	600a      	str	r2, [r1, #0]
}
 800071e:	4770      	bx	lr

08000720 <ASPEP_sendPacket>:
{
 8000720:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000722:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000726:	2c02      	cmp	r4, #2
 8000728:	d002      	beq.n	8000730 <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 800072a:	2102      	movs	r1, #2
}
 800072c:	4608      	mov	r0, r1
 800072e:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000730:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 8000734:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000738:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 800073c:	2c01      	cmp	r4, #1
 800073e:	d104      	bne.n	800074a <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000740:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 8000744:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000746:	3202      	adds	r2, #2
 8000748:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800074a:	2b0a      	cmp	r3, #10
 800074c:	d103      	bne.n	8000756 <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 800074e:	7c04      	ldrb	r4, [r0, #16]
 8000750:	b394      	cbz	r4, 80007b8 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000752:	2400      	movs	r4, #0
 8000754:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 8000756:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800075a:	4d35      	ldr	r5, [pc, #212]	; (8000830 <ASPEP_sendPacket+0x110>)
 800075c:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800075e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000762:	5dae      	ldrb	r6, [r5, r6]
 8000764:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000768:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800076a:	f815 600e 	ldrb.w	r6, [r5, lr]
 800076e:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8000772:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000776:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800077a:	f815 e00e 	ldrb.w	lr, [r5, lr]
 800077e:	f3c4 6503 	ubfx	r5, r4, #24, #4
 8000782:	ea8e 0e05 	eor.w	lr, lr, r5
 8000786:	4d2b      	ldr	r5, [pc, #172]	; (8000834 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000788:	f815 500e 	ldrb.w	r5, [r5, lr]
 800078c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000790:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8000792:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000798:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800079a:	b1e1      	cbz	r1, 80007d6 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 800079c:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d00d      	beq.n	80007be <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d02e      	beq.n	8000804 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d132      	bne.n	8000810 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 80007aa:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80007ae:	bb69      	cbnz	r1, 800080c <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80007b6:	e7b9      	b.n	800072c <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 80007b8:	2101      	movs	r1, #1
}
 80007ba:	4608      	mov	r0, r1
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007be:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 80007c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007c2:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007c4:	458c      	cmp	ip, r1
 80007c6:	bf14      	ite	ne
 80007c8:	2103      	movne	r1, #3
 80007ca:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007cc:	b36c      	cbz	r4, 800082a <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007ce:	2002      	movs	r0, #2
 80007d0:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007d2:	809a      	strh	r2, [r3, #4]
 80007d4:	e7aa      	b.n	800072c <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	d022      	beq.n	8000820 <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 80007da:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007dc:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007e0:	bf0b      	itete	eq
 80007e2:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007e6:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 80007ea:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007ee:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007f2:	6483      	str	r3, [r0, #72]	; 0x48
 80007f4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80007f8:	6940      	ldr	r0, [r0, #20]
 80007fa:	4661      	mov	r1, ip
 80007fc:	4798      	blx	r3
 80007fe:	2100      	movs	r1, #0
}
 8000800:	4608      	mov	r0, r1
 8000802:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8000804:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000808:	2b01      	cmp	r3, #1
 800080a:	d003      	beq.n	8000814 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 800080c:	2103      	movs	r1, #3
 800080e:	e78d      	b.n	800072c <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000810:	2100      	movs	r1, #0
 8000812:	e78b      	b.n	800072c <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 8000814:	2302      	movs	r3, #2
 8000816:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 800081a:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 800081c:	2100      	movs	r1, #0
 800081e:	e785      	b.n	800072c <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000820:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000822:	2103      	movs	r1, #3
 8000824:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000826:	6483      	str	r3, [r0, #72]	; 0x48
 8000828:	e7e4      	b.n	80007f4 <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 800082a:	6443      	str	r3, [r0, #68]	; 0x44
 800082c:	e7cf      	b.n	80007ce <ASPEP_sendPacket+0xae>
 800082e:	bf00      	nop
 8000830:	08008e9c 	.word	0x08008e9c
 8000834:	08008e8c 	.word	0x08008e8c

08000838 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000838:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 800083a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800083e:	2b03      	cmp	r3, #3
{
 8000840:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000842:	d013      	beq.n	800086c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000844:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000846:	2100      	movs	r1, #0
 8000848:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800084a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800084e:	2a02      	cmp	r2, #2
 8000850:	d013      	beq.n	800087a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000852:	2b02      	cmp	r3, #2
 8000854:	d11d      	bne.n	8000892 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000856:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800085a:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800085c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800085e:	2204      	movs	r2, #4
 8000860:	6940      	ldr	r0, [r0, #20]
 8000862:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000864:	2303      	movs	r3, #3
 8000866:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 800086a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 800086c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000870:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000872:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000874:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000878:	d10b      	bne.n	8000892 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800087a:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800087e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000880:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000882:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000884:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000886:	6960      	ldr	r0, [r4, #20]
 8000888:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800088a:	2303      	movs	r3, #3
 800088c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000890:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000892:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000894:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000896:	b1cb      	cbz	r3, 80008cc <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000898:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800089a:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 800089c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	889a      	ldrh	r2, [r3, #4]
 80008a2:	6960      	ldr	r0, [r4, #20]
 80008a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008a6:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d007      	beq.n	80008c0 <ASPEP_HWDataTransmittedIT+0x88>
 80008b0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d003      	beq.n	80008c0 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008bc:	b662      	cpsie	i
}
 80008be:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008c2:	0063      	lsls	r3, r4, #1
 80008c4:	3368      	adds	r3, #104	; 0x68
 80008c6:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008c8:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008ca:	e7f7      	b.n	80008bc <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80008ce:	e7f5      	b.n	80008bc <ASPEP_HWDataTransmittedIT+0x84>

080008d0 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 80008d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008d4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008d8:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008da:	2500      	movs	r5, #0
{
 80008dc:	4604      	mov	r4, r0
    *packetLength = 0;
 80008de:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008e0:	b193      	cbz	r3, 8000908 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008e2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008e6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008ea:	2e01      	cmp	r6, #1
 80008ec:	d054      	beq.n	8000998 <ASPEP_RXframeProcess+0xc8>
 80008ee:	2e02      	cmp	r6, #2
 80008f0:	d03e      	beq.n	8000970 <ASPEP_RXframeProcess+0xa0>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d033      	beq.n	800095e <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f8:	6960      	ldr	r0, [r4, #20]
 80008fa:	2204      	movs	r2, #4
 80008fc:	f104 011c 	add.w	r1, r4, #28
 8000900:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000902:	4628      	mov	r0, r5
 8000904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000908:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 800090c:	2d00      	cmp	r5, #0
 800090e:	d0f8      	beq.n	8000902 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000910:	042b      	lsls	r3, r5, #16
 8000912:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000916:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800091a:	4995      	ldr	r1, [pc, #596]	; (8000b70 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800091c:	4895      	ldr	r0, [pc, #596]	; (8000b74 <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800091e:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000922:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000924:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000928:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800092c:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 800092e:	5c82      	ldrb	r2, [r0, r2]
 8000930:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000934:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000936:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000938:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800093a:	2b00      	cmp	r3, #0
 800093c:	d03a      	beq.n	80009b4 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800093e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000940:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000944:	b913      	cbnz	r3, 800094c <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000946:	2302      	movs	r3, #2
 8000948:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800094c:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800094e:	6960      	ldr	r0, [r4, #20]
 8000950:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000952:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000956:	4798      	blx	r3
}
 8000958:	4628      	mov	r0, r5
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 800095e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000960:	2b05      	cmp	r3, #5
 8000962:	f000 8095 	beq.w	8000a90 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8000966:	2b06      	cmp	r3, #6
 8000968:	f000 80d7 	beq.w	8000b1a <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 800096c:	4635      	mov	r5, r6
 800096e:	e7c2      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000970:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000972:	2b05      	cmp	r3, #5
 8000974:	d05f      	beq.n	8000a36 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8000976:	2b06      	cmp	r3, #6
 8000978:	f000 80d6 	beq.w	8000b28 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800097c:	2b09      	cmp	r3, #9
 800097e:	d1ba      	bne.n	80008f6 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000980:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000984:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000988:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800098a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800098c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800098e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000992:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000994:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000996:	e7ae      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000998:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800099a:	2b05      	cmp	r3, #5
 800099c:	d016      	beq.n	80009cc <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d1a9      	bne.n	80008f6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80009a2:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80009a6:	4631      	mov	r1, r6
 80009a8:	f7ff fe3c 	bl	8000624 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009ac:	2302      	movs	r3, #2
 80009ae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009b2:	e7a0      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009b4:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009b8:	2303      	movs	r3, #3
 80009ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009be:	64a1      	str	r1, [r4, #72]	; 0x48
 80009c0:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009c2:	2204      	movs	r2, #4
 80009c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009c6:	6960      	ldr	r0, [r4, #20]
 80009c8:	4798      	blx	r3
  return (result);
 80009ca:	e7bf      	b.n	800094c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009cc:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009ce:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009d0:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d4:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009d8:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009dc:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009e4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e6:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009e8:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ec:	bf28      	it	cs
 80009ee:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009f4:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f8:	bf28      	it	cs
 80009fa:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009fc:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fe:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a02:	46e0      	mov	r8, ip
 8000a04:	bf28      	it	cs
 8000a06:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a08:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0a:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a0e:	46f0      	mov	r8, lr
 8000a10:	bf28      	it	cs
 8000a12:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a14:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a16:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a1a:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a1e:	f240 8088 	bls.w	8000b32 <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a28:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fdb3 	bl	8000598 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a32:	2500      	movs	r5, #0
 8000a34:	e75f      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a36:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a38:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a3a:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a3e:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a42:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a46:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a4e:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a50:	4281      	cmp	r1, r0
 8000a52:	bf28      	it	cs
 8000a54:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a56:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5a:	42b3      	cmp	r3, r6
 8000a5c:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a5e:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a62:	bf28      	it	cs
 8000a64:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a66:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a68:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6c:	46f1      	mov	r9, lr
 8000a6e:	bf28      	it	cs
 8000a70:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a72:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a74:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a78:	46c1      	mov	r9, r8
 8000a7a:	bf28      	it	cs
 8000a7c:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a7e:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a80:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a84:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a88:	d964      	bls.n	8000b54 <ASPEP_RXframeProcess+0x284>
 8000a8a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a8e:	e7cb      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a90:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a92:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a94:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a98:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a9c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa0:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000aa4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000aa8:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aaa:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000aac:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab0:	bf28      	it	cs
 8000ab2:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab4:	4560      	cmp	r0, ip
 8000ab6:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000ab8:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000abc:	bf28      	it	cs
 8000abe:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac0:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac2:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac6:	4639      	mov	r1, r7
 8000ac8:	bf28      	it	cs
 8000aca:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000acc:	45c1      	cmp	r9, r8
 8000ace:	464e      	mov	r6, r9
 8000ad0:	bf28      	it	cs
 8000ad2:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ad4:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ad6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ada:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ade:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae2:	d8a1      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	d89f      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ae8:	4577      	cmp	r7, lr
 8000aea:	d89d      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000aec:	45c1      	cmp	r9, r8
 8000aee:	d89b      	bhi.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000af0:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000af4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000af8:	4290      	cmp	r0, r2
 8000afa:	d195      	bne.n	8000a28 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afc:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000afe:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b00:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b02:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b06:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b0a:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0c:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0e:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b14:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b18:	e786      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b1a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b1e:	4631      	mov	r1, r6
 8000b20:	f7ff fd80 	bl	8000624 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000b24:	4635      	mov	r5, r6
 8000b26:	e6e6      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b28:	7f42      	ldrb	r2, [r0, #29]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	f7ff fd7a 	bl	8000624 <ASPEP_sendPing>
 8000b30:	e6e1      	b.n	80008f6 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b32:	4288      	cmp	r0, r1
 8000b34:	f63f af75 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b38:	45b4      	cmp	ip, r6
 8000b3a:	f63f af72 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b3e:	45be      	cmp	lr, r7
 8000b40:	f63f af6f 	bhi.w	8000a22 <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b44:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000b48:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f47f af68 	bne.w	8000a22 <ASPEP_RXframeProcess+0x152>
 8000b52:	e769      	b.n	8000a28 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b54:	4288      	cmp	r0, r1
 8000b56:	d898      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b58:	45e6      	cmp	lr, ip
 8000b5a:	d896      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b5c:	45b8      	cmp	r8, r7
 8000b5e:	d894      	bhi.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b60:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b64:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b68:	1aab      	subs	r3, r5, r2
 8000b6a:	425d      	negs	r5, r3
 8000b6c:	415d      	adcs	r5, r3
 8000b6e:	e78c      	b.n	8000a8a <ASPEP_RXframeProcess+0x1ba>
 8000b70:	08008e9c 	.word	0x08008e9c
 8000b74:	08008e8c 	.word	0x08008e8c

08000b78 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b78:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b7a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b7e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b80:	b13b      	cbz	r3, 8000b92 <ASPEP_HWDataReceivedIT+0x1a>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b86:	2200      	movs	r2, #0
 8000b88:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b8c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b90:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b92:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <ASPEP_HWDataReceivedIT+0x98>)
 8000b96:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b9e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000ba6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bae:	5c53      	ldrb	r3, [r2, r1]
 8000bb0:	b95b      	cbnz	r3, 8000bca <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bb2:	7f03      	ldrb	r3, [r0, #28]
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bbc:	d809      	bhi.n	8000bd2 <ASPEP_HWDataReceivedIT+0x5a>
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d81e      	bhi.n	8000c00 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bc8:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	d1f5      	bne.n	8000bc2 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bd6:	8b83      	ldrh	r3, [r0, #28]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bde:	b17b      	cbz	r3, 8000c00 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000be0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d30f      	bcc.n	8000c08 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000be8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bec:	6981      	ldr	r1, [r0, #24]
 8000bee:	6940      	ldr	r0, [r0, #20]
 8000bf0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bf6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bfe:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c06:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	08008e9c 	.word	0x08008e9c

08000c14 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c14:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c16:	2200      	movs	r2, #0
 8000c18:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c1e:	6940      	ldr	r0, [r0, #20]
 8000c20:	2204      	movs	r2, #4
 8000c22:	311c      	adds	r1, #28
 8000c24:	4718      	bx	r3
 8000c26:	bf00      	nop

08000c28 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init(HALL_Handle_t *pHandle)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c2a:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 8000c2e:	7843      	ldrb	r3, [r0, #1]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8000c30:	8a84      	ldrh	r4, [r0, #20]

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c32:	6a82      	ldr	r2, [r0, #40]	; 0x28
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c34:	fb1c fc03 	smulbb	ip, ip, r3
    hMaxReliableElSpeedUnit *= 2U;
 8000c38:	fb14 f403 	smulbb	r4, r4, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c3c:	fa1f fc8c 	uxth.w	ip, ip
    hMaxReliableElSpeedUnit *= 2U;
 8000c40:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c42:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8000c44:	f1bc 0f03 	cmp.w	ip, #3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000c48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c4a:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
    hMaxReliableElSpeedUnit *= 2U;
 8000c4e:	b2a4      	uxth	r4, r4
    if (0U == hMinReliableElSpeedUnit)
 8000c50:	d96e      	bls.n	8000d30 <HALL_Init+0x108>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000c52:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8000c56:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8000c5a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000c5e:	f242 7e10 	movw	lr, #10000	; 0x2710
 8000c62:	fbbe fcfc 	udiv	ip, lr, ip
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	f8a0 50c0 	strh.w	r5, [r0, #192]	; 0xc0
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c6e:	4d32      	ldr	r5, [pc, #200]	; (8000d38 <HALL_Init+0x110>)

    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000c70:	f8a0 40b0 	strh.w	r4, [r0, #176]	; 0xb0
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c74:	fb0c f101 	mul.w	r1, ip, r1
 8000c78:	fba5 5101 	umull	r5, r1, r5, r1

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c7c:	4d2f      	ldr	r5, [pc, #188]	; (8000d3c <HALL_Init+0x114>)
 8000c7e:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8000c82:	fba5 5202 	umull	r5, r2, r5, r2
                              * pHandle->_Super.DPPConvFactor;
 8000c86:	69c5      	ldr	r5, [r0, #28]
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c88:	0989      	lsrs	r1, r1, #6
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c8a:	0892      	lsrs	r2, r2, #2
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000c8c:	040e      	lsls	r6, r1, #16
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c8e:	fbb2 fefc 	udiv	lr, r2, ip

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000c92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                              * pHandle->_Super.DPPConvFactor;
 8000c96:	fb05 f50e 	mul.w	r5, r5, lr
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c9a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000c9e:	f8c0 60b8 	str.w	r6, [r0, #184]	; 0xb8
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000ca2:	b289      	uxth	r1, r1
 8000ca4:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000ca8:	0052      	lsls	r2, r2, #1
    if (0U == hMaxReliableElSpeedUnit)
 8000caa:	b10c      	cbz	r4, 8000cb0 <HALL_Init+0x88>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8000cac:	fbb2 f2f4 	udiv	r2, r2, r4
 8000cb0:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cb4:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000cb8:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cba:	fb0c f202 	mul.w	r2, ip, r2
 8000cbe:	fbb2 f2f4 	udiv	r2, r2, r4
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000cc2:	699c      	ldr	r4, [r3, #24]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000cc4:	3a01      	subs	r2, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cc6:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;

    /* Set IC filter for Channel 1 (ICF1) */
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, (uint32_t)(pHandle->ICx_Filter) << 20U);
 8000cca:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8000cce:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
    pHandle->SensorIsReliable = true;
 8000cd2:	2501      	movs	r5, #1
 8000cd4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 8000cd8:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8000cdc:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000cde:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ce0:	695a      	ldr	r2, [r3, #20]
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	432a      	orrs	r2, r5
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f042 0204 	orr.w	r2, r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	f042 0202 	orr.w	r2, r2, #2
 8000cf8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	432a      	orrs	r2, r5
 8000cfe:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000d00:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	432a      	orrs	r2, r5
 8000d06:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	601a      	str	r2, [r3, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000d0e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000d12:	b163      	cbz	r3, 8000d2e <HALL_Init+0x106>
 8000d14:	3b01      	subs	r3, #1
 8000d16:	b2d9      	uxtb	r1, r3
 8000d18:	f100 0350 	add.w	r3, r0, #80	; 0x50
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000d1c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8000d20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000d24:	304c      	adds	r0, #76	; 0x4c
 8000d26:	f840 2f04 	str.w	r2, [r0, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d1fb      	bne.n	8000d26 <HALL_Init+0xfe>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f04f 0c96 	mov.w	ip, #150	; 0x96
      pHandle->HallTimeout = 150U;
 8000d34:	4665      	mov	r5, ip
 8000d36:	e798      	b.n	8000c6a <HALL_Init+0x42>
 8000d38:	10624dd3 	.word	0x10624dd3
 8000d3c:	aaaaaaab 	.word	0xaaaaaaab

08000d40 <HALL_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000d40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000d42:	68d1      	ldr	r1, [r2, #12]
 8000d44:	f021 0102 	bic.w	r1, r1, #2

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 8000d48:	2300      	movs	r3, #0
{
 8000d4a:	b430      	push	{r4, r5}

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8000d4c:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 8000d50:	60d1      	str	r1, [r2, #12]
    pHandle->SensorIsReliable = true;
 8000d52:	2101      	movs	r1, #1
    pHandle->RatioDec = false;
 8000d54:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
    pHandle->Direction = POSITIVE;
 8000d58:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    pHandle->RatioInc = false;
 8000d5c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    pHandle->SpeedFIFOIdx = 0U;
 8000d60:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    pHandle->FirstCapt = 0U;
 8000d64:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    pHandle->_Super.bSpeedErrorNumber = 0;
 8000d68:	7003      	strb	r3, [r0, #0]
    pHandle->BufferFilled = 0U;
 8000d6a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    pHandle->_Super.hMecAccelUnitP = 0;
 8000d6e:	8243      	strh	r3, [r0, #18]
    pHandle->OVFCounter = 0U;
 8000d70:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
    pHandle->CompSpeed = 0;
 8000d74:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
    pHandle->SensorIsReliable = true;
 8000d78:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8000d7c:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8000d7e:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000d86:	68d3      	ldr	r3, [r2, #12]
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	60d3      	str	r3, [r2, #12]
    /* Nothing to do */
  }
  else
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000d8e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000d92:	bb0b      	cbnz	r3, 8000dd8 <HALL_Clear+0x98>
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d94:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000d98:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000d9c:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d9e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000da0:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000da2:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8000da6:	bf0c      	ite	eq
 8000da8:	2401      	moveq	r4, #1
 8000daa:	2400      	movne	r4, #0
 8000dac:	43ab      	bics	r3, r5
 8000dae:	6909      	ldr	r1, [r1, #16]
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8000dbc:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000dbe:	bf08      	it	eq
 8000dc0:	f043 0301 	orreq.w	r3, r3, #1
 8000dc4:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d85e      	bhi.n	8000e8c <HALL_Clear+0x14c>
 8000dce:	e8df f003 	tbb	[pc, r3]
 8000dd2:	352b      	.short	0x352b
 8000dd4:	2153493f 	.word	0x2153493f
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000dd8:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000dda:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000ddc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000dde:	6914      	ldr	r4, [r2, #16]
 8000de0:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000de2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000de4:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000de8:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000dea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000dec:	bf0c      	ite	eq
 8000dee:	2101      	moveq	r1, #1
 8000df0:	2100      	movne	r1, #0
 8000df2:	43ab      	bics	r3, r5
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	43a2      	bics	r2, r4
 8000dfc:	bf0c      	ite	eq
 8000dfe:	2201      	moveq	r2, #1
 8000e00:	2200      	movne	r2, #0
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000e08:	f082 0204 	eor.w	r2, r2, #4
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8000e12:	e7d9      	b.n	8000dc8 <HALL_Clear+0x88>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e14:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e16:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8000e1a:	3b3f      	subs	r3, #63	; 0x3f
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	8083      	strh	r3, [r0, #4]
}
 8000e20:	bc30      	pop	{r4, r5}
        break;
      }
    }

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e22:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e26:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e28:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e2a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e2e:	333f      	adds	r3, #63	; 0x3f
 8000e30:	b21b      	sxth	r3, r3
}
 8000e32:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e34:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e36:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e3a:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e3c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e3e:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8000e42:	3b2a      	subs	r3, #42	; 0x2a
 8000e44:	b21b      	sxth	r3, r3
}
 8000e46:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e48:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e4a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e4e:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e50:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e52:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8000e56:	332a      	adds	r3, #42	; 0x2a
 8000e58:	b21b      	sxth	r3, r3
}
 8000e5a:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e5c:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e5e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e62:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000e64:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e66:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8000e6a:	3b15      	subs	r3, #21
 8000e6c:	b21b      	sxth	r3, r3
}
 8000e6e:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000e70:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e72:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e76:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000e78:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e7a:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8000e7e:	3315      	adds	r3, #21
 8000e80:	b21b      	sxth	r3, r3
}
 8000e82:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000e84:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e86:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e8a:	4770      	bx	lr
        pHandle->SensorIsReliable = false;
 8000e8c:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e8e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8000e92:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 8000e96:	e7c3      	b.n	8000e20 <HALL_Clear+0xe0>

08000e98 <HALL_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000e98:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8000e9c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000ea0:	429a      	cmp	r2, r3
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000ea2:	8883      	ldrh	r3, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000ea4:	d00f      	beq.n	8000ec6 <HALL_CalcElAngle+0x2e>
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000ea6:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000eaa:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eae:	b291      	uxth	r1, r2
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000eb0:	440b      	add	r3, r1
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eb2:	4461      	add	r1, ip
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000eb4:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eb8:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000ebc:	4463      	add	r3, ip
 8000ebe:	b21b      	sxth	r3, r3
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000ec0:	8083      	strh	r3, [r0, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8000ec6:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8000eca:	4413      	add	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	8083      	strh	r3, [r0, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	4770      	bx	lr

08000ed4 <HALL_CalcAvrgMecSpeedUnit>:
{
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4604      	mov	r4, r0
    if (pHandle->SensorIsReliable)
 8000ed8:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8000edc:	460d      	mov	r5, r1
    if (pHandle->SensorIsReliable)
 8000ede:	b180      	cbz	r0, 8000f02 <HALL_CalcAvrgMecSpeedUnit+0x2e>
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000ee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8000ee2:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d811      	bhi.n	8000f10 <HALL_CalcAvrgMecSpeedUnit+0x3c>
        pHandle->_Super.hElSpeedDpp = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	81e3      	strh	r3, [r4, #14]
        *hMecSpeedUnit = 0;
 8000ef0:	800b      	strh	r3, [r1, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f007 fe8b 	bl	8008c10 <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000efa:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000efe:	81a3      	strh	r3, [r4, #12]
}
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8000f02:	78e3      	ldrb	r3, [r4, #3]
 8000f04:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8000f06:	4603      	mov	r3, r0
      pHandle->_Super.hElSpeedDpp = 0;
 8000f08:	81e0      	strh	r0, [r4, #14]
      *hMecSpeedUnit = 0;
 8000f0a:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000f0c:	81a3      	strh	r3, [r4, #12]
}
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8000f10:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8000f14:	81e3      	strh	r3, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8000f16:	b31b      	cbz	r3, 8000f60 <HALL_CalcAvrgMecSpeedUnit+0x8c>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000f18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d01d      	beq.n	8000f5c <HALL_CalcAvrgMecSpeedUnit+0x88>
            if (true == pHandle->HallMtpa)
 8000f20:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8000f24:	b9f2      	cbnz	r2, 8000f64 <HALL_CalcAvrgMecSpeedUnit+0x90>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000f26:	88a2      	ldrh	r2, [r4, #4]
 8000f28:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8000f2c:	1a89      	subs	r1, r1, r2
 8000f2e:	b209      	sxth	r1, r1
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000f30:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000f34:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000f38:	fb91 f1f2 	sdiv	r1, r1, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8000f3c:	8b62      	ldrh	r2, [r4, #26]
 8000f3e:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000f46:	69e1      	ldr	r1, [r4, #28]
 8000f48:	7862      	ldrb	r2, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 8000f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f4e:	005b      	lsls	r3, r3, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000f50:	fb01 f202 	mul.w	r2, r1, r2
 8000f54:	fb93 f3f2 	sdiv	r3, r3, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8000f58:	802b      	strh	r3, [r5, #0]
 8000f5a:	e7ca      	b.n	8000ef2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8000f5c:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8000f60:	802b      	strh	r3, [r5, #0]
 8000f62:	e7c6      	b.n	8000ef2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
              pHandle->CompSpeed = 0;
 8000f64:	2100      	movs	r1, #0
 8000f66:	e7e9      	b.n	8000f3c <HALL_CalcAvrgMecSpeedUnit+0x68>

08000f68 <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8000f68:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d049      	beq.n	8001004 <HALL_TIMx_CC_IRQHandler+0x9c>
{
 8000f70:	b4f0      	push	{r4, r5, r6, r7}
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000f72:	f890 3020 	ldrb.w	r3, [r0, #32]
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8000f76:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    bPrevHallState = pHandle->HallState;
 8000f78:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8000f7c:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000f80:	b32b      	cbz	r3, 8000fce <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000f82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000f84:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000f86:	691e      	ldr	r6, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000f88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f8a:	691a      	ldr	r2, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f8e:	691f      	ldr	r7, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000f90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f92:	4393      	bics	r3, r2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f96:	bf0c      	ite	eq
 8000f98:	2201      	moveq	r2, #1
 8000f9a:	2200      	movne	r2, #0
 8000f9c:	43bb      	bics	r3, r7
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	43b5      	bics	r5, r6
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000fa6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000faa:	bf0c      	ite	eq
 8000fac:	2201      	moveq	r2, #1
 8000fae:	2200      	movne	r2, #0
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	f082 0204 	eor.w	r2, r2, #4
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch (pHandle->HallState)
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	f200 8178 	bhi.w	80012b4 <HALL_TIMx_CC_IRQHandler+0x34c>
 8000fc4:	e8df f003 	tbb	[pc, r3]
 8000fc8:	505f7183 	.word	0x505f7183
 8000fcc:	203e      	.short	0x203e
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000fce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fd0:	691a      	ldr	r2, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000fd4:	691e      	ldr	r6, [r3, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000fd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fd8:	4393      	bics	r3, r2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000fda:	6b02      	ldr	r2, [r0, #48]	; 0x30
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000fdc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000fde:	6915      	ldr	r5, [r2, #16]
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2201      	moveq	r2, #1
 8000fe4:	2200      	movne	r2, #0
 8000fe6:	43b3      	bics	r3, r6
 8000fe8:	bf0c      	ite	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	2300      	movne	r3, #0
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000ff4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000ff6:	43aa      	bics	r2, r5
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000ff8:	bf08      	it	eq
 8000ffa:	f043 0301 	orreq.w	r3, r3, #1
 8000ffe:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8001002:	e7db      	b.n	8000fbc <HALL_TIMx_CC_IRQHandler+0x54>
}
 8001004:	2000      	movs	r0, #0
 8001006:	4770      	bx	lr
        if (STATE_2 == bPrevHallState)
 8001008:	f1bc 0f02 	cmp.w	ip, #2
 800100c:	f000 808c 	beq.w	8001128 <HALL_TIMx_CC_IRQHandler+0x1c0>
        else if (STATE_4 == bPrevHallState)
 8001010:	f1bc 0f04 	cmp.w	ip, #4
 8001014:	f000 80ad 	beq.w	8001172 <HALL_TIMx_CC_IRQHandler+0x20a>
    PrevDirection = pHandle->Direction;
 8001018:	460b      	mov	r3, r1
    if (true == pHandle->HallMtpa)
 800101a:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 800101e:	b112      	cbz	r2, 8001026 <HALL_TIMx_CC_IRQHandler+0xbe>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8001020:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 8001024:	8082      	strh	r2, [r0, #4]
    if (0U == pHandle->FirstCapt)
 8001026:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 800102a:	2a00      	cmp	r2, #0
 800102c:	f040 80ad 	bne.w	800118a <HALL_TIMx_CC_IRQHandler+0x222>
      pHandle->FirstCapt++;
 8001030:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8001034:	3301      	adds	r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800103c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800103e:	2000      	movs	r0, #0
 8001040:	bcf0      	pop	{r4, r5, r6, r7}
 8001042:	4770      	bx	lr
        if (STATE_4 == bPrevHallState)
 8001044:	f1bc 0f04 	cmp.w	ip, #4
 8001048:	d078      	beq.n	800113c <HALL_TIMx_CC_IRQHandler+0x1d4>
        else if (STATE_1 == bPrevHallState)
 800104a:	f1bc 0f01 	cmp.w	ip, #1
 800104e:	d1e3      	bne.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001050:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001052:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8001056:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8001058:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800105a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800105e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e04d      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_6 == bPrevHallState)
 8001068:	f1bc 0f06 	cmp.w	ip, #6
 800106c:	d077      	beq.n	800115e <HALL_TIMx_CC_IRQHandler+0x1f6>
        else if (STATE_5 == bPrevHallState)
 800106e:	f1bc 0f05 	cmp.w	ip, #5
 8001072:	d1d1      	bne.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001074:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001076:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	e03e      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_1 == bPrevHallState)
 8001086:	f1bc 0f01 	cmp.w	ip, #1
 800108a:	d05e      	beq.n	800114a <HALL_TIMx_CC_IRQHandler+0x1e2>
        else if (STATE_2 == bPrevHallState)
 800108c:	f1bc 0f02 	cmp.w	ip, #2
 8001090:	d1c2      	bne.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001092:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001094:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001098:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 800109a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800109c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010a0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	e02c      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_3 == bPrevHallState)
 80010aa:	f1bc 0f03 	cmp.w	ip, #3
 80010ae:	d031      	beq.n	8001114 <HALL_TIMx_CC_IRQHandler+0x1ac>
        else if (STATE_6 == bPrevHallState)
 80010b0:	f1bc 0f06 	cmp.w	ip, #6
 80010b4:	d1b0      	bne.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80010b8:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80010bc:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80010be:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010c0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010c4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	e01a      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_5 == bPrevHallState)
 80010ce:	f1bc 0f05 	cmp.w	ip, #5
 80010d2:	d00e      	beq.n	80010f2 <HALL_TIMx_CC_IRQHandler+0x18a>
        else if (STATE_3 == bPrevHallState)
 80010d4:	f1bc 0f03 	cmp.w	ip, #3
 80010d8:	d19e      	bne.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010da:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80010dc:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80010e0:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80010e2:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010e4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010e8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	e008      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80010f2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80010f4:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80010f8:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80010fa:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80010fc:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8001100:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 8001104:	4299      	cmp	r1, r3
 8001106:	d088      	beq.n	800101a <HALL_TIMx_CC_IRQHandler+0xb2>
      pHandle->BufferFilled = 0U ;
 8001108:	2200      	movs	r2, #0
 800110a:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 800110e:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 8001112:	e782      	b.n	800101a <HALL_TIMx_CC_IRQHandler+0xb2>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001114:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001116:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 800111a:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800111c:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 800111e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001122:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8001126:	e7ed      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001128:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800112a:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 800112e:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001130:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8001132:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001136:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800113a:	e7e3      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800113c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800113e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8001142:	2301      	movs	r3, #1
 8001144:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8001148:	e7dc      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 800114a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 800114c:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001150:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8001154:	3355      	adds	r3, #85	; 0x55
 8001156:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 800115a:	4663      	mov	r3, ip
 800115c:	e7d2      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800115e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001160:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8001164:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001166:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8001168:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800116c:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8001170:	e7c8      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001172:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001174:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8001178:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 800117a:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800117c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8001180:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	e7bc      	b.n	8001104 <HALL_TIMx_CC_IRQHandler+0x19c>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800118a:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 800118e:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8001192:	4562      	cmp	r2, ip
 8001194:	d205      	bcs.n	80011a2 <HALL_TIMx_CC_IRQHandler+0x23a>
        pHandle->BufferFilled++;
 8001196:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 800119a:	3201      	adds	r2, #1
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 80011a2:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80011a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011a6:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if (pHandle->OVFCounter != 0U)
 80011aa:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011ae:	0412      	lsls	r2, r2, #16
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 80011b0:	b289      	uxth	r1, r1
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011b2:	fa12 f286 	uxtah	r2, r2, r6
      if (pHandle->OVFCounter != 0U)
 80011b6:	f005 07ff 	and.w	r7, r5, #255	; 0xff
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d044      	beq.n	8001248 <HALL_TIMx_CC_IRQHandler+0x2e0>
        hAux = hPrscBuf + 1U;
 80011be:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 80011c0:	b289      	uxth	r1, r1
 80011c2:	fb01 f202 	mul.w	r2, r1, r2
        if (pHandle->RatioInc)
 80011c6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80011ca:	2900      	cmp	r1, #0
 80011cc:	d046      	beq.n	800125c <HALL_TIMx_CC_IRQHandler+0x2f4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80011ce:	2100      	movs	r1, #0
 80011d0:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
      if (wCaptBuf < pHandle->MinPeriod)
 80011d4:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 80011d8:	4291      	cmp	r1, r2
 80011da:	d82f      	bhi.n	800123c <HALL_TIMx_CC_IRQHandler+0x2d4>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011dc:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
        if (wCaptBuf >= pHandle->MaxPeriod)
 80011e0:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011e4:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80011e8:	eb00 0781 	add.w	r7, r0, r1, lsl #2
        if (wCaptBuf >= pHandle->MaxPeriod)
 80011ec:	4295      	cmp	r5, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011ee:	6d3e      	ldr	r6, [r7, #80]	; 0x50
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80011f0:	bf88      	it	hi
 80011f2:	fb03 f502 	mulhi.w	r5, r3, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011f6:	eba4 0406 	sub.w	r4, r4, r6
        pHandle->SpeedFIFOIdx++;
 80011fa:	f101 0101 	add.w	r1, r1, #1
 80011fe:	b2c9      	uxtb	r1, r1
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8001200:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001204:	bf8a      	itet	hi
 8001206:	1964      	addhi	r4, r4, r5
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8001208:	435d      	mulls	r5, r3
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800120a:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 800120e:	458c      	cmp	ip, r1
 8001210:	653d      	str	r5, [r7, #80]	; 0x50
          pHandle->SpeedFIFOIdx = 0U;
 8001212:	bf08      	it	eq
 8001214:	2100      	moveq	r1, #0
 8001216:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
        if (pHandle->SensorIsReliable)
 800121a:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 800121e:	b349      	cbz	r1, 8001274 <HALL_TIMx_CC_IRQHandler+0x30c>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8001220:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 8001224:	458c      	cmp	ip, r1
 8001226:	d93a      	bls.n	800129e <HALL_TIMx_CC_IRQHandler+0x336>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d038      	beq.n	800129e <HALL_TIMx_CC_IRQHandler+0x336>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 800122c:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 8001230:	fbb1 f2f2 	udiv	r2, r1, r2
 8001234:	fb02 f303 	mul.w	r3, r2, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8001238:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	2000      	movs	r0, #0
 8001246:	4770      	bx	lr
        if (pHandle->RatioDec) /* and don't decrease it again */
 8001248:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 800124c:	b1ad      	cbz	r5, 800127a <HALL_TIMx_CC_IRQHandler+0x312>
          hAux = hPrscBuf + 2U;
 800124e:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 8001250:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8001252:	f880 704a 	strb.w	r7, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 8001256:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 800125a:	e7bb      	b.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
 800125c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 800125e:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 8001262:	428d      	cmp	r5, r1
 8001264:	d9b6      	bls.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
 8001266:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8001268:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800126a:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800126c:	2101      	movs	r1, #1
 800126e:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 8001272:	e7af      	b.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
          pHandle->AvrElSpeedDpp = 0;
 8001274:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8001278:	e7e0      	b.n	800123c <HALL_TIMx_CC_IRQHandler+0x2d4>
          uint16_t hAux = hPrscBuf + 1U;
 800127a:	3101      	adds	r1, #1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 800127c:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 800127e:	b289      	uxth	r1, r1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001280:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 8001284:	fb01 f202 	mul.w	r2, r1, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001288:	d2a4      	bcs.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800128a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 800128c:	2900      	cmp	r1, #0
 800128e:	d0a1      	beq.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
 8001290:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 8001292:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001294:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 8001296:	2101      	movs	r1, #1
 8001298:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 800129c:	e79a      	b.n	80011d4 <HALL_TIMx_CC_IRQHandler+0x26c>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 800129e:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80012a2:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80012a6:	fb92 fcfc 	sdiv	ip, r2, ip
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80012aa:	fb93 f3fc 	sdiv	r3, r3, ip
 80012ae:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80012b2:	e7c3      	b.n	800123c <HALL_TIMx_CC_IRQHandler+0x2d4>
        pHandle->SensorIsReliable = false;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 80012ba:	e6ad      	b.n	8001018 <HALL_TIMx_CC_IRQHandler+0xb0>

080012bc <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 80012bc:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80012c0:	b1e3      	cbz	r3, 80012fc <HALL_TIMx_UP_IRQHandler+0x40>
{
 80012c2:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 80012c4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80012c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 80012d2:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80012d4:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80012d8:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80012dc:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 80012e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e8:	fb04 2202 	mla	r2, r4, r2, r2
 80012ec:	fbb3 f3f2 	udiv	r3, r3, r2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d204      	bcs.n	8001300 <HALL_TIMx_UP_IRQHandler+0x44>
}
 80012f6:	2000      	movs	r0, #0
 80012f8:	bc30      	pop	{r4, r5}
 80012fa:	4770      	bx	lr
 80012fc:	2000      	movs	r0, #0
 80012fe:	4770      	bx	lr
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001300:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8001304:	2200      	movs	r2, #0
 8001306:	81c2      	strh	r2, [r0, #14]
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001308:	bb0b      	cbnz	r3, 800134e <HALL_TIMx_UP_IRQHandler+0x92>
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800130a:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800130c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800130e:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001312:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001314:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001316:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001318:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 800131c:	bf0c      	ite	eq
 800131e:	2401      	moveq	r4, #1
 8001320:	2400      	movne	r4, #0
 8001322:	43ab      	bics	r3, r5
 8001324:	6909      	ldr	r1, [r1, #16]
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8001332:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001334:	bf08      	it	eq
 8001336:	f043 0301 	orreq.w	r3, r3, #1
 800133a:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch (pHandle->HallState)
 800133e:	3b01      	subs	r3, #1
 8001340:	2b05      	cmp	r3, #5
 8001342:	d871      	bhi.n	8001428 <HALL_TIMx_UP_IRQHandler+0x16c>
 8001344:	e8df f003 	tbb	[pc, r3]
 8001348:	545b6269 	.word	0x545b6269
 800134c:	214d      	.short	0x214d
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 800134e:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001350:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001352:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001354:	6914      	ldr	r4, [r2, #16]
 8001356:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800135a:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 800135c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800135e:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001360:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001362:	bf0c      	ite	eq
 8001364:	2101      	moveq	r1, #1
 8001366:	2100      	movne	r1, #0
 8001368:	43ab      	bics	r3, r5
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	43a2      	bics	r2, r4
 8001372:	bf0c      	ite	eq
 8001374:	2201      	moveq	r2, #1
 8001376:	2200      	movne	r2, #0
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800137e:	f082 0204 	eor.w	r2, r2, #4
 8001382:	4313      	orrs	r3, r2
 8001384:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8001388:	e7d9      	b.n	800133e <HALL_TIMx_UP_IRQHandler+0x82>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 800138a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800138c:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8001390:	3b3f      	subs	r3, #63	; 0x3f
 8001392:	b21b      	sxth	r3, r3
 8001394:	8083      	strh	r3, [r0, #4]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001396:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800139a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0U;
 800139e:	2200      	movs	r2, #0
 80013a0:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0U;
 80013a4:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80013a8:	b17c      	cbz	r4, 80013ca <HALL_TIMx_UP_IRQHandler+0x10e>
 80013aa:	1e62      	subs	r2, r4, #1
 80013ac:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 80013ae:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 80013b2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80013b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013ba:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 80013be:	f843 1f04 	str.w	r1, [r3, #4]!
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d1fb      	bne.n	80013be <HALL_TIMx_UP_IRQHandler+0x102>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80013c6:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0U ;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 80013d0:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum = (int32_t)tempReg;
 80013d4:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 80013d8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 80013dc:	bc30      	pop	{r4, r5}
 80013de:	2000      	movs	r0, #0
 80013e0:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 80013e2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80013e4:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80013e8:	3315      	adds	r3, #21
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	8083      	strh	r3, [r0, #4]
        break;
 80013ee:	e7d2      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 80013f0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80013f2:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80013f6:	3b15      	subs	r3, #21
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8083      	strh	r3, [r0, #4]
        break;
 80013fc:	e7cb      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 80013fe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001400:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8001404:	332a      	adds	r3, #42	; 0x2a
 8001406:	b21b      	sxth	r3, r3
 8001408:	8083      	strh	r3, [r0, #4]
        break;
 800140a:	e7c4      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 800140c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800140e:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8001412:	3b2a      	subs	r3, #42	; 0x2a
 8001414:	b21b      	sxth	r3, r3
 8001416:	8083      	strh	r3, [r0, #4]
        break;
 8001418:	e7bd      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 800141a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800141c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001420:	333f      	adds	r3, #63	; 0x3f
 8001422:	b21b      	sxth	r3, r3
 8001424:	8083      	strh	r3, [r0, #4]
        break;
 8001426:	e7b6      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->SensorIsReliable = false;
 8001428:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800142a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 800142e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 8001432:	e7b0      	b.n	8001396 <HALL_TIMx_UP_IRQHandler+0xda>
 8001434:	0000      	movs	r0, r0
	...

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b500      	push	{lr}
 800143a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143c:	2238      	movs	r2, #56	; 0x38
 800143e:	2100      	movs	r1, #0
 8001440:	a806      	add	r0, sp, #24
 8001442:	f007 fd0f 	bl	8008e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001446:	2000      	movs	r0, #0
 8001448:	e9cd 0000 	strd	r0, r0, [sp]
 800144c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8001450:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001452:	f004 f89f 	bl	8005594 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001456:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80014b0 <SystemClock_Config+0x78>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145c:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800145e:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001460:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001464:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001466:	2155      	movs	r1, #85	; 0x55
 8001468:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146c:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001470:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001474:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f004 f912 	bl	80056a0 <HAL_RCC_OscConfig>
 800147c:	b108      	cbz	r0, 8001482 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 800147e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80014b8 <SystemClock_Config+0x80>
 8001486:	ed8d 7b00 	vstr	d7, [sp]
 800148a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80014c0 <SystemClock_Config+0x88>
 800148e:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001490:	2104      	movs	r1, #4
 8001492:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800149a:	f004 fb85 	bl	8005ba8 <HAL_RCC_ClockConfig>
 800149e:	b108      	cbz	r0, 80014a4 <SystemClock_Config+0x6c>
 80014a0:	b672      	cpsid	i
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <SystemClock_Config+0x6a>
  HAL_RCC_EnableCSS();
 80014a4:	f004 fcbc 	bl	8005e20 <HAL_RCC_EnableCSS>
}
 80014a8:	b015      	add	sp, #84	; 0x54
 80014aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ae:	bf00      	nop
 80014b0:	00000001 	.word	0x00000001
 80014b4:	00010000 	.word	0x00010000
 80014b8:	0000000f 	.word	0x0000000f
 80014bc:	00000003 	.word	0x00000003
	...

080014c8 <main>:
{
 80014c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	2400      	movs	r4, #0
{
 80014ce:	b0af      	sub	sp, #188	; 0xbc
  HAL_Init();
 80014d0:	f002 ff30 	bl	8004334 <HAL_Init>
  SystemClock_Config();
 80014d4:	f7ff ffb0 	bl	8001438 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80014dc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4dab      	ldr	r5, [pc, #684]	; (8001790 <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	9422      	str	r4, [sp, #136]	; 0x88
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80014e6:	48ab      	ldr	r0, [pc, #684]	; (8001794 <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80014ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	9304      	str	r3, [sp, #16]
 80014f6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001500:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	9305      	str	r3, [sp, #20]
 8001508:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001512:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	9306      	str	r3, [sp, #24]
 800151a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001524:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800152a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800152e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001534:	f004 f828 	bl	8005588 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001540:	4895      	ldr	r0, [pc, #596]	; (8001798 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001544:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001546:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800154a:	f003 ff25 	bl	8005398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800154e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001552:	2301      	movs	r3, #1
 8001554:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	488e      	ldr	r0, [pc, #568]	; (8001794 <main+0x2cc>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800155a:	2202      	movs	r2, #2
 800155c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001560:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f003 ff18 	bl	8005398 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001568:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	64ab      	str	r3, [r5, #72]	; 0x48
 8001570:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64ab      	str	r3, [r5, #72]	; 0x48
 8001582:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 8001584:	4d85      	ldr	r5, [pc, #532]	; (800179c <main+0x2d4>)
  ADC_MultiModeTypeDef multimode = {0};
 8001586:	9410      	str	r4, [sp, #64]	; 0x40
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001588:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800158c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001590:	223c      	movs	r2, #60	; 0x3c
 8001592:	a81e      	add	r0, sp, #120	; 0x78
  ADC_ChannelConfTypeDef sConfig = {0};
 8001594:	2720      	movs	r7, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	9b03      	ldr	r3, [sp, #12]
  ADC_MultiModeTypeDef multimode = {0};
 8001598:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800159c:	f007 fc62 	bl	8008e64 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a0:	4621      	mov	r1, r4
 80015a2:	463a      	mov	r2, r7
 80015a4:	a816      	add	r0, sp, #88	; 0x58
 80015a6:	f007 fc5d 	bl	8008e64 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015aa:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ae:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;		// No external trigger
 80015b2:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 80015b6:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015b8:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015be:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015c2:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015c4:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 80015c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015cc:	2401      	movs	r4, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ce:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d0:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015d2:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 80015d4:	622c      	str	r4, [r5, #32]
  hadc1.Instance = ADC1;
 80015d6:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015d8:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015dc:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015de:	f002 fedd 	bl	800439c <HAL_ADC_Init>
 80015e2:	b108      	cbz	r0, 80015e8 <main+0x120>
 80015e4:	b672      	cpsid	i
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <main+0x11e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015e8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015ea:	a910      	add	r1, sp, #64	; 0x40
 80015ec:	4628      	mov	r0, r5
 80015ee:	f003 fd3f 	bl	8005070 <HAL_ADCEx_MultiModeConfigChannel>
 80015f2:	b108      	cbz	r0, 80015f8 <main+0x130>
 80015f4:	b672      	cpsid	i
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <main+0x12e>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;		// real trigger
 80015f8:	ed9f 8b63 	vldr	d8, [pc, #396]	; 8001788 <main+0x2c0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <main+0x2d8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80015fe:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.InjectedOffset = 0;
 8001602:	e9cd 6022 	strd	r6, r0, [sp, #136]	; 0x88
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001606:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800160a:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800160e:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001612:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001616:	f04f 0902 	mov.w	r9, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800161a:	a91e      	add	r1, sp, #120	; 0x78
 800161c:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800161e:	e9cd 3b1e 	strd	r3, fp, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;		// real trigger
 8001622:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001626:	9420      	str	r4, [sp, #128]	; 0x80
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001628:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
  sConfigInjected.InjectedNbrOfConversion = 2;
 800162c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001630:	f003 fa24 	bl	8004a7c <HAL_ADCEx_InjectedConfigChannel>
 8001634:	b108      	cbz	r0, 800163a <main+0x172>
 8001636:	b672      	cpsid	i
  while (1)
 8001638:	e7fe      	b.n	8001638 <main+0x170>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <main+0x2dc>)
 800163c:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001640:	a91e      	add	r1, sp, #120	; 0x78
 8001642:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001644:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001648:	f003 fa18 	bl	8004a7c <HAL_ADCEx_InjectedConfigChannel>
 800164c:	b108      	cbz	r0, 8001652 <main+0x18a>
 800164e:	b672      	cpsid	i
  while (1)
 8001650:	e7fe      	b.n	8001650 <main+0x188>
  sConfig.Channel = ADC_CHANNEL_1;
 8001652:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <main+0x2e0>)
 8001654:	2306      	movs	r3, #6
 8001656:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800165a:	2204      	movs	r2, #4
 800165c:	237f      	movs	r3, #127	; 0x7f
 800165e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001662:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 8001664:	2204      	movs	r2, #4
 8001666:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800166a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166e:	f002 ff99 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8001672:	4601      	mov	r1, r0
 8001674:	b108      	cbz	r0, 800167a <main+0x1b2>
 8001676:	b672      	cpsid	i
  while (1)
 8001678:	e7fe      	b.n	8001678 <main+0x1b0>
  hadc2.Instance = ADC2;
 800167a:	4d4c      	ldr	r5, [pc, #304]	; (80017ac <main+0x2e4>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800167c:	9001      	str	r0, [sp, #4]
 800167e:	223c      	movs	r2, #60	; 0x3c
 8001680:	a81e      	add	r0, sp, #120	; 0x78
 8001682:	f007 fbef 	bl	8008e64 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001686:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8001688:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <main+0x2e8>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800168a:	83a9      	strh	r1, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800168c:	4628      	mov	r0, r5
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800168e:	e9c5 1101 	strd	r1, r1, [r5, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001692:	e9c5 1404 	strd	r1, r4, [r5, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001696:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169a:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 1;
 800169c:	622c      	str	r4, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800169e:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016a2:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016a6:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80016a8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 80016ac:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016ae:	f002 fe75 	bl	800439c <HAL_ADC_Init>
 80016b2:	b108      	cbz	r0, 80016b8 <main+0x1f0>
 80016b4:	b672      	cpsid	i
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <main+0x1ee>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80016b8:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <main+0x2dc>)
  sConfigInjected.InjectedOffset = 0;
 80016ba:	9023      	str	r0, [sp, #140]	; 0x8c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80016bc:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  sConfigInjected.QueueInjectedContext = DISABLE;
 80016c0:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80016c4:	f88d 00a8 	strb.w	r0, [sp, #168]	; 0xa8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016c8:	a91e      	add	r1, sp, #120	; 0x78
 80016ca:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80016cc:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80016d0:	e9cd a621 	strd	sl, r6, [sp, #132]	; 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80016d4:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80016d8:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80016dc:	9420      	str	r4, [sp, #128]	; 0x80
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80016de:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016e0:	f003 f9cc 	bl	8004a7c <HAL_ADCEx_InjectedConfigChannel>
 80016e4:	b108      	cbz	r0, 80016ea <main+0x222>
 80016e6:	b672      	cpsid	i
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <main+0x220>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <main+0x2ec>)
 80016ec:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016f0:	4628      	mov	r0, r5
 80016f2:	a91e      	add	r1, sp, #120	; 0x78
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80016f4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016f8:	f003 f9c0 	bl	8004a7c <HAL_ADCEx_InjectedConfigChannel>
 80016fc:	b108      	cbz	r0, 8001702 <main+0x23a>
 80016fe:	b672      	cpsid	i
  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x238>
  hcordic.Instance = CORDIC;
 8001702:	482d      	ldr	r0, [pc, #180]	; (80017b8 <main+0x2f0>)
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <main+0x2f4>)
 8001706:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001708:	f003 fd18 	bl	800513c <HAL_CORDIC_Init>
 800170c:	4605      	mov	r5, r0
 800170e:	b108      	cbz	r0, 8001714 <main+0x24c>
 8001710:	b672      	cpsid	i
  while (1)
 8001712:	e7fe      	b.n	8001712 <main+0x24a>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001714:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8001718:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 8001720:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 8001724:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800172c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001730:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001732:	9008      	str	r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001734:	900c      	str	r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	901c      	str	r0, [sp, #112]	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001738:	4601      	mov	r1, r0
 800173a:	2234      	movs	r2, #52	; 0x34
 800173c:	a81e      	add	r0, sp, #120	; 0x78
 800173e:	f007 fb91 	bl	8008e64 <memset>
  htim1.Instance = TIM1;
 8001742:	481f      	ldr	r0, [pc, #124]	; (80017c0 <main+0x2f8>)
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <main+0x2fc>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);				// 1, FOC execution rate in number of PWM cycles
 8001746:	6144      	str	r4, [r0, #20]
  htim1.Instance = TIM1;
 8001748:	6003      	str	r3, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;		// tDTS = 2*tCK_INT, dead time, filter
 800174a:	f44f 54a6 	mov.w	r4, #5312	; 0x14c0
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	e9c0 4303 	strd	r4, r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;	// Center-aligned mode 1
 8001756:	6087      	str	r7, [r0, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);			// 0, Prescaler = 1
 8001758:	6045      	str	r5, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;	// TIM1 auto-reload preload is disable
 800175a:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175c:	f004 fd70 	bl	8006240 <HAL_TIM_Base_Init>
 8001760:	b108      	cbz	r0, 8001766 <main+0x29e>
 8001762:	b672      	cpsid	i
  while (1)
 8001764:	e7fe      	b.n	8001764 <main+0x29c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <main+0x2f8>)
 8001768:	f004 fdf4 	bl	8006354 <HAL_TIM_PWM_Init>
 800176c:	b108      	cbz	r0, 8001772 <main+0x2aa>
 800176e:	b672      	cpsid	i
  while (1)
 8001770:	e7fe      	b.n	8001770 <main+0x2a8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;			// SMS=110: Trigger Mode in SMCR register
 8001772:	2206      	movs	r2, #6
 8001774:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <main+0x2f8>)
 8001778:	a910      	add	r1, sp, #64	; 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;			// SMS=110: Trigger Mode in SMCR register
 800177a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800177e:	f004 ff45 	bl	800660c <HAL_TIM_SlaveConfigSynchro>
 8001782:	b308      	cbz	r0, 80017c8 <main+0x300>
 8001784:	b672      	cpsid	i
  while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x2be>
 8001788:	00000080 	.word	0x00000080
 800178c:	00000080 	.word	0x00000080
 8001790:	40021000 	.word	0x40021000
 8001794:	48000400 	.word	0x48000400
 8001798:	48000800 	.word	0x48000800
 800179c:	20000454 	.word	0x20000454
 80017a0:	08600004 	.word	0x08600004
 80017a4:	3ac04000 	.word	0x3ac04000
 80017a8:	04300002 	.word	0x04300002
 80017ac:	200004c0 	.word	0x200004c0
 80017b0:	50000100 	.word	0x50000100
 80017b4:	10c00010 	.word	0x10c00010
 80017b8:	2000052c 	.word	0x2000052c
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	20000614 	.word	0x20000614
 80017c4:	40012c00 	.word	0x40012c00
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;	// MSM = 0, no master mode, is slave mode.
 80017c8:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;		// OC4REF signal is used as trigger output(TRGO)
 80017ca:	2270      	movs	r2, #112	; 0x70
 80017cc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) 		// modify TIM1 CR2 =0x70, SMCR = 0x16
 80017ce:	489d      	ldr	r0, [pc, #628]	; (8001a44 <main+0x57c>)
 80017d0:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;		// OC4REF signal is used as trigger output(TRGO)
 80017d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) 		// modify TIM1 CR2 =0x70, SMCR = 0x16
 80017d6:	f005 fa05 	bl	8006be4 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	b108      	cbz	r0, 80017e0 <main+0x318>
 80017dc:	b672      	cpsid	i
  while (1)
 80017de:	e7fe      	b.n	80017de <main+0x316>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80017e0:	aa0c      	add	r2, sp, #48	; 0x30
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80017e2:	2101      	movs	r1, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80017e4:	4897      	ldr	r0, [pc, #604]	; (8001a44 <main+0x57c>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80017e6:	910e      	str	r1, [sp, #56]	; 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80017e8:	2401      	movs	r4, #1
 80017ea:	2501      	movs	r5, #1
 80017ec:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80017f0:	f005 fa90 	bl	8006d14 <HAL_TIMEx_ConfigBreakInput>
 80017f4:	4602      	mov	r2, r0
 80017f6:	b108      	cbz	r0, 80017fc <main+0x334>
 80017f8:	b672      	cpsid	i
  while (1)
 80017fa:	e7fe      	b.n	80017fa <main+0x332>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;					// OC mode
 80017fc:	2460      	movs	r4, #96	; 0x60
 80017fe:	f44f 6526 	mov.w	r5, #2656	; 0xa60
 8001802:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001806:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_PWM1;					// OC mode
 8001808:	2400      	movs	r4, #0
 800180a:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180c:	488d      	ldr	r0, [pc, #564]	; (8001a44 <main+0x57c>)
 800180e:	a916      	add	r1, sp, #88	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;					// OC mode
 8001810:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001814:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f005 f846 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 800181c:	b108      	cbz	r0, 8001822 <main+0x35a>
 800181e:	b672      	cpsid	i
  while (1)
 8001820:	e7fe      	b.n	8001820 <main+0x358>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001822:	4888      	ldr	r0, [pc, #544]	; (8001a44 <main+0x57c>)
 8001824:	2204      	movs	r2, #4
 8001826:	a916      	add	r1, sp, #88	; 0x58
 8001828:	f005 f83e 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 800182c:	b108      	cbz	r0, 8001832 <main+0x36a>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x368>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001832:	4884      	ldr	r0, [pc, #528]	; (8001a44 <main+0x57c>)
 8001834:	2208      	movs	r2, #8
 8001836:	a916      	add	r1, sp, #88	; 0x58
 8001838:	f005 f836 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 800183c:	b108      	cbz	r0, 8001842 <main+0x37a>
 800183e:	b672      	cpsid	i
  while (1)
 8001840:	e7fe      	b.n	8001840 <main+0x378>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) //
 8001842:	4880      	ldr	r0, [pc, #512]	; (8001a44 <main+0x57c>)
 8001844:	220c      	movs	r2, #12
 8001846:	a916      	add	r1, sp, #88	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM2;					//
 8001848:	2670      	movs	r6, #112	; 0x70
 800184a:	f241 47bf 	movw	r7, #5311	; 0x14bf
 800184e:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) //
 8001852:	f005 f829 	bl	80068a8 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	b108      	cbz	r0, 800185e <main+0x396>
 800185a:	b672      	cpsid	i
  while (1)
 800185c:	e7fe      	b.n	800185c <main+0x394>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185e:	932a      	str	r3, [sp, #168]	; 0xa8
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001868:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800186c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001870:	2300      	movs	r3, #0
 8001872:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8001876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8001882:	2203      	movs	r2, #3
 8001884:	2300      	movs	r3, #0
 8001886:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188a:	486e      	ldr	r0, [pc, #440]	; (8001a44 <main+0x57c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800188c:	2200      	movs	r2, #0
 800188e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001892:	a91e      	add	r1, sp, #120	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001894:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
 8001898:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189c:	f005 f9ec 	bl	8006c78 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a0:	4604      	mov	r4, r0
 80018a2:	b108      	cbz	r0, 80018a8 <main+0x3e0>
 80018a4:	b672      	cpsid	i
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <main+0x3de>
  HAL_TIM_MspPostInit(&htim1);
 80018a8:	4866      	ldr	r0, [pc, #408]	; (8001a44 <main+0x57c>)
 80018aa:	f002 fadd 	bl	8003e68 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 80018ae:	4866      	ldr	r0, [pc, #408]	; (8001a48 <main+0x580>)
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <main+0x584>)
 80018b2:	6003      	str	r3, [r0, #0]
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 80018b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b8:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80018bc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80018c0:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80018c4:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	9412      	str	r4, [sp, #72]	; 0x48
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	6184      	str	r4, [r0, #24]
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 80018d6:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018d8:	f004 fcb2 	bl	8006240 <HAL_TIM_Base_Init>
 80018dc:	b108      	cbz	r0, 80018e2 <main+0x41a>
 80018de:	b672      	cpsid	i
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <main+0x418>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018e6:	4858      	ldr	r0, [pc, #352]	; (8001a48 <main+0x580>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e8:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ea:	a91e      	add	r1, sp, #120	; 0x78
 80018ec:	f004 fdba 	bl	8006464 <HAL_TIM_ConfigClockSource>
 80018f0:	b108      	cbz	r0, 80018f6 <main+0x42e>
 80018f2:	b672      	cpsid	i
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <main+0x42c>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f6:	2200      	movs	r2, #0
 80018f8:	2300      	movs	r3, #0
 80018fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80018fe:	4852      	ldr	r0, [pc, #328]	; (8001a48 <main+0x580>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	220c      	movs	r2, #12
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001904:	a916      	add	r1, sp, #88	; 0x58
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001906:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800190a:	f005 f901 	bl	8006b10 <HAL_TIMEx_HallSensor_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	b108      	cbz	r0, 8001916 <main+0x44e>
 8001912:	b672      	cpsid	i
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x44c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;			// do what?? in next step
 8001916:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001918:	484b      	ldr	r0, [pc, #300]	; (8001a48 <main+0x580>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;	 // MSM = 0, no master mode, is slave mode.
 800191a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800191c:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;			// do what?? in next step
 800191e:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001920:	f005 f960 	bl	8006be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	b108      	cbz	r0, 800192c <main+0x464>
 8001928:	b672      	cpsid	i
  while (1)
 800192a:	e7fe      	b.n	800192a <main+0x462>
  huart2.Instance = USART2;
 800192c:	4c48      	ldr	r4, [pc, #288]	; (8001a50 <main+0x588>)
 800192e:	4849      	ldr	r0, [pc, #292]	; (8001a54 <main+0x58c>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001930:	62a3      	str	r3, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 8001932:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
 8001936:	e9c4 0100 	strd	r0, r1, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193a:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193c:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001942:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001946:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800194a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	f005 fc7d 	bl	800724c <HAL_UART_Init>
 8001952:	4601      	mov	r1, r0
 8001954:	b108      	cbz	r0, 800195a <main+0x492>
 8001956:	b672      	cpsid	i
  while (1)
 8001958:	e7fe      	b.n	8001958 <main+0x490>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195a:	4620      	mov	r0, r4
 800195c:	f005 fd00 	bl	8007360 <HAL_UARTEx_SetTxFifoThreshold>
 8001960:	4601      	mov	r1, r0
 8001962:	b108      	cbz	r0, 8001968 <main+0x4a0>
 8001964:	b672      	cpsid	i
  while (1)
 8001966:	e7fe      	b.n	8001966 <main+0x49e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001968:	4620      	mov	r0, r4
 800196a:	f005 fd3b 	bl	80073e4 <HAL_UARTEx_SetRxFifoThreshold>
 800196e:	b108      	cbz	r0, 8001974 <main+0x4ac>
 8001970:	b672      	cpsid	i
  while (1)
 8001972:	e7fe      	b.n	8001972 <main+0x4aa>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001974:	4620      	mov	r0, r4
 8001976:	f005 fcd5 	bl	8007324 <HAL_UARTEx_DisableFifoMode>
 800197a:	4604      	mov	r4, r0
 800197c:	b108      	cbz	r0, 8001982 <main+0x4ba>
 800197e:	b672      	cpsid	i
  while (1)
 8001980:	e7fe      	b.n	8001980 <main+0x4b8>
  MX_MotorControl_Init();
 8001982:	f000 fe3d 	bl	8002600 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001986:	2103      	movs	r1, #3
 8001988:	2201      	movs	r2, #1
 800198a:	2026      	movs	r0, #38	; 0x26
 800198c:	f003 fc02 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001990:	2026      	movs	r0, #38	; 0x26
 8001992:	f003 fc3d 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001996:	4622      	mov	r2, r4
 8001998:	2103      	movs	r1, #3
 800199a:	200b      	movs	r0, #11
 800199c:	f003 fbfa 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a0:	200b      	movs	r0, #11
 80019a2:	f003 fc35 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2104      	movs	r1, #4
 80019aa:	2018      	movs	r0, #24
 80019ac:	f003 fbf2 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019b0:	2018      	movs	r0, #24
 80019b2:	f003 fc2d 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019b6:	4622      	mov	r2, r4
 80019b8:	4621      	mov	r1, r4
 80019ba:	2019      	movs	r0, #25
 80019bc:	f003 fbea 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019c0:	2019      	movs	r0, #25
 80019c2:	f003 fc25 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80019c6:	4622      	mov	r2, r4
 80019c8:	2102      	movs	r1, #2
 80019ca:	2012      	movs	r0, #18
 80019cc:	f003 fbe2 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019d0:	2012      	movs	r0, #18
 80019d2:	f003 fc1d 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80019d6:	4622      	mov	r2, r4
 80019d8:	2103      	movs	r1, #3
 80019da:	201d      	movs	r0, #29
 80019dc:	f003 fbda 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e0:	201d      	movs	r0, #29
 80019e2:	f003 fc15 	bl	8005210 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80019e6:	4622      	mov	r2, r4
 80019e8:	2103      	movs	r1, #3
 80019ea:	2028      	movs	r0, #40	; 0x28
 80019ec:	f003 fbd2 	bl	8005194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019f0:	2028      	movs	r0, #40	; 0x28
 80019f2:	f003 fc0d 	bl	8005210 <HAL_NVIC_EnableIRQ>
  MC_StartMotor1();
 80019f6:	f000 f831 	bl	8001a5c <MC_StartMotor1>
	  MC_ProgramSpeedRampMotor1(700/6, 3000);
 80019fa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80019fe:	2074      	movs	r0, #116	; 0x74
 8001a00:	f000 f838 	bl	8001a74 <MC_ProgramSpeedRampMotor1>
	  MC_StartMotor1();
 8001a04:	f000 f82a 	bl	8001a5c <MC_StartMotor1>
	  HAL_Delay(8000);
 8001a08:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001a0c:	f002 fcb4 	bl	8004378 <HAL_Delay>
	  MC_StopMotor1();
 8001a10:	f000 f82a 	bl	8001a68 <MC_StopMotor1>
	  HAL_Delay(2000);
 8001a14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a18:	f002 fcae 	bl	8004378 <HAL_Delay>
	  MC_ProgramSpeedRampMotor1(-700/6, 3000);
 8001a1c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001a20:	f06f 0073 	mvn.w	r0, #115	; 0x73
 8001a24:	f000 f826 	bl	8001a74 <MC_ProgramSpeedRampMotor1>
	  MC_StartMotor1();
 8001a28:	f000 f818 	bl	8001a5c <MC_StartMotor1>
	  HAL_Delay(8000);
 8001a2c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001a30:	f002 fca2 	bl	8004378 <HAL_Delay>
	  MC_StopMotor1();
 8001a34:	f000 f818 	bl	8001a68 <MC_StopMotor1>
	  HAL_Delay(2000);
 8001a38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a3c:	f002 fc9c 	bl	8004378 <HAL_Delay>
  while (1)
 8001a40:	e7db      	b.n	80019fa <main+0x532>
 8001a42:	bf00      	nop
 8001a44:	20000614 	.word	0x20000614
 8001a48:	20000660 	.word	0x20000660
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	200006ac 	.word	0x200006ac
 8001a54:	40004400 	.word	0x40004400

08001a58 <Error_Handler>:
 8001a58:	b672      	cpsid	i
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <Error_Handler+0x2>

08001a5c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <MC_StartMotor1+0x8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f000 b89c 	b.w	8001b9c <MCI_StartMotor>
 8001a64:	20001928 	.word	0x20001928

08001a68 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <MC_StopMotor1+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f000 b8ac 	b.w	8001bc8 <MCI_StopMotor>
 8001a70:	20001928 	.word	0x20001928

08001a74 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001a74:	b410      	push	{r4}
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001a76:	4c04      	ldr	r4, [pc, #16]	; (8001a88 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001a7c:	6820      	ldr	r0, [r4, #0]
}
 8001a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001a82:	4619      	mov	r1, r3
 8001a84:	f000 b820 	b.w	8001ac8 <MCI_ExecSpeedRamp>
 8001a88:	20001928 	.word	0x20001928

08001a8c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001a8c:	4b01      	ldr	r3, [pc, #4]	; (8001a94 <MC_GetSTMStateMotor1+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	f000 b87e 	b.w	8001b90 <MCI_GetSTMState>
 8001a94:	20001928 	.word	0x20001928

08001a98 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001a98:	2002      	movs	r0, #2
 8001a9a:	4770      	bx	lr

08001a9c <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <MC_APP_PostMediumFrequencyHook_M1>:
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001aa4:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001aa8:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001aac:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001aae:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001ab2:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001ab6:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001aba:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001abe:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001ac2:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001ac6:	4770      	bx	lr

08001ac8 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001ac8:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001acc:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001ad0:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001ad4:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001ad6:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ad8:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001ada:	4770      	bx	lr

08001adc <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001adc:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ae0:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001ae4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001ae8:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001aea:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001aec:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001aee:	4770      	bx	lr

08001af0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001af0:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001af2:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001af4:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001af8:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001afa:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001afe:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b00:	b002      	add	sp, #8
 8001b02:	4770      	bx	lr

08001b04 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b04:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001b06:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001b10:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b14:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001b16:	8381      	strh	r1, [r0, #28]

  return;
}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001b1c:	7f83      	ldrb	r3, [r0, #30]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d000      	beq.n	8001b24 <MCI_ExecBufferedCommands+0x8>
 8001b22:	4770      	bx	lr
{
 8001b24:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001b26:	7b02      	ldrb	r2, [r0, #12]
 8001b28:	2a02      	cmp	r2, #2
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	d006      	beq.n	8001b3c <MCI_ExecBufferedCommands+0x20>
 8001b2e:	2a03      	cmp	r2, #3
 8001b30:	d026      	beq.n	8001b80 <MCI_ExecBufferedCommands+0x64>
 8001b32:	2a01      	cmp	r2, #1
 8001b34:	d015      	beq.n	8001b62 <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001b36:	2303      	movs	r3, #3
 8001b38:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b3a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001b3c:	6843      	ldr	r3, [r0, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001b44:	6800      	ldr	r0, [r0, #0]
 8001b46:	2104      	movs	r1, #4
 8001b48:	f007 f8ca 	bl	8008ce0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001b4c:	8ae2      	ldrh	r2, [r4, #22]
 8001b4e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	f007 f8c8 	bl	8008ce8 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d0ec      	beq.n	8001b36 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	77a3      	strb	r3, [r4, #30]
}
 8001b60:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001b62:	6843      	ldr	r3, [r0, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001b6a:	6800      	ldr	r0, [r0, #0]
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	f007 f8b7 	bl	8008ce0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);   // calculate the final speed or incremental
 8001b72:	8ae2      	ldrh	r2, [r4, #22]
 8001b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b78:	6820      	ldr	r0, [r4, #0]
 8001b7a:	f007 f8b5 	bl	8008ce8 <STC_ExecRamp>
          break;
 8001b7e:	e7eb      	b.n	8001b58 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001b80:	6842      	ldr	r2, [r0, #4]
 8001b82:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001b86:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001b8a:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001b8c:	e7e6      	b.n	8001b5c <MCI_ExecBufferedCommands+0x40>
 8001b8e:	bf00      	nop

08001b90 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001b90:	7e40      	ldrb	r0, [r0, #25]
 8001b92:	4770      	bx	lr

08001b94 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001b94:	8b80      	ldrh	r0, [r0, #28]
 8001b96:	4770      	bx	lr

08001b98 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001b98:	8b40      	ldrh	r0, [r0, #26]
 8001b9a:	4770      	bx	lr

08001b9c <MCI_StartMotor>:
{
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001ba0:	f7ff fff6 	bl	8001b90 <MCI_GetSTMState>
 8001ba4:	b108      	cbz	r0, 8001baa <MCI_StartMotor+0xe>
    RetVal = false;
 8001ba6:	2000      	movs	r0, #0
}
 8001ba8:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff fff2 	bl	8001b94 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d1f8      	bne.n	8001ba6 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff ffef 	bl	8001b98 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d1f3      	bne.n	8001ba6 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001bc2:	77a0      	strb	r0, [r4, #30]
}
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	bf00      	nop

08001bc8 <MCI_StopMotor>:
{
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001bcc:	f7ff ffe0 	bl	8001b90 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001bd0:	b150      	cbz	r0, 8001be8 <MCI_StopMotor+0x20>
 8001bd2:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bd6:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 8001bd8:	bf18      	it	ne
 8001bda:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bdc:	f7ff ffda 	bl	8001b94 <MCI_GetOccurredFaults>
 8001be0:	b140      	cbz	r0, 8001bf4 <MCI_StopMotor+0x2c>
    RetVal = false;
 8001be2:	2400      	movs	r4, #0
}
 8001be4:	4620      	mov	r0, r4
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 8001be8:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff ffd2 	bl	8001b94 <MCI_GetOccurredFaults>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1f6      	bne.n	8001be2 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f7ff ffcf 	bl	8001b98 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d1f1      	bne.n	8001be2 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001bfe:	2c00      	cmp	r4, #0
 8001c00:	d0ef      	beq.n	8001be2 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 8001c02:	2305      	movs	r3, #5
 8001c04:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 8001c06:	e7ed      	b.n	8001be4 <MCI_StopMotor+0x1c>

08001c08 <MCI_FaultAcknowledged>:
{
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c0c:	f7ff ffc0 	bl	8001b90 <MCI_GetSTMState>
 8001c10:	280b      	cmp	r0, #11
 8001c12:	d001      	beq.n	8001c18 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001c14:	2000      	movs	r0, #0
}
 8001c16:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff ffbd 	bl	8001b98 <MCI_GetCurrentFaults>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d1f8      	bne.n	8001c14 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001c22:	2302      	movs	r3, #2
 8001c24:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8001c26:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001c28:	2001      	movs	r0, #1
}
 8001c2a:	bd10      	pop	{r4, pc}

08001c2c <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001c2c:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001c2e:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001c38:	7fc0      	ldrb	r0, [r0, #31]
 8001c3a:	4770      	bx	lr

08001c3c <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001c3c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001c44:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001c4c:	8ac0      	ldrh	r0, [r0, #22]
 8001c4e:	4770      	bx	lr

08001c50 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001c50:	6800      	ldr	r0, [r0, #0]
 8001c52:	f007 b88d 	b.w	8008d70 <STC_StopRamp>
 8001c56:	bf00      	nop

08001c58 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001c58:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001c5a:	6800      	ldr	r0, [r0, #0]
 8001c5c:	f007 f82e 	bl	8008cbc <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001c64:	f006 bfcc 	b.w	8008c00 <SPD_GetAvrgMecSpeedUnit>

08001c68 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001c68:	6800      	ldr	r0, [r0, #0]
 8001c6a:	f007 b831 	b.w	8008cd0 <STC_GetMecSpeedRefUnit>
 8001c6e:	bf00      	nop

08001c70 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001c70:	6842      	ldr	r2, [r0, #4]
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	b282      	uxth	r2, r0
 8001c78:	f362 030f 	bfi	r3, r2, #0, #16
 8001c7c:	0c00      	lsrs	r0, r0, #16
 8001c7e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c82:	b082      	sub	sp, #8
#endif
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	b002      	add	sp, #8
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop

08001c8c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001c8c:	6842      	ldr	r2, [r0, #4]
 8001c8e:	6850      	ldr	r0, [r2, #4]
 8001c90:	2300      	movs	r3, #0
 8001c92:	b282      	uxth	r2, r0
 8001c94:	f362 030f 	bfi	r3, r2, #0, #16
 8001c98:	0c00      	lsrs	r0, r0, #16
 8001c9a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c9e:	b082      	sub	sp, #8
#endif
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	b002      	add	sp, #8
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001ca8:	6842      	ldr	r2, [r0, #4]
 8001caa:	68d0      	ldr	r0, [r2, #12]
 8001cac:	2300      	movs	r3, #0
 8001cae:	b282      	uxth	r2, r0
 8001cb0:	f362 030f 	bfi	r3, r2, #0, #16
 8001cb4:	0c00      	lsrs	r0, r0, #16
 8001cb6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001cba:	b082      	sub	sp, #8
#endif
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	b002      	add	sp, #8
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001cc4:	6842      	ldr	r2, [r0, #4]
 8001cc6:	6910      	ldr	r0, [r2, #16]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	b282      	uxth	r2, r0
 8001ccc:	f362 030f 	bfi	r3, r2, #0, #16
 8001cd0:	0c00      	lsrs	r0, r0, #16
 8001cd2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001cd6:	b082      	sub	sp, #8
#endif
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	b002      	add	sp, #8
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001ce0:	6842      	ldr	r2, [r0, #4]
 8001ce2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	b282      	uxth	r2, r0
 8001cea:	f362 030f 	bfi	r3, r2, #0, #16
 8001cee:	0c00      	lsrs	r0, r0, #16
 8001cf0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001cf4:	b082      	sub	sp, #8
#endif
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	b002      	add	sp, #8
 8001cfa:	4770      	bx	lr

08001cfc <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001cfc:	6842      	ldr	r2, [r0, #4]
 8001cfe:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001d02:	2300      	movs	r3, #0
 8001d04:	b282      	uxth	r2, r0
 8001d06:	f362 030f 	bfi	r3, r2, #0, #16
 8001d0a:	0c00      	lsrs	r0, r0, #16
 8001d0c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d10:	b082      	sub	sp, #8
#endif
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	b002      	add	sp, #8
 8001d16:	4770      	bx	lr

08001d18 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001d18:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001d1a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001d1e:	4770      	bx	lr

08001d20 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001d20:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001d22:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001d26:	f007 f855 	bl	8008dd4 <STC_GetDefaultIqdref>
 8001d2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001d2e:	8220      	strh	r0, [r4, #16]
 8001d30:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001d32:	bd10      	pop	{r4, pc}

08001d34 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001d34:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001d38:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001d3a:	fb13 f201 	smulbb	r2, r3, r1
{
 8001d3e:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001d42:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001d46:	4250      	negs	r0, r2
 8001d48:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001d4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001d50:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8001d52:	da05      	bge.n	8001d60 <MCM_Clarke+0x2c>
 8001d54:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001d56:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001d5a:	da0c      	bge.n	8001d76 <MCM_Clarke+0x42>
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <MCM_Clarke+0x50>)
 8001d5e:	e001      	b.n	8001d64 <MCM_Clarke+0x30>
 8001d60:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2000      	movs	r0, #0
 8001d68:	f363 000f 	bfi	r0, r3, #0, #16
 8001d6c:	b293      	uxth	r3, r2
 8001d6e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001d72:	b004      	add	sp, #16
 8001d74:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001d76:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MCM_Clarke+0x50>)
 8001d78:	b20a      	sxth	r2, r1
 8001d7a:	4282      	cmp	r2, r0
 8001d7c:	bfb8      	it	lt
 8001d7e:	4602      	movlt	r2, r0
 8001d80:	e7f0      	b.n	8001d64 <MCM_Clarke+0x30>
 8001d82:	bf00      	nop
 8001d84:	ffff8001 	.word	0xffff8001

08001d88 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001d8a:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d8e:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001d92:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d96:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001d98:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001d9a:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f362 000f 	bfi	r0, r2, #0, #16
 8001da4:	0c1b      	lsrs	r3, r3, #16
{
 8001da6:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001da8:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001dac:	b002      	add	sp, #8
 8001dae:	4770      	bx	lr
 8001db0:	40020c00 	.word	0x40020c00

08001db4 <MCM_Park>:
{
 8001db4:	b530      	push	{r4, r5, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	4603      	mov	r3, r0
 8001dba:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	141c      	asrs	r4, r3, #16
{
 8001dc0:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001dc2:	f7ff ffe1 	bl	8001d88 <MCM_Trig_Functions>
 8001dc6:	b22d      	sxth	r5, r5
 8001dc8:	fa0f fc80 	sxth.w	ip, r0
 8001dcc:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001dce:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001dd2:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 8001dd6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001dda:	da05      	bge.n	8001de8 <MCM_Park+0x34>
 8001ddc:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 8001dde:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001de2:	da22      	bge.n	8001e2a <MCM_Park+0x76>
 8001de4:	4914      	ldr	r1, [pc, #80]	; (8001e38 <MCM_Park+0x84>)
 8001de6:	e001      	b.n	8001dec <MCM_Park+0x38>
 8001de8:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001dec:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001df0:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8001df4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001df8:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001dfc:	da04      	bge.n	8001e08 <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8001dfe:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001e02:	da0c      	bge.n	8001e1e <MCM_Park+0x6a>
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MCM_Park+0x84>)
 8001e06:	e001      	b.n	8001e0c <MCM_Park+0x58>
 8001e08:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001e0c:	b28a      	uxth	r2, r1
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f362 000f 	bfi	r0, r2, #0, #16
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001e1a:	b005      	add	sp, #20
 8001e1c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <MCM_Park+0x84>)
 8001e20:	b213      	sxth	r3, r2
 8001e22:	4283      	cmp	r3, r0
 8001e24:	bfb8      	it	lt
 8001e26:	4603      	movlt	r3, r0
 8001e28:	e7f0      	b.n	8001e0c <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001e2a:	4903      	ldr	r1, [pc, #12]	; (8001e38 <MCM_Park+0x84>)
 8001e2c:	b212      	sxth	r2, r2
 8001e2e:	4291      	cmp	r1, r2
 8001e30:	bfb8      	it	lt
 8001e32:	4611      	movlt	r1, r2
 8001e34:	e7da      	b.n	8001dec <MCM_Park+0x38>
 8001e36:	bf00      	nop
 8001e38:	ffff8001 	.word	0xffff8001

08001e3c <MCM_Rev_Park>:
{
 8001e3c:	b530      	push	{r4, r5, lr}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	4604      	mov	r4, r0
 8001e42:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001e44:	4608      	mov	r0, r1
{
 8001e46:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001e48:	f7ff ff9e 	bl	8001d88 <MCM_Trig_Functions>
 8001e4c:	1424      	asrs	r4, r4, #16
 8001e4e:	1402      	asrs	r2, r0, #16
 8001e50:	b22d      	sxth	r5, r5
 8001e52:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001e54:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001e58:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001e5c:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001e60:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001e64:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f363 000f 	bfi	r0, r3, #0, #16
 8001e6e:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001e72:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001e76:	b005      	add	sp, #20
 8001e78:	bd30      	pop	{r4, r5, pc}
 8001e7a:	bf00      	nop

08001e7c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	dd09      	ble.n	8001e94 <MCM_Sqrt+0x18>
 8001e80:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <MCM_Sqrt+0x1c>)
 8001e84:	f240 1269 	movw	r2, #361	; 0x169
 8001e88:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001e8a:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001e8c:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001e8e:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001e90:	b662      	cpsie	i
}
 8001e92:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001e94:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001e96:	4770      	bx	lr
 8001e98:	40020c00 	.word	0x40020c00

08001e9c <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001e9c:	2226      	movs	r2, #38	; 0x26
{
 8001e9e:	b538      	push	{r3, r4, r5, lr}
 8001ea0:	fb00 f202 	mul.w	r2, r0, r2
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	509c      	str	r4, [r3, r2]
{
 8001eaa:	4605      	mov	r5, r0
 8001eac:	f102 0108 	add.w	r1, r2, #8
 8001eb0:	1898      	adds	r0, r3, r2
 8001eb2:	3210      	adds	r2, #16
 8001eb4:	4419      	add	r1, r3
 8001eb6:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001eba:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ebc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ec0:	604c      	str	r4, [r1, #4]
 8001ec2:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001ec4:	f8c3 4006 	str.w	r4, [r3, #6]
 8001ec8:	f8c3 400a 	str.w	r4, [r3, #10]
 8001ecc:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f005 fd91 	bl	80079f8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <FOC_Clear+0x68>)
 8001ed8:	4621      	mov	r1, r4
 8001eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001ede:	f005 fd8b 	bl	80079f8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <FOC_Clear+0x6c>)
 8001ee4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001ee8:	f006 feea 	bl	8008cc0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <FOC_Clear+0x70>)
 8001eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ef6:	f000 bceb 	b.w	80028d0 <PWMC_SwitchOffPWM>
 8001efa:	bf00      	nop
 8001efc:	20000768 	.word	0x20000768
 8001f00:	20000348 	.word	0x20000348
 8001f04:	20000344 	.word	0x20000344
 8001f08:	2000034c 	.word	0x2000034c
 8001f0c:	20000798 	.word	0x20000798

08001f10 <MCboot>:
  if (MC_NULL == pMCIList)
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d05f      	beq.n	8001fd4 <MCboot+0xc4>
{
 8001f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001f18:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800200c <MCboot+0xfc>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001f1c:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8002010 <MCboot+0x100>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001f20:	4d2d      	ldr	r5, [pc, #180]	; (8001fd8 <MCboot+0xc8>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001f22:	4e2e      	ldr	r6, [pc, #184]	; (8001fdc <MCboot+0xcc>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001f24:	4f2e      	ldr	r7, [pc, #184]	; (8001fe0 <MCboot+0xd0>)
{
 8001f26:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 8001f28:	f04f 0800 	mov.w	r8, #0
 8001f2c:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001f2e:	482d      	ldr	r0, [pc, #180]	; (8001fe4 <MCboot+0xd4>)
 8001f30:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001f34:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 8001f38:	f006 f99a 	bl	8008270 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <MCboot+0xd8>)
 8001f3e:	f7fe fb17 	bl	8000570 <ASPEP_start>
    startTimers();
 8001f42:	f005 fe01 	bl	8007b48 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001f46:	4829      	ldr	r0, [pc, #164]	; (8001fec <MCboot+0xdc>)
 8001f48:	f005 fd42 	bl	80079d0 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 8001f4c:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <MCboot+0xe0>)
 8001f4e:	f7fe fe6b 	bl	8000c28 <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001f52:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <MCboot+0xe0>)
 8001f54:	4925      	ldr	r1, [pc, #148]	; (8001fec <MCboot+0xdc>)
 8001f56:	6828      	ldr	r0, [r5, #0]
 8001f58:	f006 fe9a 	bl	8008c90 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001f5c:	4825      	ldr	r0, [pc, #148]	; (8001ff4 <MCboot+0xe4>)
 8001f5e:	f005 fd37 	bl	80079d0 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001f62:	4825      	ldr	r0, [pc, #148]	; (8001ff8 <MCboot+0xe8>)
 8001f64:	f005 fd34 	bl	80079d0 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f006 fdd7 	bl	8008b1c <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <MCboot+0xec>)
    NTC_Init(&TempSensor_M1);
 8001f70:	4823      	ldr	r0, [pc, #140]	; (8002000 <MCboot+0xf0>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001f76:	4e23      	ldr	r6, [pc, #140]	; (8002004 <MCboot+0xf4>)
 8001f78:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001f7a:	f005 fce9 	bl	8007950 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001f7e:	4822      	ldr	r0, [pc, #136]	; (8002008 <MCboot+0xf8>)
 8001f80:	f006 fe32 	bl	8008be8 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001f84:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001f88:	4640      	mov	r0, r8
 8001f8a:	f7ff ff87 	bl	8001e9c <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001f8e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001f90:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001f94:	f006 ff1e 	bl	8008dd4 <STC_GetDefaultIqdref>
 8001f98:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001f9a:	6828      	ldr	r0, [r5, #0]
 8001f9c:	f006 ff1a 	bl	8008dd4 <STC_GetDefaultIqdref>
 8001fa0:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001fa4:	f8db 3000 	ldr.w	r3, [fp]
 8001fa8:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001faa:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001fac:	4632      	mov	r2, r6
 8001fae:	4638      	mov	r0, r7
 8001fb0:	f7ff fd78 	bl	8001aa4 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001fb4:	6828      	ldr	r0, [r5, #0]
 8001fb6:	f006 ff09 	bl	8008dcc <STC_GetMecSpeedRefUnitDefault>
 8001fba:	4642      	mov	r2, r8
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	f7ff fd82 	bl	8001ac8 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001fc4:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8001fc6:	f7ff fd69 	bl	8001a9c <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001fca:	f889 a000 	strb.w	sl, [r9]
}
 8001fce:	b003      	add	sp, #12
 8001fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2000034c 	.word	0x2000034c
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	2000073c 	.word	0x2000073c
 8001fe4:	2000023c 	.word	0x2000023c
 8001fe8:	200003b4 	.word	0x200003b4
 8001fec:	20000200 	.word	0x20000200
 8001ff0:	200000e0 	.word	0x200000e0
 8001ff4:	200001d4 	.word	0x200001d4
 8001ff8:	200001a8 	.word	0x200001a8
 8001ffc:	20000340 	.word	0x20000340
 8002000:	20000318 	.word	0x20000318
 8002004:	20000768 	.word	0x20000768
 8002008:	200002cc 	.word	0x200002cc
 800200c:	2000078e 	.word	0x2000078e
 8002010:	20000798 	.word	0x20000798

08002014 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002018:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800201a:	4c08      	ldr	r4, [pc, #32]	; (800203c <FOC_CalcCurrRef+0x24>)
 800201c:	2326      	movs	r3, #38	; 0x26
 800201e:	fb03 4400 	mla	r4, r3, r0, r4
 8002022:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002026:	b103      	cbz	r3, 800202a <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002028:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);		// get torque reference
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <FOC_CalcCurrRef+0x28>)
 800202c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002030:	f006 fea2 	bl	8008d78 <STC_CalcTorqueReference>
 8002034:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002036:	8220      	strh	r0, [r4, #16]
}
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	20000768 	.word	0x20000768
 8002040:	2000034c 	.word	0x2000034c

08002044 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002044:	4b01      	ldr	r3, [pc, #4]	; (800204c <TSK_SetChargeBootCapDelayM1+0x8>)
 8002046:	8018      	strh	r0, [r3, #0]
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000790 	.word	0x20000790

08002050 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002052:	8818      	ldrh	r0, [r3, #0]
 8002054:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002056:	fab0 f080 	clz	r0, r0
 800205a:	0940      	lsrs	r0, r0, #5
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000790 	.word	0x20000790

08002064 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002064:	4b01      	ldr	r3, [pc, #4]	; (800206c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002066:	8018      	strh	r0, [r3, #0]
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000794 	.word	0x20000794

08002070 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002072:	8818      	ldrh	r0, [r3, #0]
 8002074:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002076:	fab0 f080 	clz	r0, r0
 800207a:	0940      	lsrs	r0, r0, #5
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000794 	.word	0x20000794

08002084 <TSK_MediumFrequencyTaskM1>:
{
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002088:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800208a:	f10d 0106 	add.w	r1, sp, #6
 800208e:	4866      	ldr	r0, [pc, #408]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1a4>)
  int16_t wAux = 0;
 8002090:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002094:	f7fe ff1e 	bl	8000ed4 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002098:	4e64      	ldr	r6, [pc, #400]	; (800222c <TSK_MediumFrequencyTaskM1+0x1a8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800209a:	4c65      	ldr	r4, [pc, #404]	; (8002230 <TSK_MediumFrequencyTaskM1+0x1ac>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800209c:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 800209e:	6830      	ldr	r0, [r6, #0]
 80020a0:	f005 fd22 	bl	8007ae8 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff fd77 	bl	8001b98 <MCI_GetCurrentFaults>
 80020aa:	b118      	cbz	r0, 80020b4 <TSK_MediumFrequencyTaskM1+0x30>
    Mci[M1].State = FAULT_NOW;
 80020ac:	230a      	movs	r3, #10
 80020ae:	7663      	strb	r3, [r4, #25]
}
 80020b0:	b002      	add	sp, #8
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff fd6d 	bl	8001b94 <MCI_GetOccurredFaults>
 80020ba:	bb48      	cbnz	r0, 8002110 <TSK_MediumFrequencyTaskM1+0x8c>
      switch (Mci[M1].State)
 80020bc:	7e63      	ldrb	r3, [r4, #25]
 80020be:	2b11      	cmp	r3, #17
 80020c0:	d8f6      	bhi.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <TSK_MediumFrequencyTaskM1+0x44>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080021c9 	.word	0x080021c9
 80020cc:	080020b1 	.word	0x080020b1
 80020d0:	080020b1 	.word	0x080020b1
 80020d4:	080020b1 	.word	0x080020b1
 80020d8:	080020b1 	.word	0x080020b1
 80020dc:	080020b1 	.word	0x080020b1
 80020e0:	080021a5 	.word	0x080021a5
 80020e4:	080020b1 	.word	0x080020b1
 80020e8:	0800219b 	.word	0x0800219b
 80020ec:	080020b1 	.word	0x080020b1
 80020f0:	08002111 	.word	0x08002111
 80020f4:	0800218f 	.word	0x0800218f
 80020f8:	080020b1 	.word	0x080020b1
 80020fc:	080020b1 	.word	0x080020b1
 8002100:	080020b1 	.word	0x080020b1
 8002104:	080020b1 	.word	0x080020b1
 8002108:	08002147 	.word	0x08002147
 800210c:	08002119 	.word	0x08002119
      Mci[M1].State = FAULT_OVER;
 8002110:	230b      	movs	r3, #11
 8002112:	7663      	strb	r3, [r4, #25]
}
 8002114:	b002      	add	sp, #8
 8002116:	bd70      	pop	{r4, r5, r6, pc}
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002118:	7e23      	ldrb	r3, [r4, #24]
 800211a:	2b05      	cmp	r3, #5
 800211c:	d064      	beq.n	80021e8 <TSK_MediumFrequencyTaskM1+0x164>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800211e:	4d45      	ldr	r5, [pc, #276]	; (8002234 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8002120:	2101      	movs	r1, #1
 8002122:	6828      	ldr	r0, [r5, #0]
 8002124:	f000 fbd8 	bl	80028d8 <PWMC_CurrentReadingCalibr>
 8002128:	2800      	cmp	r0, #0
 800212a:	d0c1      	beq.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800212c:	7e23      	ldrb	r3, [r4, #24]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d071      	beq.n	8002216 <TSK_MediumFrequencyTaskM1+0x192>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002132:	6828      	ldr	r0, [r5, #0]
 8002134:	2100      	movs	r1, #0
 8002136:	f005 feeb 	bl	8007f10 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 800213a:	2014      	movs	r0, #20
 800213c:	f7ff ff82 	bl	8002044 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8002140:	2310      	movs	r3, #16
 8002142:	7663      	strb	r3, [r4, #25]
 8002144:	e7b4      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002146:	7e23      	ldrb	r3, [r4, #24]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d04d      	beq.n	80021e8 <TSK_MediumFrequencyTaskM1+0x164>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800214c:	f7ff ff80 	bl	8002050 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002150:	2800      	cmp	r0, #0
 8002152:	d0ad      	beq.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002154:	4d37      	ldr	r5, [pc, #220]	; (8002234 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8002156:	6828      	ldr	r0, [r5, #0]
 8002158:	f005 ff4e 	bl	8007ff8 <R3_2_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1a4>)
 800215e:	f7fe fdef 	bl	8000d40 <HALL_Clear>
              FOC_Clear( M1 );
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff fe9a 	bl	8001e9c <FOC_Clear>
              FOC_InitAdditionalMethods(M1);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff ff53 	bl	8002014 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff ff52 	bl	8002018 <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <TSK_MediumFrequencyTaskM1+0x1b4>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f006 fe3a 	bl	8008df0 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800217c:	482c      	ldr	r0, [pc, #176]	; (8002230 <TSK_MediumFrequencyTaskM1+0x1ac>)
 800217e:	f7ff fccd 	bl	8001b1c <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8002182:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002184:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 8002186:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002188:	f000 fba4 	bl	80028d4 <PWMC_SwitchOnPWM>
 800218c:	e790      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800218e:	7e23      	ldrb	r3, [r4, #24]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d18d      	bne.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002194:	2300      	movs	r3, #0
 8002196:	8323      	strh	r3, [r4, #24]
 8002198:	e78a      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800219a:	f7ff ff69 	bl	8002070 <TSK_StopPermanencyTimeHasElapsedM1>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d086      	beq.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
 80021a2:	e7f7      	b.n	8002194 <TSK_MediumFrequencyTaskM1+0x110>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80021a4:	7e23      	ldrb	r3, [r4, #24]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d01e      	beq.n	80021e8 <TSK_MediumFrequencyTaskM1+0x164>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80021aa:	4821      	ldr	r0, [pc, #132]	; (8002230 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80021ac:	f7ff fcb6 	bl	8001b1c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff ff31 	bl	8002018 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80021b6:	2d00      	cmp	r5, #0
 80021b8:	f47f af7a 	bne.w	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80021bc:	481c      	ldr	r0, [pc, #112]	; (8002230 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80021be:	462a      	mov	r2, r5
 80021c0:	2120      	movs	r1, #32
 80021c2:	f7ff fc9f 	bl	8001b04 <MCI_FaultProcessing>
 80021c6:	e773      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80021c8:	7e23      	ldrb	r3, [r4, #24]
 80021ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	f47f af6e 	bne.w	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80021d4:	4d17      	ldr	r5, [pc, #92]	; (8002234 <TSK_MediumFrequencyTaskM1+0x1b0>)
 80021d6:	6828      	ldr	r0, [r5, #0]
 80021d8:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 80021dc:	b9a9      	cbnz	r1, 800220a <TSK_MediumFrequencyTaskM1+0x186>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80021de:	f000 fb7b 	bl	80028d8 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 80021e2:	2311      	movs	r3, #17
 80021e4:	7663      	strb	r3, [r4, #25]
 80021e6:	e763      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <TSK_MediumFrequencyTaskM1+0x1b0>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	f005 ff04 	bl	8007ff8 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff fe53 	bl	8001e9c <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80021f6:	6830      	ldr	r0, [r6, #0]
 80021f8:	f005 fc90 	bl	8007b1c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80021fc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002200:	f7ff ff30 	bl	8002064 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002204:	2308      	movs	r3, #8
 8002206:	7663      	strb	r3, [r4, #25]
  return;
 8002208:	e752      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);					//
 800220a:	4619      	mov	r1, r3
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 800220c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);					//
 8002210:	f000 fb62 	bl	80028d8 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);	// turn on low side MOS
 8002214:	e78d      	b.n	8002132 <TSK_MediumFrequencyTaskM1+0xae>
                  FOC_Clear(M1);
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff fe40 	bl	8001e9c <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 800221c:	6830      	ldr	r0, [r6, #0]
 800221e:	f005 fc7d 	bl	8007b1c <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002222:	2300      	movs	r3, #0
 8002224:	8323      	strh	r3, [r4, #24]
 8002226:	e743      	b.n	80020b0 <TSK_MediumFrequencyTaskM1+0x2c>
 8002228:	200000e0 	.word	0x200000e0
 800222c:	20000340 	.word	0x20000340
 8002230:	2000073c 	.word	0x2000073c
 8002234:	20000798 	.word	0x20000798
 8002238:	2000034c 	.word	0x2000034c

0800223c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MC_Scheduler+0x78>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d000      	beq.n	8002246 <MC_Scheduler+0xa>
 8002244:	4770      	bx	lr
{
 8002246:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002248:	4c1b      	ldr	r4, [pc, #108]	; (80022b8 <MC_Scheduler+0x7c>)
 800224a:	8823      	ldrh	r3, [r4, #0]
 800224c:	b193      	cbz	r3, 8002274 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 800224e:	3b01      	subs	r3, #1
 8002250:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <MC_Scheduler+0x80>)
 8002254:	8813      	ldrh	r3, [r2, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	b11b      	cbz	r3, 8002262 <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 800225a:	8813      	ldrh	r3, [r2, #0]
 800225c:	3b01      	subs	r3, #1
 800225e:	b29b      	uxth	r3, r3
 8002260:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <MC_Scheduler+0x84>)
 8002264:	8813      	ldrh	r3, [r2, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	b11b      	cbz	r3, 8002272 <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 800226a:	8813      	ldrh	r3, [r2, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]
}
 8002272:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002274:	4d13      	ldr	r5, [pc, #76]	; (80022c4 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8002276:	f7ff ff05 	bl	8002084 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800227a:	f7ff fc11 	bl	8001aa0 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800227e:	4629      	mov	r1, r5
 8002280:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002284:	6883      	ldr	r3, [r0, #8]
 8002286:	4798      	blx	r3
 8002288:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800228a:	b130      	cbz	r0, 800229a <MC_Scheduler+0x5e>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 800228c:	4629      	mov	r1, r5
 800228e:	220a      	movs	r2, #10
 8002290:	f851 0b08 	ldr.w	r0, [r1], #8
 8002294:	6803      	ldr	r3, [r0, #0]
 8002296:	4798      	blx	r3
 8002298:	b910      	cbnz	r0, 80022a0 <MC_Scheduler+0x64>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 800229a:	2301      	movs	r3, #1
 800229c:	8023      	strh	r3, [r4, #0]
 800229e:	e7d8      	b.n	8002252 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80022a0:	4628      	mov	r0, r5
 80022a2:	f005 f917 	bl	80074d4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80022a6:	6828      	ldr	r0, [r5, #0]
 80022a8:	89ea      	ldrh	r2, [r5, #14]
 80022aa:	6846      	ldr	r6, [r0, #4]
 80022ac:	68a9      	ldr	r1, [r5, #8]
 80022ae:	230a      	movs	r3, #10
 80022b0:	47b0      	blx	r6
 80022b2:	e7f2      	b.n	800229a <MC_Scheduler+0x5e>
 80022b4:	2000078e 	.word	0x2000078e
 80022b8:	20000792 	.word	0x20000792
 80022bc:	20000790 	.word	0x20000790
 80022c0:	20000794 	.word	0x20000794
 80022c4:	20000390 	.word	0x20000390

080022c8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80022c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)HALL_CalcElAngle(&HALL_M1);
 80022cc:	4837      	ldr	r0, [pc, #220]	; (80023ac <TSK_HighFrequencyTask+0xe4>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022ce:	4f38      	ldr	r7, [pc, #224]	; (80023b0 <TSK_HighFrequencyTask+0xe8>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80022d0:	4c38      	ldr	r4, [pc, #224]	; (80023b4 <TSK_HighFrequencyTask+0xec>)
{
 80022d2:	b086      	sub	sp, #24
  (void)HALL_CalcElAngle(&HALL_M1);
 80022d4:	f7fe fde0 	bl	8000e98 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80022d8:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <TSK_HighFrequencyTask+0xf0>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	f006 fcee 	bl	8008cbc <STC_GetSpeedSensor>
 80022e0:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80022e2:	f006 fc89 	bl	8008bf8 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022e6:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80022e8:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f000 f9a6 	bl	800263c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 80022f0:	f001 fc4c 	bl	8003b8c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80022f4:	f001 fbfa 	bl	8003aec <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80022f8:	9803      	ldr	r0, [sp, #12]
 80022fa:	f7ff fd1b 	bl	8001d34 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80022fe:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002300:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002302:	f7ff fd57 	bl	8001db4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002306:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800230a:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800230c:	b203      	sxth	r3, r0
 800230e:	1ac9      	subs	r1, r1, r3
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <TSK_HighFrequencyTask+0xf4>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f005 fba2 	bl	8007a5c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002318:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800231c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8002320:	1ac9      	subs	r1, r1, r3
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <TSK_HighFrequencyTask+0xf8>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002324:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f005 fb98 	bl	8007a5c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800232c:	f8ad 8008 	strh.w	r8, [sp, #8]
 8002330:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002334:	9902      	ldr	r1, [sp, #8]
 8002336:	4823      	ldr	r0, [pc, #140]	; (80023c4 <TSK_HighFrequencyTask+0xfc>)
 8002338:	f005 f89c 	bl	8007474 <Circle_Limitation>
 800233c:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800233e:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002340:	fa0f f883 	sxth.w	r8, r3
 8002344:	141d      	asrs	r5, r3, #16
 8002346:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002348:	f006 fc5e 	bl	8008c08 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800234c:	4631      	mov	r1, r6
 800234e:	9802      	ldr	r0, [sp, #8]
 8002350:	f7ff fd74 	bl	8001e3c <MCM_Rev_Park>
 8002354:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002356:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002358:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800235a:	f000 f971 	bl	8002640 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800235e:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002360:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8002362:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002364:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8002366:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002368:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 800236a:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 800236e:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8002370:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002372:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002374:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002376:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 800237a:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 800237c:	d011      	beq.n	80023a2 <TSK_HighFrequencyTask+0xda>
  GLOBAL_TIMESTAMP++;
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <TSK_HighFrequencyTask+0x100>)
  if (0U == MCPA_UART_A.Mark)
 8002380:	4812      	ldr	r0, [pc, #72]	; (80023cc <TSK_HighFrequencyTask+0x104>)
  GLOBAL_TIMESTAMP++;
 8002382:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002384:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8002388:	3301      	adds	r3, #1
 800238a:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800238c:	b919      	cbnz	r1, 8002396 <TSK_HighFrequencyTask+0xce>
}
 800238e:	2000      	movs	r0, #0
 8002390:	b006      	add	sp, #24
 8002392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002396:	f005 f961 	bl	800765c <MCPA_dataLog>
}
 800239a:	2000      	movs	r0, #0
 800239c:	b006      	add	sp, #24
 800239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80023a2:	480b      	ldr	r0, [pc, #44]	; (80023d0 <TSK_HighFrequencyTask+0x108>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	f7ff fbad 	bl	8001b04 <MCI_FaultProcessing>
 80023aa:	e7e8      	b.n	800237e <TSK_HighFrequencyTask+0xb6>
 80023ac:	200000e0 	.word	0x200000e0
 80023b0:	20000798 	.word	0x20000798
 80023b4:	20000768 	.word	0x20000768
 80023b8:	2000034c 	.word	0x2000034c
 80023bc:	20000348 	.word	0x20000348
 80023c0:	20000344 	.word	0x20000344
 80023c4:	2000002c 	.word	0x2000002c
 80023c8:	20001988 	.word	0x20001988
 80023cc:	20000364 	.word	0x20000364
 80023d0:	2000073c 	.word	0x2000073c

080023d4 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80023d4:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80023d8:	4e1f      	ldr	r6, [pc, #124]	; (8002458 <TSK_SafetyTask_PWMOFF+0x84>)
{
 80023da:	b082      	sub	sp, #8
 80023dc:	4605      	mov	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80023de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80023e2:	f005 fac7 	bl	8007974 <NTC_CalcAvTemp>
 80023e6:	4604      	mov	r4, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80023e8:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80023ec:	f000 fa98 	bl	8002920 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80023f0:	f024 040c 	bic.w	r4, r4, #12
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80023f4:	4304      	orrs	r4, r0
 80023f6:	b2a4      	uxth	r4, r4
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 80023f8:	b175      	cbz	r5, 8002418 <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 80023fa:	4818      	ldr	r0, [pc, #96]	; (800245c <TSK_SafetyTask_PWMOFF+0x88>)
 80023fc:	43e2      	mvns	r2, r4
 80023fe:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8002402:	b292      	uxth	r2, r2
 8002404:	4621      	mov	r1, r4
 8002406:	9001      	str	r0, [sp, #4]
 8002408:	f7ff fb7c 	bl	8001b04 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 800240c:	9801      	ldr	r0, [sp, #4]
 800240e:	f7ff fc0d 	bl	8001c2c <MCI_GetFaultState>
 8002412:	b948      	cbnz	r0, 8002428 <TSK_SafetyTask_PWMOFF+0x54>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002414:	b002      	add	sp, #8
 8002416:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002418:	4811      	ldr	r0, [pc, #68]	; (8002460 <TSK_SafetyTask_PWMOFF+0x8c>)
 800241a:	f006 fbb1 	bl	8008b80 <RVBS_CalcAvVbus>
 800241e:	f020 000c 	bic.w	r0, r0, #12
 8002422:	4304      	orrs	r4, r0
 8002424:	b2a4      	uxth	r4, r4
 8002426:	e7e8      	b.n	80023fa <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002428:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 800242c:	f000 fa50 	bl	80028d0 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <TSK_SafetyTask_PWMOFF+0x90>)
 8002432:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002436:	b953      	cbnz	r3, 800244e <TSK_SafetyTask_PWMOFF+0x7a>
    FOC_Clear(bMotor);
 8002438:	4628      	mov	r0, r5
 800243a:	f7ff fd2f 	bl	8001e9c <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <TSK_SafetyTask_PWMOFF+0x94>)
 8002440:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
}
 8002444:	b002      	add	sp, #8
 8002446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800244a:	f005 bb67 	b.w	8007b1c <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 800244e:	f005 f9c9 	bl	80077e4 <MCPA_flushDataLog>
 8002452:	e7f1      	b.n	8002438 <TSK_SafetyTask_PWMOFF+0x64>
 8002454:	20000350 	.word	0x20000350
 8002458:	20000798 	.word	0x20000798
 800245c:	2000073c 	.word	0x2000073c
 8002460:	20000000 	.word	0x20000000
 8002464:	20000364 	.word	0x20000364
 8002468:	20000340 	.word	0x20000340

0800246c <TSK_SafetyTask>:
{
 800246c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <TSK_SafetyTask+0x1c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d000      	beq.n	8002478 <TSK_SafetyTask+0xc>
}
 8002476:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff ffab 	bl	80023d4 <TSK_SafetyTask_PWMOFF>
}
 800247e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002482:	f001 bb03 	b.w	8003a8c <RCM_ExecUserConv>
 8002486:	bf00      	nop
 8002488:	2000078e 	.word	0x2000078e

0800248c <MC_RunMotorControlTasks>:
{
 800248c:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <MC_RunMotorControlTasks+0x14>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b903      	cbnz	r3, 8002496 <MC_RunMotorControlTasks+0xa>
}
 8002494:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002496:	f7ff fed1 	bl	800223c <MC_Scheduler>
    TSK_SafetyTask();
 800249a:	f7ff ffe7 	bl	800246c <TSK_SafetyTask>
}
 800249e:	bd08      	pop	{r3, pc}
 80024a0:	2000078e 	.word	0x2000078e

080024a4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80024a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <TSK_HardwareFaultTask+0x18>)
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	f005 fda5 	bl	8007ff8 <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80024ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <TSK_HardwareFaultTask+0x1c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	f7ff bb24 	b.w	8001b04 <MCI_FaultProcessing>
 80024bc:	20000798 	.word	0x20000798
 80024c0:	2000073c 	.word	0x2000073c

080024c4 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80024c4:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80024c6:	f7ff fae1 	bl	8001a8c <MC_GetSTMStateMotor1>
 80024ca:	b918      	cbnz	r0, 80024d4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80024cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80024d0:	f7ff bac4 	b.w	8001a5c <MC_StartMotor1>
}
 80024d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80024d8:	f7ff bac6 	b.w	8001a68 <MC_StopMotor1>

080024dc <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80024dc:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024e2:	4841      	ldr	r0, [pc, #260]	; (80025e8 <mc_lock_pins+0x10c>)
 80024e4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024e6:	2580      	movs	r5, #128	; 0x80
 80024e8:	b08e      	sub	sp, #56	; 0x38
 80024ea:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ec:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024f2:	4a3e      	ldr	r2, [pc, #248]	; (80025ec <mc_lock_pins+0x110>)
  (void) temp;
 80024f4:	990d      	ldr	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024f6:	493e      	ldr	r1, [pc, #248]	; (80025f0 <mc_lock_pins+0x114>)
 80024f8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024fa:	f44f 7480 	mov.w	r4, #256	; 0x100
 80024fe:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002500:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002502:	69d6      	ldr	r6, [r2, #28]
 8002504:	960c      	str	r6, [sp, #48]	; 0x30
  (void) temp;
 8002506:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002508:	4e3a      	ldr	r6, [pc, #232]	; (80025f4 <mc_lock_pins+0x118>)
 800250a:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800250c:	2740      	movs	r7, #64	; 0x40
 800250e:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002510:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002512:	69d6      	ldr	r6, [r2, #28]
 8002514:	960b      	str	r6, [sp, #44]	; 0x2c
  (void) temp;
 8002516:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002518:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800251a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800251c:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800251e:	69d2      	ldr	r2, [r2, #28]
 8002520:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8002522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002524:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002526:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002528:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800252e:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002532:	f44f 7000 	mov.w	r0, #512	; 0x200
  (void) temp;
 8002536:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002538:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800253a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800253c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800253e:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002540:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <mc_lock_pins+0x11c>)
  temp = READ_REG(GPIOx->LCKR);
 8002542:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002544:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002548:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 800254c:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002550:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002552:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002554:	69d1      	ldr	r1, [r2, #28]
 8002556:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002558:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800255c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8002560:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002562:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002564:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002566:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002568:	69d9      	ldr	r1, [r3, #28]
 800256a:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800256c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002570:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 8002574:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002576:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002578:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800257a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800257c:	69d1      	ldr	r1, [r2, #28]
 800257e:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002580:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002584:	f44f 3190 	mov.w	r1, #73728	; 0x12000
  (void) temp;
 8002588:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800258a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800258c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800258e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002590:	69d1      	ldr	r1, [r2, #28]
 8002592:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002594:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002598:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 800259c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800259e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025a0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025a2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025a4:	69d0      	ldr	r0, [r2, #28]
 80025a6:	9003      	str	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025a8:	4914      	ldr	r1, [pc, #80]	; (80025fc <mc_lock_pins+0x120>)
  (void) temp;
 80025aa:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025ac:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025ae:	2002      	movs	r0, #2
 80025b0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025b2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025b4:	69d9      	ldr	r1, [r3, #28]
 80025b6:	9102      	str	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025b8:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80025be:	9c02      	ldr	r4, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025c0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025c2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025c4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	9301      	str	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025ce:	f44f 3384 	mov.w	r3, #67584	; 0x10800
  (void) temp;
 80025d2:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025d4:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025d6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025d8:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025da:	69d3      	ldr	r3, [r2, #28]
 80025dc:	9300      	str	r3, [sp, #0]
  (void) temp;
 80025de:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_PWM_EN_W_GPIO_Port, M1_PWM_EN_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 80025e0:	b00e      	add	sp, #56	; 0x38
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	00010080 	.word	0x00010080
 80025ec:	48000800 	.word	0x48000800
 80025f0:	00010100 	.word	0x00010100
 80025f4:	00010040 	.word	0x00010040
 80025f8:	48000400 	.word	0x48000400
 80025fc:	00010002 	.word	0x00010002

08002600 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002600:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);		// 2KHz
 8002602:	f003 fbe3 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <MX_MotorControl_Init+0x30>)
 8002608:	fba3 3000 	umull	r3, r0, r3, r0
 800260c:	09c0      	lsrs	r0, r0, #7
 800260e:	f002 fe0d 	bl	800522c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_MotorControl_Init+0x34>)
 8002614:	2200      	movs	r2, #0
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f002 fdba 	bl	8005194 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_MotorControl_Init+0x38>)
 8002622:	f7ff fc75 	bl	8001f10 <MCboot>
  mc_lock_pins();
}
 8002626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800262a:	f7ff bf57 	b.w	80024dc <mc_lock_pins>
 800262e:	bf00      	nop
 8002630:	10624dd3 	.word	0x10624dd3
 8002634:	20000434 	.word	0x20000434
 8002638:	20001928 	.word	0x20001928

0800263c <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	4718      	bx	r3

08002640 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002640:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002642:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002646:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8002648:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800264a:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 800264e:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002650:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002654:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002656:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800265a:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800265e:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002662:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002666:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 800266a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002672:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002676:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800267a:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 800267e:	f2c0 8086 	blt.w	800278e <PWMC_SetPhaseVoltage+0x14e>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002682:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002686:	db57      	blt.n	8002738 <PWMC_SetPhaseVoltage+0xf8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002688:	ebbe 0e02 	subs.w	lr, lr, r2
 800268c:	bf44      	itt	mi
 800268e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002692:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002696:	2900      	cmp	r1, #0
 8002698:	bfbc      	itt	lt
 800269a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800269e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bfb8      	it	lt
 80026a6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80026aa:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80026ae:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80026b2:	bfb8      	it	lt
 80026b4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80026b8:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80026bc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80026c0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 80026c4:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
 80026c8:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80026cc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 80026d0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80026d4:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 80026d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80026dc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80026e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80026e4:	b292      	uxth	r2, r2
 80026e6:	b289      	uxth	r1, r1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80026ec:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80026ee:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80026f2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 80026f6:	d11a      	bne.n	800272e <PWMC_SetPhaseVoltage+0xee>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80026f8:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 80026fc:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80026fe:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8002702:	bfcc      	ite	gt
 8002704:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002706:	1b12      	suble	r2, r2, r4
 8002708:	b292      	uxth	r2, r2
 800270a:	87c2      	strh	r2, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 800270c:	f9b0 2052 	ldrsh.w	r2, [r0, #82]	; 0x52
 8002710:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002712:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002716:	bfcc      	ite	gt
 8002718:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800271a:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 800271c:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800271e:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002720:	bfcc      	ite	gt
 8002722:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002724:	1b1b      	suble	r3, r3, r4
 8002726:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800272a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800272e:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002730:	b002      	add	sp, #8
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002736:	4718      	bx	r3
        if ( wX <= 0 )
 8002738:	f1bc 0f00 	cmp.w	ip, #0
 800273c:	dd4f      	ble.n	80027de <PWMC_SetPhaseVoltage+0x19e>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800273e:	ebbc 0e02 	subs.w	lr, ip, r2
 8002742:	bf44      	itt	mi
 8002744:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002748:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800274c:	2900      	cmp	r1, #0
 800274e:	bfb8      	it	lt
 8002750:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002754:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002758:	bfb8      	it	lt
 800275a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 800275e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002762:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002764:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002768:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800276c:	bfb8      	it	lt
 800276e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002772:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002776:	bfb8      	it	lt
 8002778:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800277c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002780:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002784:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002788:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 800278c:	e7a2      	b.n	80026d4 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 800278e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002792:	db75      	blt.n	8002880 <PWMC_SetPhaseVoltage+0x240>
        if (wX <= 0)
 8002794:	f1bc 0f00 	cmp.w	ip, #0
 8002798:	dd4a      	ble.n	8002830 <PWMC_SetPhaseVoltage+0x1f0>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800279a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800279e:	bf48      	it	mi
 80027a0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80027a4:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80027a8:	bf48      	it	mi
 80027aa:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80027b6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80027ba:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80027be:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80027c2:	bfb8      	it	lt
 80027c4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80027c8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80027cc:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80027d0:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 80027d4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80027d8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80027dc:	e77a      	b.n	80026d4 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80027de:	ebbe 0e0c 	subs.w	lr, lr, ip
 80027e2:	bf44      	itt	mi
 80027e4:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80027e8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bfb8      	it	lt
 80027f0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 80027f4:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80027f8:	bfb8      	it	lt
 80027fa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 80027fe:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 8002802:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002806:	ea4f 0294 	mov.w	r2, r4, lsr #2
 800280a:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800280e:	bfb8      	it	lt
 8002810:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002814:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002818:	bfb8      	it	lt
 800281a:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800281e:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002822:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002826:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 800282a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 800282e:	e751      	b.n	80026d4 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002830:	ebbc 0e02 	subs.w	lr, ip, r2
 8002834:	bf44      	itt	mi
 8002836:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800283a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800283e:	2900      	cmp	r1, #0
 8002840:	bfb8      	it	lt
 8002842:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002846:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 800284a:	bfb8      	it	lt
 800284c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 8002850:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002854:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002856:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800285a:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800285e:	bfb8      	it	lt
 8002860:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002864:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002868:	bfb8      	it	lt
 800286a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800286e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002872:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002876:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 800287a:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 800287e:	e729      	b.n	80026d4 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002880:	ebbe 0e02 	subs.w	lr, lr, r2
 8002884:	bf44      	itt	mi
 8002886:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800288a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800288e:	2900      	cmp	r1, #0
 8002890:	bfbc      	itt	lt
 8002892:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002896:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 800289a:	2b00      	cmp	r3, #0
 800289c:	bfb8      	it	lt
 800289e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80028a2:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80028a6:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80028aa:	bfb8      	it	lt
 80028ac:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80028b0:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 80028b4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80028b8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 80028bc:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80028c0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 80028c4:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 80028c8:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 80028cc:	e702      	b.n	80026d4 <PWMC_SetPhaseVoltage+0x94>
 80028ce:	bf00      	nop

080028d0 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80028d0:	6843      	ldr	r3, [r0, #4]
 80028d2:	4718      	bx	r3

080028d4 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80028d4:	6883      	ldr	r3, [r0, #8]
 80028d6:	4718      	bx	r3

080028d8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80028d8:	b510      	push	{r4, lr}
 80028da:	4604      	mov	r4, r0
 80028dc:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80028de:	b199      	cbz	r1, 8002908 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80028e0:	2901      	cmp	r1, #1
 80028e2:	d002      	beq.n	80028ea <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80028e4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80028e6:	b002      	add	sp, #8
 80028e8:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80028ea:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 80028ee:	b19b      	cbz	r3, 8002918 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	9101      	str	r1, [sp, #4]
 80028f6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f2      	bne.n	80028e4 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80028fe:	68c3      	ldr	r3, [r0, #12]
 8002900:	4798      	blx	r3
          retVal = true;
 8002902:	9901      	ldr	r1, [sp, #4]
 8002904:	4608      	mov	r0, r1
 8002906:	e7ee      	b.n	80028e6 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002908:	f7ff ffe2 	bl	80028d0 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800290c:	4620      	mov	r0, r4
 800290e:	68e3      	ldr	r3, [r4, #12]
 8002910:	4798      	blx	r3
      retVal = true;
 8002912:	2001      	movs	r0, #1
}
 8002914:	b002      	add	sp, #8
 8002916:	bd10      	pop	{r4, pc}
        retVal = true;
 8002918:	4608      	mov	r0, r1
}
 800291a:	b002      	add	sp, #8
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop

08002920 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002920:	6983      	ldr	r3, [r0, #24]
 8002922:	4718      	bx	r3

08002924 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002928:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 800292c:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 800292e:	429a      	cmp	r2, r3
    uint8_t * txData = pHandle->txBuffer;
 8002930:	e9d0 c501 	ldrd	ip, r5, [r0, #4]
{
 8002934:	b085      	sub	sp, #20
 8002936:	4607      	mov	r7, r0
    pHandle->txLength = 0;
 8002938:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 800293a:	dd65      	ble.n	8002a08 <RI_SetRegCommandParser+0xe4>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800293c:	f8df a370 	ldr.w	sl, [pc, #880]	; 8002cb0 <RI_SetRegCommandParser+0x38c>
  uint8_t retVal = MCP_CMD_OK;
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	eb05 0901 	add.w	r9, r5, r1
 8002946:	f1c5 0b01 	rsb	fp, r5, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800294a:	4664      	mov	r4, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800294c:	b296      	uxth	r6, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800294e:	f834 0b02 	ldrh.w	r0, [r4], #2
    switch (typeID)
 8002952:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002956:	1eb2      	subs	r2, r6, #2
    uint16_t regID = dataID & REG_MASK;
 8002958:	f020 0307 	bic.w	r3, r0, #7
    switch (typeID)
 800295c:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800295e:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 8002962:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002964:	b212      	sxth	r2, r2
    switch (typeID)
 8002966:	2920      	cmp	r1, #32
 8002968:	d812      	bhi.n	8002990 <RI_SetRegCommandParser+0x6c>
 800296a:	e8df f001 	tbb	[pc, r1]
 800296e:	11b1      	.short	0x11b1
 8002970:	11111111 	.word	0x11111111
 8002974:	11861111 	.word	0x11861111
 8002978:	11111111 	.word	0x11111111
 800297c:	11bd1111 	.word	0x11bd1111
 8002980:	11111111 	.word	0x11111111
 8002984:	11651111 	.word	0x11651111
 8002988:	11111111 	.word	0x11111111
 800298c:	1111      	.short	0x1111
 800298e:	27          	.byte	0x27
 800298f:	00          	.byte	0x00
 8002990:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8002992:	eb05 030b 	add.w	r3, r5, fp
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d031      	beq.n	8002a00 <RI_SetRegCommandParser+0xdc>
        if (txSyncFreeSpace !=0 )
 800299c:	454d      	cmp	r5, r9
 800299e:	f000 80b2 	beq.w	8002b06 <RI_SetRegCommandParser+0x1e2>
          *txData = accessResult;
 80029a2:	f805 0b01 	strb.w	r0, [r5], #1
          pHandle->txLength++;
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	3301      	adds	r3, #1
 80029aa:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80029ac:	2800      	cmp	r0, #0
 80029ae:	f040 80ae 	bne.w	8002b0e <RI_SetRegCommandParser+0x1ea>
    while (rxLength > 0)
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	f340 8288 	ble.w	8002ec8 <RI_SetRegCommandParser+0x5a4>
 80029b8:	46a4      	mov	ip, r4
 80029ba:	e7c6      	b.n	800294a <RI_SetRegCommandParser+0x26>
        *size = rawSize + 2U;
 80029bc:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 80029c0:	3602      	adds	r6, #2
 80029c2:	b2b6      	uxth	r6, r6
        if (*size > dataAvailable )
 80029c4:	4296      	cmp	r6, r2
 80029c6:	f300 81a6 	bgt.w	8002d16 <RI_SetRegCommandParser+0x3f2>
          switch (regID)
 80029ca:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80029ce:	f000 81db 	beq.w	8002d88 <RI_SetRegCommandParser+0x464>
 80029d2:	d91e      	bls.n	8002a12 <RI_SetRegCommandParser+0xee>
 80029d4:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80029d8:	f000 81e3 	beq.w	8002da2 <RI_SetRegCommandParser+0x47e>
 80029dc:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 80029e0:	f040 8181 	bne.w	8002ce6 <RI_SetRegCommandParser+0x3c2>
              break;
            }

            case MC_REG_ASYNC_UARTA:
            {
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80029e4:	48ae      	ldr	r0, [pc, #696]	; (8002ca0 <RI_SetRegCommandParser+0x37c>)
 80029e6:	f10c 0104 	add.w	r1, ip, #4
 80029ea:	f004 ff29 	bl	8007840 <MCPA_cfgLog>
        if ((1U == number_of_item) && (0 == rxLength))
 80029ee:	eb05 030b 	add.w	r3, r5, fp
 80029f2:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 80029f4:	eba8 0206 	sub.w	r2, r8, r6
        if ((1U == number_of_item) && (0 == rxLength))
 80029f8:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 80029fa:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 80029fc:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80029fe:	d1cd      	bne.n	800299c <RI_SetRegCommandParser+0x78>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d1cb      	bne.n	800299c <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d17f      	bne.n	8002b08 <RI_SetRegCommandParser+0x1e4>
      pHandle->txLength = 0;
 8002a08:	2000      	movs	r0, #0
 8002a0a:	81f8      	strh	r0, [r7, #14]
}
 8002a0c:	b005      	add	sp, #20
 8002a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a12:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002a16:	f000 81a4 	beq.w	8002d62 <RI_SetRegCommandParser+0x43e>
 8002a1a:	f200 8164 	bhi.w	8002ce6 <RI_SetRegCommandParser+0x3c2>
 8002a1e:	2ba8      	cmp	r3, #168	; 0xa8
 8002a20:	d004      	beq.n	8002a2c <RI_SetRegCommandParser+0x108>
 8002a22:	f240 815b 	bls.w	8002cdc <RI_SetRegCommandParser+0x3b8>
 8002a26:	2be8      	cmp	r3, #232	; 0xe8
 8002a28:	f040 815d 	bne.w	8002ce6 <RI_SetRegCommandParser+0x3c2>
      rxLength = (int16_t) (rxLength - size);
 8002a2c:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002a30:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002a32:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8002a34:	2004      	movs	r0, #4
 8002a36:	e7ac      	b.n	8002992 <RI_SetRegCommandParser+0x6e>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002a38:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 81d8 	beq.w	8002df2 <RI_SetRegCommandParser+0x4ce>
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	f340 8161 	ble.w	8002d0a <RI_SetRegCommandParser+0x3e6>
 8002a48:	f10c 0003 	add.w	r0, ip, #3
 8002a4c:	ea6f 0c0c 	mvn.w	ip, ip
 8002a50:	e002      	b.n	8002a58 <RI_SetRegCommandParser+0x134>
 8002a52:	429a      	cmp	r2, r3
 8002a54:	f340 8153 	ble.w	8002cfe <RI_SetRegCommandParser+0x3da>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8002a58:	eb0c 0300 	add.w	r3, ip, r0
 8002a5c:	4606      	mov	r6, r0
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002a5e:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d1f4      	bne.n	8002a52 <RI_SetRegCommandParser+0x12e>
      rxData = rxData+size;
 8002a68:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 8002a6a:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 8002a6e:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 8002a70:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	7033      	strb	r3, [r6, #0]
        retVal = MCP_ERROR_RO_REG;
 8002a76:	2004      	movs	r0, #4
 8002a78:	e78b      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002a7a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002a7e:	f8bc 1002 	ldrh.w	r1, [ip, #2]
        switch (regID)
 8002a82:	f000 8211 	beq.w	8002ea8 <RI_SetRegCommandParser+0x584>
 8002a86:	f200 808e 	bhi.w	8002ba6 <RI_SetRegCommandParser+0x282>
 8002a8a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002a8e:	f000 8216 	beq.w	8002ebe <RI_SetRegCommandParser+0x59a>
 8002a92:	d95b      	bls.n	8002b4c <RI_SetRegCommandParser+0x228>
 8002a94:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002a98:	f000 81cd 	beq.w	8002e36 <RI_SetRegCommandParser+0x512>
 8002a9c:	d977      	bls.n	8002b8e <RI_SetRegCommandParser+0x26a>
 8002a9e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002aa2:	d046      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002aa4:	d93a      	bls.n	8002b1c <RI_SetRegCommandParser+0x1f8>
 8002aa6:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002aaa:	d148      	bne.n	8002b3e <RI_SetRegCommandParser+0x21a>
            currComp = MCI_GetIqdref(pMCIN);
 8002aac:	4650      	mov	r0, sl
 8002aae:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8002ab0:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002ab4:	f7ff f906 	bl	8001cc4 <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 8002ab8:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002aba:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 8002abc:	f8ad 100c 	strh.w	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002ac0:	4650      	mov	r0, sl
 8002ac2:	9903      	ldr	r1, [sp, #12]
 8002ac4:	f7ff f814 	bl	8001af0 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002ac8:	1f32      	subs	r2, r6, #4
 8002aca:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002acc:	2000      	movs	r0, #0
 8002ace:	e760      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002ad0:	2b48      	cmp	r3, #72	; 0x48
 8002ad2:	f000 811a 	beq.w	8002d0a <RI_SetRegCommandParser+0x3e6>
 8002ad6:	2b88      	cmp	r3, #136	; 0x88
 8002ad8:	f000 8125 	beq.w	8002d26 <RI_SetRegCommandParser+0x402>
      rxLength = (int16_t) (rxLength - size);
 8002adc:	1ef2      	subs	r2, r6, #3
 8002ade:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002ae0:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002ae4:	2005      	movs	r0, #5
            break;
 8002ae6:	e754      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002ae8:	2b58      	cmp	r3, #88	; 0x58
 8002aea:	f000 8116 	beq.w	8002d1a <RI_SetRegCommandParser+0x3f6>
 8002aee:	2b98      	cmp	r3, #152	; 0x98
 8002af0:	f000 8125 	beq.w	8002d3e <RI_SetRegCommandParser+0x41a>
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	f000 8110 	beq.w	8002d1a <RI_SetRegCommandParser+0x3f6>
      rxLength = (int16_t) (rxLength - size);
 8002afa:	1fb2      	subs	r2, r6, #6
 8002afc:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002afe:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b02:	2005      	movs	r0, #5
            break;
 8002b04:	e745      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b06:	2008      	movs	r0, #8
}
 8002b08:	b005      	add	sp, #20
 8002b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002b0e:	2807      	cmp	r0, #7
 8002b10:	f040 80ef 	bne.w	8002cf2 <RI_SetRegCommandParser+0x3ce>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002b14:	2001      	movs	r0, #1
}
 8002b16:	b005      	add	sp, #20
 8002b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1c:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002b20:	d007      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002b22:	d930      	bls.n	8002b86 <RI_SetRegCommandParser+0x262>
 8002b24:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002b28:	d003      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002b2a:	d926      	bls.n	8002b7a <RI_SetRegCommandParser+0x256>
 8002b2c:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002b30:	d106      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 8002b32:	1f32      	subs	r2, r6, #4
 8002b34:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b36:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_RO_REG;
 8002b3a:	2004      	movs	r0, #4
            break;
 8002b3c:	e729      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002b3e:	d964      	bls.n	8002c0a <RI_SetRegCommandParser+0x2e6>
      rxLength = (int16_t) (rxLength - size);
 8002b40:	1f32      	subs	r2, r6, #4
 8002b42:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b44:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b48:	2005      	movs	r0, #5
            break;
 8002b4a:	e722      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002b4c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002b50:	f000 817c 	beq.w	8002e4c <RI_SetRegCommandParser+0x528>
 8002b54:	d94a      	bls.n	8002bec <RI_SetRegCommandParser+0x2c8>
 8002b56:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b5a:	f000 8198 	beq.w	8002e8e <RI_SetRegCommandParser+0x56a>
 8002b5e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002b62:	d1ed      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002b64:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <RI_SetRegCommandParser+0x380>)
 8002b66:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002b68:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f004 ff39 	bl	80079e4 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002b72:	1f32      	subs	r2, r6, #4
 8002b74:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b76:	2000      	movs	r0, #0
            break;
 8002b78:	e70b      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002b7a:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002b7e:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8002b82:	d1dd      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002b84:	e7d5      	b.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002b86:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002b8a:	d0d2      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002b8c:	e7d8      	b.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002b8e:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002b92:	f000 8145 	beq.w	8002e20 <RI_SetRegCommandParser+0x4fc>
 8002b96:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002b9a:	d1d1      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <RI_SetRegCommandParser+0x384>)
 8002b9e:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002ba0:	f10c 0404 	add.w	r4, ip, #4
 8002ba4:	e7e2      	b.n	8002b6c <RI_SetRegCommandParser+0x248>
 8002ba6:	f241 5210 	movw	r2, #5392	; 0x1510
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f000 8125 	beq.w	8002dfa <RI_SetRegCommandParser+0x4d6>
 8002bb0:	d945      	bls.n	8002c3e <RI_SetRegCommandParser+0x31a>
 8002bb2:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f000 8152 	beq.w	8002e60 <RI_SetRegCommandParser+0x53c>
 8002bbc:	d92c      	bls.n	8002c18 <RI_SetRegCommandParser+0x2f4>
 8002bbe:	f241 6250 	movw	r2, #5712	; 0x1650
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f000 8168 	beq.w	8002e98 <RI_SetRegCommandParser+0x574>
 8002bc8:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d0b0      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002bd0:	f241 6210 	movw	r2, #5648	; 0x1610
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d1b3      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <RI_SetRegCommandParser+0x380>)
      rxData = rxData+size;
 8002bda:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	f004 ff1a 	bl	8007a18 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002be4:	1f32      	subs	r2, r6, #4
 8002be6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002be8:	2000      	movs	r0, #0
            break;
 8002bea:	e6d2      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002bec:	2b90      	cmp	r3, #144	; 0x90
 8002bee:	f000 8144 	beq.w	8002e7a <RI_SetRegCommandParser+0x556>
 8002bf2:	2bd0      	cmp	r3, #208	; 0xd0
 8002bf4:	d1a4      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002bf6:	482d      	ldr	r0, [pc, #180]	; (8002cac <RI_SetRegCommandParser+0x388>)
 8002bf8:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002bfa:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002bfe:	f004 fef1 	bl	80079e4 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002c02:	1f32      	subs	r2, r6, #4
 8002c04:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c06:	2000      	movs	r0, #0
            break;
 8002c08:	e6c3      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002c0a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002c0e:	d090      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002c10:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002c14:	d08d      	beq.n	8002b32 <RI_SetRegCommandParser+0x20e>
 8002c16:	e793      	b.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002c18:	f241 5250 	movw	r2, #5456	; 0x1550
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f000 813f 	beq.w	8002ea0 <RI_SetRegCommandParser+0x57c>
 8002c22:	f241 5290 	movw	r2, #5520	; 0x1590
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d18a      	bne.n	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <RI_SetRegCommandParser+0x384>)
      rxData = rxData+size;
 8002c2c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	f004 ff0d 	bl	8007a50 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002c36:	1f32      	subs	r2, r6, #4
 8002c38:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c3a:	2000      	movs	r0, #0
            break;
 8002c3c:	e6a9      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002c3e:	f241 4250 	movw	r2, #5200	; 0x1450
 8002c42:	4293      	cmp	r3, r2
 8002c44:	f000 8110 	beq.w	8002e68 <RI_SetRegCommandParser+0x544>
 8002c48:	d912      	bls.n	8002c70 <RI_SetRegCommandParser+0x34c>
 8002c4a:	f241 4290 	movw	r2, #5264	; 0x1490
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	f000 80dd 	beq.w	8002e0e <RI_SetRegCommandParser+0x4ea>
 8002c54:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f47f af71 	bne.w	8002b40 <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002c5e:	4813      	ldr	r0, [pc, #76]	; (8002cac <RI_SetRegCommandParser+0x388>)
      rxData = rxData+size;
 8002c60:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002c64:	f004 fef4 	bl	8007a50 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002c68:	1f32      	subs	r2, r6, #4
 8002c6a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c6c:	2000      	movs	r0, #0
            break;
 8002c6e:	e690      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002c70:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002c74:	d003      	beq.n	8002c7e <RI_SetRegCommandParser+0x35a>
 8002c76:	d908      	bls.n	8002c8a <RI_SetRegCommandParser+0x366>
 8002c78:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002c7c:	d11a      	bne.n	8002cb4 <RI_SetRegCommandParser+0x390>
      rxLength = (int16_t) (rxLength - size);
 8002c7e:	1f32      	subs	r2, r6, #4
 8002c80:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002c82:	f10c 0404 	add.w	r4, ip, #4
  uint8_t retVal = MCP_CMD_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e683      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
 8002c8a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002c8e:	f43f af50 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002c92:	d91a      	bls.n	8002cca <RI_SetRegCommandParser+0x3a6>
 8002c94:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002c98:	f43f af4b 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002c9c:	e750      	b.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002c9e:	bf00      	nop
 8002ca0:	20000364 	.word	0x20000364
 8002ca4:	20000348 	.word	0x20000348
 8002ca8:	20000344 	.word	0x20000344
 8002cac:	20000200 	.word	0x20000200
 8002cb0:	2000073c 	.word	0x2000073c
 8002cb4:	f4ff af44 	bcc.w	8002b40 <RI_SetRegCommandParser+0x21c>
 8002cb8:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002cbc:	f43f af39 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002cc0:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8002cc4:	f43f af35 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002cc8:	e73a      	b.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002cca:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002cce:	f43f af30 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002cd2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002cd6:	f43f af2c 	beq.w	8002b32 <RI_SetRegCommandParser+0x20e>
 8002cda:	e731      	b.n	8002b40 <RI_SetRegCommandParser+0x21c>
 8002cdc:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002ce0:	2828      	cmp	r0, #40	; 0x28
 8002ce2:	f43f aea3 	beq.w	8002a2c <RI_SetRegCommandParser+0x108>
      rxLength = (int16_t) (rxLength - size);
 8002ce6:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002cea:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002cec:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002cee:	2005      	movs	r0, #5
              break;
 8002cf0:	e64f      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002cf2:	280a      	cmp	r0, #10
 8002cf4:	f43f af0e 	beq.w	8002b14 <RI_SetRegCommandParser+0x1f0>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	e659      	b.n	80029b2 <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8002cfe:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8002d02:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8002d04:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8002d06:	2004      	movs	r0, #4
 8002d08:	e643      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002d0a:	1ef2      	subs	r2, r6, #3
 8002d0c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d0e:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_RO_REG;
 8002d12:	2004      	movs	r0, #4
 8002d14:	e63d      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002d16:	200a      	movs	r0, #10
 8002d18:	e63b      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002d1a:	1fb2      	subs	r2, r6, #6
 8002d1c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d1e:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_RO_REG;
 8002d22:	2004      	movs	r0, #4
 8002d24:	e635      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8002d26:	f89c 3002 	ldrb.w	r3, [ip, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d045      	beq.n	8002dba <RI_SetRegCommandParser+0x496>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d051      	beq.n	8002dd6 <RI_SetRegCommandParser+0x4b2>
      rxLength = (int16_t) (rxLength - size);
 8002d32:	1ef2      	subs	r2, r6, #3
 8002d34:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d36:	f10c 0403 	add.w	r4, ip, #3
  uint8_t retVal = MCP_CMD_OK;
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	e629      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d3e:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8002d42:	4a62      	ldr	r2, [pc, #392]	; (8002ecc <RI_SetRegCommandParser+0x5a8>)
 8002d44:	fb82 2103 	smull	r2, r1, r2, r3
 8002d48:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4650      	mov	r0, sl
 8002d50:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002d52:	f10c 0406 	add.w	r4, ip, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d56:	f7fe feb7 	bl	8001ac8 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002d5a:	1fb2      	subs	r2, r6, #6
 8002d5c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d5e:	2000      	movs	r0, #0
            break;
 8002d60:	e617      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002d62:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002d66:	4959      	ldr	r1, [pc, #356]	; (8002ecc <RI_SetRegCommandParser+0x5a8>)
 8002d68:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002d6c:	fb81 0103 	smull	r0, r1, r1, r3
 8002d70:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002d74:	4650      	mov	r0, sl
 8002d76:	b209      	sxth	r1, r1
 8002d78:	f7fe fea6 	bl	8001ac8 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002d7c:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002d80:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002d82:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d84:	2000      	movs	r0, #0
              break;
 8002d86:	e604      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002d88:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002d8c:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8002d90:	4650      	mov	r0, sl
 8002d92:	f7fe fea3 	bl	8001adc <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002d96:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002d9a:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002d9c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d9e:	2000      	movs	r0, #0
              break;
 8002da0:	e5f7      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002da2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002da6:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002da8:	4650      	mov	r0, sl
 8002daa:	f7fe fea1 	bl	8001af0 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002dae:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002db2:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002db4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002db6:	2000      	movs	r0, #0
 8002db8:	e5eb      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002dba:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002dbc:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002dc0:	f7fe ffaa 	bl	8001d18 <MCI_GetTeref>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4650      	mov	r0, sl
 8002dca:	f7fe fe87 	bl	8001adc <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002dce:	1ef2      	subs	r2, r6, #3
 8002dd0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e5dd      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002dd6:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002dd8:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002ddc:	f7fe ff44 	bl	8001c68 <MCI_GetMecSpeedRefUnit>
 8002de0:	2200      	movs	r2, #0
 8002de2:	4601      	mov	r1, r0
 8002de4:	4650      	mov	r0, sl
 8002de6:	f7fe fe6f 	bl	8001ac8 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002dea:	1ef2      	subs	r2, r6, #3
 8002dec:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dee:	2000      	movs	r0, #0
 8002df0:	e5cf      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002df2:	2201      	movs	r2, #1
  const char_t *tempsrcString = srcString;
 8002df4:	4626      	mov	r6, r4
  *size= 1U ; /* /0 is the min String size */
 8002df6:	4613      	mov	r3, r2
 8002df8:	e637      	b.n	8002a6a <RI_SetRegCommandParser+0x146>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002dfa:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002dfc:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	f004 fdfd 	bl	8007a00 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e06:	1f32      	subs	r2, r6, #4
 8002e08:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e0a:	2000      	movs	r0, #0
            break;
 8002e0c:	e5c1      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e0e:	4831      	ldr	r0, [pc, #196]	; (8002ed4 <RI_SetRegCommandParser+0x5b0>)
      rxData = rxData+size;
 8002e10:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e14:	f004 fe00 	bl	8007a18 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e18:	1f32      	subs	r2, r6, #4
 8002e1a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e1c:	2000      	movs	r0, #0
            break;
 8002e1e:	e5b8      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <RI_SetRegCommandParser+0x5ac>)
 8002e22:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e24:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f004 fdd9 	bl	80079e0 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002e2e:	1f32      	subs	r2, r6, #4
 8002e30:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e32:	2000      	movs	r0, #0
            break;
 8002e34:	e5ad      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <RI_SetRegCommandParser+0x5ac>)
 8002e38:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e3a:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f004 fdfe 	bl	8007a40 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e44:	1f32      	subs	r2, r6, #4
 8002e46:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e48:	2000      	movs	r0, #0
            break;
 8002e4a:	e5a2      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e4c:	4821      	ldr	r0, [pc, #132]	; (8002ed4 <RI_SetRegCommandParser+0x5b0>)
 8002e4e:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e50:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e54:	f004 fdf4 	bl	8007a40 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e58:	1f32      	subs	r2, r6, #4
 8002e5a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e5c:	2000      	movs	r0, #0
            break;
 8002e5e:	e598      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <RI_SetRegCommandParser+0x5b4>)
      rxData = rxData+size;
 8002e62:	f10c 0404 	add.w	r4, ip, #4
 8002e66:	e7cb      	b.n	8002e00 <RI_SetRegCommandParser+0x4dc>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <RI_SetRegCommandParser+0x5b0>)
      rxData = rxData+size;
 8002e6a:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e6e:	f004 fdc7 	bl	8007a00 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e72:	1f32      	subs	r2, r6, #4
 8002e74:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e76:	2000      	movs	r0, #0
            break;
 8002e78:	e58b      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e7a:	4816      	ldr	r0, [pc, #88]	; (8002ed4 <RI_SetRegCommandParser+0x5b0>)
 8002e7c:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e7e:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e82:	f004 fdad 	bl	80079e0 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002e86:	1f32      	subs	r2, r6, #4
 8002e88:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e8a:	2000      	movs	r0, #0
            break;
 8002e8c:	e581      	b.n	8002992 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <RI_SetRegCommandParser+0x5b4>)
 8002e90:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e92:	f10c 0404 	add.w	r4, ip, #4
 8002e96:	e7c7      	b.n	8002e28 <RI_SetRegCommandParser+0x504>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <RI_SetRegCommandParser+0x5b4>)
      rxData = rxData+size;
 8002e9a:	f10c 0404 	add.w	r4, ip, #4
 8002e9e:	e6c7      	b.n	8002c30 <RI_SetRegCommandParser+0x30c>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002ea2:	f10c 0404 	add.w	r4, ip, #4
 8002ea6:	e69a      	b.n	8002bde <RI_SetRegCommandParser+0x2ba>
            currComp = MCI_GetIqdref(pMCIN);
 8002ea8:	4650      	mov	r0, sl
 8002eaa:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8002eac:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002eb0:	f7fe ff08 	bl	8001cc4 <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 8002eb4:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002eb6:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8002eb8:	f8ad 100e 	strh.w	r1, [sp, #14]
 8002ebc:	e600      	b.n	8002ac0 <RI_SetRegCommandParser+0x19c>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <RI_SetRegCommandParser+0x5b4>)
 8002ec0:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002ec2:	f10c 0404 	add.w	r4, ip, #4
 8002ec6:	e7ba      	b.n	8002e3e <RI_SetRegCommandParser+0x51a>
 8002ec8:	9800      	ldr	r0, [sp, #0]
 8002eca:	e59b      	b.n	8002a04 <RI_SetRegCommandParser+0xe0>
 8002ecc:	2aaaaaab 	.word	0x2aaaaaab
 8002ed0:	20000344 	.word	0x20000344
 8002ed4:	20000200 	.word	0x20000200
 8002ed8:	20000348 	.word	0x20000348

08002edc <RI_GetRegCommandParser>:
{
 8002edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002ee0:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002ee4:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002ee8:	6885      	ldr	r5, [r0, #8]
    pHandle->txLength = 0;
 8002eea:	2300      	movs	r3, #0
{
 8002eec:	b091      	sub	sp, #68	; 0x44
    pHandle->txLength = 0;
 8002eee:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002ef0:	f1b8 0f00 	cmp.w	r8, #0
 8002ef4:	f000 82fd 	beq.w	80034f2 <RI_GetRegCommandParser+0x616>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002ef8:	4eaa      	ldr	r6, [pc, #680]	; (80031a4 <RI_GetRegCommandParser+0x2c8>)
 8002efa:	4607      	mov	r7, r0
 8002efc:	b209      	sxth	r1, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002efe:	464c      	mov	r4, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002f00:	f834 3b02 	ldrh.w	r3, [r4], #2
    switch (typeID)
 8002f04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f08:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	b29b      	uxth	r3, r3
    switch (typeID)
 8002f10:	2a20      	cmp	r2, #32
 8002f12:	d812      	bhi.n	8002f3a <RI_GetRegCommandParser+0x5e>
 8002f14:	e8df f002 	tbb	[pc, r2]
 8002f18:	111111af 	.word	0x111111af
 8002f1c:	11111111 	.word	0x11111111
 8002f20:	11111167 	.word	0x11111167
 8002f24:	11111111 	.word	0x11111111
 8002f28:	111111ba 	.word	0x111111ba
 8002f2c:	11111111 	.word	0x11111111
 8002f30:	1111112b 	.word	0x1111112b
 8002f34:	11111111 	.word	0x11111111
 8002f38:	15          	.byte	0x15
 8002f39:	00          	.byte	0x00
 8002f3a:	2007      	movs	r0, #7
}
 8002f3c:	b011      	add	sp, #68	; 0x44
 8002f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002f42:	2be8      	cmp	r3, #232	; 0xe8
 8002f44:	f105 0202 	add.w	r2, r5, #2
        switch (regID)
 8002f48:	f000 82ca 	beq.w	80034e0 <RI_GetRegCommandParser+0x604>
 8002f4c:	f200 80cb 	bhi.w	80030e6 <RI_GetRegCommandParser+0x20a>
 8002f50:	2b68      	cmp	r3, #104	; 0x68
 8002f52:	f000 827c 	beq.w	800344e <RI_GetRegCommandParser+0x572>
 8002f56:	2ba8      	cmp	r3, #168	; 0xa8
 8002f58:	f040 80b2 	bne.w	80030c0 <RI_GetRegCommandParser+0x1e4>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002f5c:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 8002f5e:	290f      	cmp	r1, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002f60:	802b      	strh	r3, [r5, #0]
            if ((*rawSize) +2  > freeSpace)
 8002f62:	f300 8252 	bgt.w	800340a <RI_GetRegCommandParser+0x52e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002f66:	2008      	movs	r0, #8
}
 8002f68:	b011      	add	sp, #68	; 0x44
 8002f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002f6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f70:	f000 821b 	beq.w	80033aa <RI_GetRegCommandParser+0x4ce>
 8002f74:	f200 80d3 	bhi.w	800311e <RI_GetRegCommandParser+0x242>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	f000 822f 	beq.w	80033dc <RI_GetRegCommandParser+0x500>
 8002f7e:	2b60      	cmp	r3, #96	; 0x60
 8002f80:	f040 8082 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002f84:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <RI_GetRegCommandParser+0x2cc>)
 8002f86:	f993 0000 	ldrsb.w	r0, [r3]
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	f000 8250 	beq.w	8003430 <RI_GetRegCommandParser+0x554>
 8002f90:	2901      	cmp	r1, #1
 8002f92:	f340 81ff 	ble.w	8003394 <RI_GetRegCommandParser+0x4b8>
 8002f96:	469e      	mov	lr, r3
 8002f98:	46ac      	mov	ip, r5
 8002f9a:	f1c5 0201 	rsb	r2, r5, #1
 8002f9e:	e002      	b.n	8002fa6 <RI_GetRegCommandParser+0xca>
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	f280 81f7 	bge.w	8003394 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8002fa6:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002faa:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8002fae:	eb0c 0302 	add.w	r3, ip, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d1f3      	bne.n	8002fa0 <RI_GetRegCommandParser+0xc4>
        txData = txData+size;
 8002fb8:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8002fba:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8002fbc:	fa1f fa81 	uxth.w	sl, r1
    *tempdestString = (int8_t)0;
 8002fc0:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8002fc4:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
    while (rxLength > 0U)
 8002fc8:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 8002fcc:	449c      	add	ip, r3
        freeSpaceS16 = freeSpaceS16-size;
 8002fce:	ebaa 0103 	sub.w	r1, sl, r3
    while (rxLength > 0U)
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	b2a3      	uxth	r3, r4
 8002fd6:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8002fd8:	f8a7 c00e 	strh.w	ip, [r7, #14]
        txData = txData+size;
 8002fdc:	4405      	add	r5, r0
        freeSpaceS16 = freeSpaceS16-size;
 8002fde:	b209      	sxth	r1, r1
    while (rxLength > 0U)
 8002fe0:	d18e      	bne.n	8002f00 <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e7aa      	b.n	8002f3c <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 2U)
 8002fe6:	fa1f fa81 	uxth.w	sl, r1
 8002fea:	f1ba 0f01 	cmp.w	sl, #1
 8002fee:	d9ba      	bls.n	8002f66 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8002ff0:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002ff4:	f000 82cd 	beq.w	8003592 <RI_GetRegCommandParser+0x6b6>
 8002ff8:	d81d      	bhi.n	8003036 <RI_GetRegCommandParser+0x15a>
 8002ffa:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002ffe:	f000 82ea 	beq.w	80035d6 <RI_GetRegCommandParser+0x6fa>
 8003002:	f240 8150 	bls.w	80032a6 <RI_GetRegCommandParser+0x3ca>
 8003006:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800300a:	f000 8294 	beq.w	8003536 <RI_GetRegCommandParser+0x65a>
 800300e:	f240 8137 	bls.w	8003280 <RI_GetRegCommandParser+0x3a4>
 8003012:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003016:	f000 8286 	beq.w	8003526 <RI_GetRegCommandParser+0x64a>
 800301a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800301e:	f040 8121 	bne.w	8003264 <RI_GetRegCommandParser+0x388>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003022:	4862      	ldr	r0, [pc, #392]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
 8003024:	f7fe fe40 	bl	8001ca8 <MCI_GetIqd>
 8003028:	900a      	str	r0, [sp, #40]	; 0x28
 800302a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800302e:	8028      	strh	r0, [r5, #0]
              break;
 8003030:	2002      	movs	r0, #2
          *size = 2;
 8003032:	4603      	mov	r3, r0
              break;
 8003034:	e7c6      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003036:	f241 4250 	movw	r2, #5200	; 0x1450
 800303a:	4293      	cmp	r3, r2
 800303c:	f000 82a2 	beq.w	8003584 <RI_GetRegCommandParser+0x6a8>
 8003040:	f240 80cf 	bls.w	80031e2 <RI_GetRegCommandParser+0x306>
 8003044:	f241 5290 	movw	r2, #5520	; 0x1590
 8003048:	4293      	cmp	r3, r2
 800304a:	f000 827e 	beq.w	800354a <RI_GetRegCommandParser+0x66e>
 800304e:	f240 80b5 	bls.w	80031bc <RI_GetRegCommandParser+0x2e0>
 8003052:	f241 6210 	movw	r2, #5648	; 0x1610
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 8275 	beq.w	8003546 <RI_GetRegCommandParser+0x66a>
 800305c:	f241 6250 	movw	r2, #5712	; 0x1650
 8003060:	4293      	cmp	r3, r2
 8003062:	f040 8091 	bne.w	8003188 <RI_GetRegCommandParser+0x2ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <RI_GetRegCommandParser+0x2d4>)
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	f004 fcef 	bl	8007a4c <PID_GetKDDivisorPOW2>
 800306e:	8028      	strh	r0, [r5, #0]
 8003070:	2002      	movs	r0, #2
          *size = 2;
 8003072:	4603      	mov	r3, r0
 8003074:	e7a6      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
        if (freeSpace > 0U)
 8003076:	2900      	cmp	r1, #0
 8003078:	f43f af75 	beq.w	8002f66 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 800307c:	2b48      	cmp	r3, #72	; 0x48
 800307e:	f000 818b 	beq.w	8003398 <RI_GetRegCommandParser+0x4bc>
 8003082:	2b88      	cmp	r3, #136	; 0x88
 8003084:	f000 817d 	beq.w	8003382 <RI_GetRegCommandParser+0x4a6>
 8003088:	2005      	movs	r0, #5
 800308a:	e757      	b.n	8002f3c <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 4U)
 800308c:	fa1f fa81 	uxth.w	sl, r1
 8003090:	f1ba 0f03 	cmp.w	sl, #3
 8003094:	f67f af67 	bls.w	8002f66 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8003098:	2b98      	cmp	r3, #152	; 0x98
 800309a:	f000 81d4 	beq.w	8003446 <RI_GetRegCommandParser+0x56a>
 800309e:	f200 8160 	bhi.w	8003362 <RI_GetRegCommandParser+0x486>
 80030a2:	2b18      	cmp	r3, #24
 80030a4:	f000 81c8 	beq.w	8003438 <RI_GetRegCommandParser+0x55c>
 80030a8:	2b58      	cmp	r3, #88	; 0x58
 80030aa:	d1ed      	bne.n	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80030ac:	483f      	ldr	r0, [pc, #252]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
 80030ae:	f7fe fdd3 	bl	8001c58 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80030b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030b6:	0040      	lsls	r0, r0, #1
 80030b8:	6028      	str	r0, [r5, #0]
 80030ba:	2004      	movs	r0, #4
          *size = 4;
 80030bc:	4603      	mov	r3, r0
 80030be:	e781      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80030c0:	2b28      	cmp	r3, #40	; 0x28
 80030c2:	d1e1      	bne.n	8003088 <RI_GetRegCommandParser+0x1ac>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80030c4:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 80030c6:	290b      	cmp	r1, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80030c8:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80030ca:	f67f af4c 	bls.w	8002f66 <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <RI_GetRegCommandParser+0x2d8>)
        if (freeSpace >= 2U)
 80030d0:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	6011      	str	r1, [r2, #0]
        if (freeSpace >= 2U)
 80030d8:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	891b      	ldrh	r3, [r3, #8]
 80030de:	8113      	strh	r3, [r2, #8]
 80030e0:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 80030e2:	4603      	mov	r3, r0
 80030e4:	e76e      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80030e6:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80030ea:	f000 81ed 	beq.w	80034c8 <RI_GetRegCommandParser+0x5ec>
 80030ee:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80030f2:	d133      	bne.n	800315c <RI_GetRegCommandParser+0x280>
            *rawSize = 4;
 80030f4:	2304      	movs	r3, #4
 80030f6:	802b      	strh	r3, [r5, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80030f8:	482c      	ldr	r0, [pc, #176]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 80030fa:	fa1f fa81 	uxth.w	sl, r1
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80030fe:	f7fe fde1 	bl	8001cc4 <MCI_GetIqdref>
 8003102:	8068      	strh	r0, [r5, #2]
 8003104:	9003      	str	r0, [sp, #12]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003106:	4829      	ldr	r0, [pc, #164]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
 8003108:	f7fe fddc 	bl	8001cc4 <MCI_GetIqdref>
 800310c:	9002      	str	r0, [sp, #8]
 800310e:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8003112:	882b      	ldrh	r3, [r5, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003114:	80a8      	strh	r0, [r5, #4]
        *size = (*rawSize) + 2U;
 8003116:	3302      	adds	r3, #2
 8003118:	b29b      	uxth	r3, r3
        txData = txData+size;
 800311a:	4618      	mov	r0, r3
 800311c:	e752      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 800311e:	2be0      	cmp	r3, #224	; 0xe0
 8003120:	d1b2      	bne.n	8003088 <RI_GetRegCommandParser+0x1ac>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <RI_GetRegCommandParser+0x2dc>)
 8003124:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003126:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
 800312a:	2800      	cmp	r0, #0
 800312c:	f000 8180 	beq.w	8003430 <RI_GetRegCommandParser+0x554>
 8003130:	2901      	cmp	r1, #1
 8003132:	f340 812f 	ble.w	8003394 <RI_GetRegCommandParser+0x4b8>
 8003136:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 800313a:	46ac      	mov	ip, r5
 800313c:	f1c5 0201 	rsb	r2, r5, #1
 8003140:	e002      	b.n	8003148 <RI_GetRegCommandParser+0x26c>
 8003142:	428b      	cmp	r3, r1
 8003144:	f280 8126 	bge.w	8003394 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003148:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800314c:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003150:	eb0c 0302 	add.w	r3, ip, r2
 8003154:	b29b      	uxth	r3, r3
 8003156:	2800      	cmp	r0, #0
 8003158:	d1f3      	bne.n	8003142 <RI_GetRegCommandParser+0x266>
 800315a:	e72d      	b.n	8002fb8 <RI_GetRegCommandParser+0xdc>
 800315c:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8003160:	d192      	bne.n	8003088 <RI_GetRegCommandParser+0x1ac>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003162:	4812      	ldr	r0, [pc, #72]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 8003164:	fa1f fa81 	uxth.w	sl, r1
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003168:	f7fe fd68 	bl	8001c3c <MCI_GetLastRampFinalSpeed>
 800316c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003170:	0040      	lsls	r0, r0, #1
 8003172:	f8c5 0002 	str.w	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <RI_GetRegCommandParser+0x2d0>)
 8003178:	f7fe fd68 	bl	8001c4c <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800317c:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800317e:	80e8      	strh	r0, [r5, #6]
        if (freeSpace >= 2U)
 8003180:	2008      	movs	r0, #8
            *rawSize = 6;
 8003182:	802b      	strh	r3, [r5, #0]
        *size = (*rawSize) + 2U;
 8003184:	4603      	mov	r3, r0
 8003186:	e71d      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003188:	f241 52d0 	movw	r2, #5584	; 0x15d0
 800318c:	4293      	cmp	r3, r2
 800318e:	f47f af7b 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <RI_GetRegCommandParser+0x2d4>)
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	f004 fc31 	bl	80079fc <PID_GetKPDivisorPOW2>
 800319a:	8028      	strh	r0, [r5, #0]
 800319c:	2002      	movs	r0, #2
          *size = 2;
 800319e:	4603      	mov	r3, r0
 80031a0:	e710      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80031a2:	bf00      	nop
 80031a4:	20000358 	.word	0x20000358
 80031a8:	08008f9c 	.word	0x08008f9c
 80031ac:	2000073c 	.word	0x2000073c
 80031b0:	20000348 	.word	0x20000348
 80031b4:	08009030 	.word	0x08009030
 80031b8:	2000035c 	.word	0x2000035c
 80031bc:	f241 5210 	movw	r2, #5392	; 0x1510
 80031c0:	4293      	cmp	r3, r2
 80031c2:	f000 820a 	beq.w	80035da <RI_GetRegCommandParser+0x6fe>
 80031c6:	d921      	bls.n	800320c <RI_GetRegCommandParser+0x330>
 80031c8:	f241 5250 	movw	r2, #5456	; 0x1550
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f47f af5b 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 80031d2:	4bb2      	ldr	r3, [pc, #712]	; (800349c <RI_GetRegCommandParser+0x5c0>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	f004 fc19 	bl	8007a0c <PID_GetKIDivisorPOW2>
 80031da:	8028      	strh	r0, [r5, #0]
 80031dc:	2002      	movs	r0, #2
          *size = 2;
 80031de:	4603      	mov	r3, r0
 80031e0:	e6f0      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80031e2:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80031e6:	f000 81b9 	beq.w	800355c <RI_GetRegCommandParser+0x680>
 80031ea:	d92a      	bls.n	8003242 <RI_GetRegCommandParser+0x366>
 80031ec:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 80031f0:	f000 81ad 	beq.w	800354e <RI_GetRegCommandParser+0x672>
 80031f4:	d91b      	bls.n	800322e <RI_GetRegCommandParser+0x352>
 80031f6:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 80031fa:	f47f af45 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 80031fe:	48a8      	ldr	r0, [pc, #672]	; (80034a0 <RI_GetRegCommandParser+0x5c4>)
 8003200:	f005 fd3c 	bl	8008c7c <SPD_GetS16Speed>
 8003204:	8028      	strh	r0, [r5, #0]
 8003206:	2002      	movs	r0, #2
          *size = 2;
 8003208:	4603      	mov	r3, r0
 800320a:	e6db      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 800320c:	f241 4290 	movw	r2, #5264	; 0x1490
 8003210:	4293      	cmp	r3, r2
 8003212:	f000 8181 	beq.w	8003518 <RI_GetRegCommandParser+0x63c>
 8003216:	f241 42d0 	movw	r2, #5328	; 0x14d0
 800321a:	4293      	cmp	r3, r2
 800321c:	f47f af34 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003220:	48a0      	ldr	r0, [pc, #640]	; (80034a4 <RI_GetRegCommandParser+0x5c8>)
 8003222:	f004 fc13 	bl	8007a4c <PID_GetKDDivisorPOW2>
 8003226:	8028      	strh	r0, [r5, #0]
 8003228:	2002      	movs	r0, #2
          *size = 2;
 800322a:	4603      	mov	r3, r0
 800322c:	e6ca      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 800322e:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8003232:	d003      	beq.n	800323c <RI_GetRegCommandParser+0x360>
 8003234:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003238:	f47f af26 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
 800323c:	2002      	movs	r0, #2
 800323e:	4603      	mov	r3, r0
 8003240:	e6c0      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003242:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003246:	f000 815d 	beq.w	8003504 <RI_GetRegCommandParser+0x628>
 800324a:	d940      	bls.n	80032ce <RI_GetRegCommandParser+0x3f2>
 800324c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003250:	f47f af1a 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003254:	4894      	ldr	r0, [pc, #592]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 8003256:	f7fe fd51 	bl	8001cfc <MCI_GetValphabeta>
 800325a:	9005      	str	r0, [sp, #20]
 800325c:	8028      	strh	r0, [r5, #0]
 800325e:	2002      	movs	r0, #2
          *size = 2;
 8003260:	4603      	mov	r3, r0
 8003262:	e6af      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003264:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003268:	f47f af0e 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800326c:	488e      	ldr	r0, [pc, #568]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 800326e:	f7fe fd0d 	bl	8001c8c <MCI_GetIalphabeta>
 8003272:	900c      	str	r0, [sp, #48]	; 0x30
 8003274:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003278:	8028      	strh	r0, [r5, #0]
              break;
 800327a:	2002      	movs	r0, #2
          *size = 2;
 800327c:	4603      	mov	r3, r0
              break;
 800327e:	e6a1      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003280:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003284:	f000 8176 	beq.w	8003574 <RI_GetRegCommandParser+0x698>
 8003288:	d931      	bls.n	80032ee <RI_GetRegCommandParser+0x412>
 800328a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800328e:	f47f aefb 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003292:	4885      	ldr	r0, [pc, #532]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 8003294:	f7fe fcec 	bl	8001c70 <MCI_GetIab>
 8003298:	900e      	str	r0, [sp, #56]	; 0x38
 800329a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800329e:	8028      	strh	r0, [r5, #0]
              break;
 80032a0:	2002      	movs	r0, #2
          *size = 2;
 80032a2:	4603      	mov	r3, r0
              break;
 80032a4:	e68e      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80032a6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80032aa:	f000 8161 	beq.w	8003570 <RI_GetRegCommandParser+0x694>
 80032ae:	d93a      	bls.n	8003326 <RI_GetRegCommandParser+0x44a>
 80032b0:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80032b4:	f000 817c 	beq.w	80035b0 <RI_GetRegCommandParser+0x6d4>
 80032b8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80032bc:	d127      	bne.n	800330e <RI_GetRegCommandParser+0x432>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 80032be:	4b77      	ldr	r3, [pc, #476]	; (800349c <RI_GetRegCommandParser+0x5c0>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f004 fb95 	bl	80079f0 <PID_GetKI>
 80032c6:	8028      	strh	r0, [r5, #0]
              break;
 80032c8:	2002      	movs	r0, #2
          *size = 2;
 80032ca:	4603      	mov	r3, r0
              break;
 80032cc:	e67a      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80032ce:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80032d2:	f000 8176 	beq.w	80035c2 <RI_GetRegCommandParser+0x6e6>
 80032d6:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80032da:	f47f aed5 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80032de:	4872      	ldr	r0, [pc, #456]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 80032e0:	f7fe fcfe 	bl	8001ce0 <MCI_GetVqd>
 80032e4:	9007      	str	r0, [sp, #28]
 80032e6:	8028      	strh	r0, [r5, #0]
 80032e8:	2002      	movs	r0, #2
          *size = 2;
 80032ea:	4603      	mov	r3, r0
 80032ec:	e66a      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 80032ee:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80032f2:	f000 815f 	beq.w	80035b4 <RI_GetRegCommandParser+0x6d8>
 80032f6:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80032fa:	f47f aec5 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80032fe:	4b6b      	ldr	r3, [pc, #428]	; (80034ac <RI_GetRegCommandParser+0x5d0>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f004 fb53 	bl	80079ac <NTC_GetAvTemp_C>
 8003306:	8028      	strh	r0, [r5, #0]
              break;
 8003308:	2002      	movs	r0, #2
          *size = 2;
 800330a:	4603      	mov	r3, r0
              break;
 800330c:	e65a      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 800330e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003312:	f47f aeb9 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003316:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f004 fb93 	bl	8007a44 <PID_GetKD>
 800331e:	8028      	strh	r0, [r5, #0]
              break;
 8003320:	2002      	movs	r0, #2
          *size = 2;
 8003322:	4603      	mov	r3, r0
              break;
 8003324:	e64e      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003326:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800332a:	f000 813a 	beq.w	80035a2 <RI_GetRegCommandParser+0x6c6>
 800332e:	d90b      	bls.n	8003348 <RI_GetRegCommandParser+0x46c>
 8003330:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003334:	f47f aea8 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003338:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	f004 fb54 	bl	80079e8 <PID_GetKP>
 8003340:	8028      	strh	r0, [r5, #0]
              break;
 8003342:	2002      	movs	r0, #2
          *size = 2;
 8003344:	4603      	mov	r3, r0
              break;
 8003346:	e63d      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003348:	2b90      	cmp	r3, #144	; 0x90
 800334a:	f000 80d4 	beq.w	80034f6 <RI_GetRegCommandParser+0x61a>
 800334e:	2bd0      	cmp	r3, #208	; 0xd0
 8003350:	f47f ae9a 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003354:	4853      	ldr	r0, [pc, #332]	; (80034a4 <RI_GetRegCommandParser+0x5c8>)
 8003356:	f004 fb4b 	bl	80079f0 <PID_GetKI>
 800335a:	8028      	strh	r0, [r5, #0]
              break;
 800335c:	2002      	movs	r0, #2
          *size = 2;
 800335e:	4603      	mov	r3, r0
              break;
 8003360:	e630      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 8003362:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003366:	4293      	cmp	r3, r2
 8003368:	f47f ae8e 	bne.w	8003088 <RI_GetRegCommandParser+0x1ac>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <RI_GetRegCommandParser+0x5d8>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f004 fbd8 	bl	8007b24 <PQD_GetAvrgElMotorPowerW>
 8003374:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	2004      	movs	r0, #4
          *size = 4;
 800337e:	4603      	mov	r3, r0
 8003380:	e620      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003382:	4849      	ldr	r0, [pc, #292]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
        if (freeSpace >= 2U)
 8003384:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003388:	f7fe fc56 	bl	8001c38 <MCI_GetControlMode>
 800338c:	7028      	strb	r0, [r5, #0]
              break;
 800338e:	2001      	movs	r0, #1
          *size = 1;
 8003390:	4603      	mov	r3, r0
              break;
 8003392:	e617      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003394:	2006      	movs	r0, #6
 8003396:	e5d1      	b.n	8002f3c <RI_GetRegCommandParser+0x60>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003398:	4843      	ldr	r0, [pc, #268]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
        if (freeSpace >= 2U)
 800339a:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800339e:	f7fe fbf7 	bl	8001b90 <MCI_GetSTMState>
 80033a2:	7028      	strb	r0, [r5, #0]
        if (freeSpace >= 2U)
 80033a4:	2001      	movs	r0, #1
          *size = 1;
 80033a6:	4603      	mov	r3, r0
 80033a8:	e60c      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <RI_GetRegCommandParser+0x5dc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033ae:	f993 0000 	ldrsb.w	r0, [r3]
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d03c      	beq.n	8003430 <RI_GetRegCommandParser+0x554>
 80033b6:	2901      	cmp	r1, #1
 80033b8:	ddec      	ble.n	8003394 <RI_GetRegCommandParser+0x4b8>
 80033ba:	469e      	mov	lr, r3
 80033bc:	46ac      	mov	ip, r5
 80033be:	f1c5 0201 	rsb	r2, r5, #1
 80033c2:	e001      	b.n	80033c8 <RI_GetRegCommandParser+0x4ec>
 80033c4:	428b      	cmp	r3, r1
 80033c6:	dae5      	bge.n	8003394 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 80033c8:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033cc:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 80033d0:	eb0c 0302 	add.w	r3, ip, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d1f4      	bne.n	80033c4 <RI_GetRegCommandParser+0x4e8>
 80033da:	e5ed      	b.n	8002fb8 <RI_GetRegCommandParser+0xdc>
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <RI_GetRegCommandParser+0x5e0>)
 80033de:	f993 0000 	ldrsb.w	r0, [r3]
 80033e2:	b328      	cbz	r0, 8003430 <RI_GetRegCommandParser+0x554>
 80033e4:	2901      	cmp	r1, #1
 80033e6:	ddd5      	ble.n	8003394 <RI_GetRegCommandParser+0x4b8>
 80033e8:	469e      	mov	lr, r3
 80033ea:	46ac      	mov	ip, r5
 80033ec:	f1c5 0201 	rsb	r2, r5, #1
 80033f0:	e001      	b.n	80033f6 <RI_GetRegCommandParser+0x51a>
 80033f2:	428b      	cmp	r3, r1
 80033f4:	dace      	bge.n	8003394 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 80033f6:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033fa:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 80033fe:	eb0c 0302 	add.w	r3, ip, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2800      	cmp	r0, #0
 8003406:	d1f4      	bne.n	80033f2 <RI_GetRegCommandParser+0x516>
 8003408:	e5d6      	b.n	8002fb8 <RI_GetRegCommandParser+0xdc>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 800340a:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <RI_GetRegCommandParser+0x5e4>)
 800340c:	681b      	ldr	r3, [r3, #0]
        if (freeSpace >= 2U)
 800340e:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003412:	f8d3 c000 	ldr.w	ip, [r3]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800341c:	f8c2 e008 	str.w	lr, [r2, #8]
 8003420:	f8c2 c000 	str.w	ip, [r2]
 8003424:	6051      	str	r1, [r2, #4]
 8003426:	899b      	ldrh	r3, [r3, #12]
 8003428:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 800342a:	2010      	movs	r0, #16
        *size = (*rawSize) + 2U;
 800342c:	4603      	mov	r3, r0
 800342e:	e5c9      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003430:	2001      	movs	r0, #1
 8003432:	46ac      	mov	ip, r5
  *size= 1U ; /* /0 is the min String size */
 8003434:	4603      	mov	r3, r0
 8003436:	e5c0      	b.n	8002fba <RI_GetRegCommandParser+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003438:	481b      	ldr	r0, [pc, #108]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 800343a:	f7fe fbf7 	bl	8001c2c <MCI_GetFaultState>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	2004      	movs	r0, #4
          *size = 4;
 8003442:	4603      	mov	r3, r0
 8003444:	e5be      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003446:	4818      	ldr	r0, [pc, #96]	; (80034a8 <RI_GetRegCommandParser+0x5cc>)
 8003448:	f7fe fc0e 	bl	8001c68 <MCI_GetMecSpeedRefUnit>
 800344c:	e631      	b.n	80030b2 <RI_GetRegCommandParser+0x1d6>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800344e:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003450:	293d      	cmp	r1, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003452:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003454:	f67f ad87 	bls.w	8002f66 <RI_GetRegCommandParser+0x8a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <RI_GetRegCommandParser+0x5e8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8003460:	f8d3 e000 	ldr.w	lr, [r3]
 8003464:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8003468:	6898      	ldr	r0, [r3, #8]
 800346a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800346e:	f8c2 a00c 	str.w	sl, [r2, #12]
 8003472:	3310      	adds	r3, #16
 8003474:	455b      	cmp	r3, fp
 8003476:	f8c2 e000 	str.w	lr, [r2]
 800347a:	f8c2 c004 	str.w	ip, [r2, #4]
 800347e:	6090      	str	r0, [r2, #8]
 8003480:	f102 0210 	add.w	r2, r2, #16
 8003484:	d1ec      	bne.n	8003460 <RI_GetRegCommandParser+0x584>
 8003486:	6818      	ldr	r0, [r3, #0]
        if (freeSpace >= 2U)
 8003488:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 8003492:	203e      	movs	r0, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 8003498:	4603      	mov	r3, r0
 800349a:	e593      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
 800349c:	20000344 	.word	0x20000344
 80034a0:	200000e0 	.word	0x200000e0
 80034a4:	20000200 	.word	0x20000200
 80034a8:	2000073c 	.word	0x2000073c
 80034ac:	20000350 	.word	0x20000350
 80034b0:	20000348 	.word	0x20000348
 80034b4:	20000340 	.word	0x20000340
 80034b8:	20000360 	.word	0x20000360
 80034bc:	08008fac 	.word	0x08008fac
 80034c0:	20000354 	.word	0x20000354
 80034c4:	2000035c 	.word	0x2000035c
            *rawSize = 4;
 80034c8:	2304      	movs	r3, #4
 80034ca:	802b      	strh	r3, [r5, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80034cc:	4844      	ldr	r0, [pc, #272]	; (80035e0 <RI_GetRegCommandParser+0x704>)
        if (freeSpace >= 2U)
 80034ce:	fa1f fa81 	uxth.w	sl, r1
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80034d2:	f7fe fbb7 	bl	8001c44 <MCI_GetLastRampFinalTorque>
 80034d6:	8068      	strh	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80034d8:	4841      	ldr	r0, [pc, #260]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 80034da:	f7fe fbb7 	bl	8001c4c <MCI_GetLastRampFinalDuration>
 80034de:	e618      	b.n	8003112 <RI_GetRegCommandParser+0x236>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80034e0:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 80034e2:	290f      	cmp	r1, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 80034e4:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80034e6:	f67f ad3e 	bls.w	8002f66 <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80034ea:	6833      	ldr	r3, [r6, #0]
        if (freeSpace >= 2U)
 80034ec:	fa1f fa81 	uxth.w	sl, r1
 80034f0:	e78f      	b.n	8003412 <RI_GetRegCommandParser+0x536>
  uint8_t retVal = MCP_CMD_NOK;
 80034f2:	2001      	movs	r0, #1
 80034f4:	e522      	b.n	8002f3c <RI_GetRegCommandParser+0x60>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80034f6:	483b      	ldr	r0, [pc, #236]	; (80035e4 <RI_GetRegCommandParser+0x708>)
 80034f8:	f004 fa76 	bl	80079e8 <PID_GetKP>
 80034fc:	8028      	strh	r0, [r5, #0]
 80034fe:	2002      	movs	r0, #2
          *size = 2;
 8003500:	4603      	mov	r3, r0
 8003502:	e55f      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003504:	4836      	ldr	r0, [pc, #216]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 8003506:	f7fe fbeb 	bl	8001ce0 <MCI_GetVqd>
 800350a:	9006      	str	r0, [sp, #24]
 800350c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003510:	8028      	strh	r0, [r5, #0]
 8003512:	2002      	movs	r0, #2
          *size = 2;
 8003514:	4603      	mov	r3, r0
 8003516:	e555      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003518:	4832      	ldr	r0, [pc, #200]	; (80035e4 <RI_GetRegCommandParser+0x708>)
 800351a:	f004 fa77 	bl	8007a0c <PID_GetKIDivisorPOW2>
 800351e:	8028      	strh	r0, [r5, #0]
 8003520:	2002      	movs	r0, #2
          *size = 2;
 8003522:	4603      	mov	r3, r0
 8003524:	e54e      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003526:	482e      	ldr	r0, [pc, #184]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 8003528:	f7fe fbbe 	bl	8001ca8 <MCI_GetIqd>
 800352c:	900b      	str	r0, [sp, #44]	; 0x2c
 800352e:	8028      	strh	r0, [r5, #0]
              break;
 8003530:	2002      	movs	r0, #2
          *size = 2;
 8003532:	4603      	mov	r3, r0
              break;
 8003534:	e546      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003536:	482a      	ldr	r0, [pc, #168]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 8003538:	f7fe fba8 	bl	8001c8c <MCI_GetIalphabeta>
 800353c:	900d      	str	r0, [sp, #52]	; 0x34
 800353e:	8028      	strh	r0, [r5, #0]
              break;
 8003540:	2002      	movs	r0, #2
          *size = 2;
 8003542:	4603      	mov	r3, r0
              break;
 8003544:	e53e      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <RI_GetRegCommandParser+0x70c>)
 8003548:	e644      	b.n	80031d4 <RI_GetRegCommandParser+0x2f8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <RI_GetRegCommandParser+0x710>)
 800354c:	e58c      	b.n	8003068 <RI_GetRegCommandParser+0x18c>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 800354e:	4828      	ldr	r0, [pc, #160]	; (80035f0 <RI_GetRegCommandParser+0x714>)
 8003550:	f005 fb52 	bl	8008bf8 <SPD_GetElAngle>
 8003554:	8028      	strh	r0, [r5, #0]
 8003556:	2002      	movs	r0, #2
          *size = 2;
 8003558:	4603      	mov	r3, r0
 800355a:	e533      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800355c:	4820      	ldr	r0, [pc, #128]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 800355e:	f7fe fbcd 	bl	8001cfc <MCI_GetValphabeta>
 8003562:	9004      	str	r0, [sp, #16]
 8003564:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003568:	8028      	strh	r0, [r5, #0]
 800356a:	2002      	movs	r0, #2
          *size = 2;
 800356c:	4603      	mov	r3, r0
 800356e:	e529      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <RI_GetRegCommandParser+0x70c>)
 8003572:	e6a5      	b.n	80032c0 <RI_GetRegCommandParser+0x3e4>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003574:	481a      	ldr	r0, [pc, #104]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 8003576:	f7fe fb7b 	bl	8001c70 <MCI_GetIab>
 800357a:	900f      	str	r0, [sp, #60]	; 0x3c
 800357c:	8028      	strh	r0, [r5, #0]
              break;
 800357e:	2002      	movs	r0, #2
          *size = 2;
 8003580:	4603      	mov	r3, r0
              break;
 8003582:	e51f      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003584:	4817      	ldr	r0, [pc, #92]	; (80035e4 <RI_GetRegCommandParser+0x708>)
 8003586:	f004 fa39 	bl	80079fc <PID_GetKPDivisorPOW2>
 800358a:	8028      	strh	r0, [r5, #0]
 800358c:	2002      	movs	r0, #2
          *size = 2;
 800358e:	4603      	mov	r3, r0
 8003590:	e518      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 8003594:	f7fe fb96 	bl	8001cc4 <MCI_GetIqdref>
 8003598:	9009      	str	r0, [sp, #36]	; 0x24
 800359a:	8028      	strh	r0, [r5, #0]
              break;
 800359c:	2002      	movs	r0, #2
          *size = 2;
 800359e:	4603      	mov	r3, r0
              break;
 80035a0:	e510      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80035a2:	4810      	ldr	r0, [pc, #64]	; (80035e4 <RI_GetRegCommandParser+0x708>)
 80035a4:	f004 fa4e 	bl	8007a44 <PID_GetKD>
 80035a8:	8028      	strh	r0, [r5, #0]
              break;
 80035aa:	2002      	movs	r0, #2
          *size = 2;
 80035ac:	4603      	mov	r3, r0
              break;
 80035ae:	e509      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <RI_GetRegCommandParser+0x710>)
 80035b2:	e6c2      	b.n	800333a <RI_GetRegCommandParser+0x45e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80035b4:	480f      	ldr	r0, [pc, #60]	; (80035f4 <RI_GetRegCommandParser+0x718>)
 80035b6:	f003 ff57 	bl	8007468 <VBS_GetAvBusVoltage_V>
 80035ba:	8028      	strh	r0, [r5, #0]
              break;
 80035bc:	2002      	movs	r0, #2
          *size = 2;
 80035be:	4603      	mov	r3, r0
              break;
 80035c0:	e500      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80035c2:	4807      	ldr	r0, [pc, #28]	; (80035e0 <RI_GetRegCommandParser+0x704>)
 80035c4:	f7fe fb7e 	bl	8001cc4 <MCI_GetIqdref>
 80035c8:	9008      	str	r0, [sp, #32]
 80035ca:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80035ce:	8028      	strh	r0, [r5, #0]
 80035d0:	2002      	movs	r0, #2
          *size = 2;
 80035d2:	4603      	mov	r3, r0
 80035d4:	e4f6      	b.n	8002fc4 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <RI_GetRegCommandParser+0x710>)
 80035d8:	e69e      	b.n	8003318 <RI_GetRegCommandParser+0x43c>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <RI_GetRegCommandParser+0x710>)
 80035dc:	e5da      	b.n	8003194 <RI_GetRegCommandParser+0x2b8>
 80035de:	bf00      	nop
 80035e0:	2000073c 	.word	0x2000073c
 80035e4:	20000200 	.word	0x20000200
 80035e8:	20000348 	.word	0x20000348
 80035ec:	20000344 	.word	0x20000344
 80035f0:	200000e0 	.word	0x200000e0
 80035f4:	20000000 	.word	0x20000000

080035f8 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80035f8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80035fc:	3808      	subs	r0, #8
 80035fe:	b2c0      	uxtb	r0, r0
 8003600:	2810      	cmp	r0, #16
 8003602:	bf9a      	itte	ls
 8003604:	4b01      	ldrls	r3, [pc, #4]	; (800360c <RI_GetIDSize+0x14>)
 8003606:	5c18      	ldrbls	r0, [r3, r0]
 8003608:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800360a:	4770      	bx	lr
 800360c:	08009108 	.word	0x08009108

08003610 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003610:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003614:	2b10      	cmp	r3, #16
 8003616:	d003      	beq.n	8003620 <RI_GetPtrReg+0x10>
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <RI_GetPtrReg+0x110>)
 800361a:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800361c:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 800361e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003620:	f020 0007 	bic.w	r0, r0, #7
 8003624:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8003628:	b283      	uxth	r3, r0
 800362a:	d050      	beq.n	80036ce <RI_GetPtrReg+0xbe>
 800362c:	d80f      	bhi.n	800364e <RI_GetPtrReg+0x3e>
 800362e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003632:	d052      	beq.n	80036da <RI_GetPtrReg+0xca>
 8003634:	d922      	bls.n	800367c <RI_GetPtrReg+0x6c>
 8003636:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800363a:	d054      	beq.n	80036e6 <RI_GetPtrReg+0xd6>
 800363c:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003640:	d113      	bne.n	800366a <RI_GetPtrReg+0x5a>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <RI_GetPtrReg+0x114>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 8003648:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800364a:	600b      	str	r3, [r1, #0]
            break;
 800364c:	4770      	bx	lr
 800364e:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003652:	d04e      	beq.n	80036f2 <RI_GetPtrReg+0xe2>
 8003654:	d91e      	bls.n	8003694 <RI_GetPtrReg+0x84>
 8003656:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 800365a:	d05c      	beq.n	8003716 <RI_GetPtrReg+0x106>
 800365c:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8003660:	d1da      	bne.n	8003618 <RI_GetPtrReg+0x8>
            *dataPtr = &(pHallSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <RI_GetPtrReg+0x118>)
 8003664:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003666:	2000      	movs	r0, #0
            break;
 8003668:	4770      	bx	lr
 800366a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800366e:	d1d3      	bne.n	8003618 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <RI_GetPtrReg+0x114>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 8003676:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003678:	600b      	str	r3, [r1, #0]
            break;
 800367a:	4770      	bx	lr
 800367c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003680:	d03d      	beq.n	80036fe <RI_GetPtrReg+0xee>
 8003682:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003686:	d111      	bne.n	80036ac <RI_GetPtrReg+0x9c>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <RI_GetPtrReg+0x114>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 800368e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003690:	600b      	str	r3, [r1, #0]
            break;
 8003692:	4770      	bx	lr
 8003694:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003698:	d037      	beq.n	800370a <RI_GetPtrReg+0xfa>
 800369a:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800369e:	d10d      	bne.n	80036bc <RI_GetPtrReg+0xac>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <RI_GetPtrReg+0x114>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 80036a6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80036a8:	600b      	str	r3, [r1, #0]
            break;
 80036aa:	4770      	bx	lr
 80036ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036b0:	d1b2      	bne.n	8003618 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <RI_GetPtrReg+0x114>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80036b8:	2000      	movs	r0, #0
             break;
 80036ba:	4770      	bx	lr
 80036bc:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80036c0:	d1aa      	bne.n	8003618 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <RI_GetPtrReg+0x114>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 80036c8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80036ca:	600b      	str	r3, [r1, #0]
            break;
 80036cc:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <RI_GetPtrReg+0x114>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 80036d4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80036d6:	600b      	str	r3, [r1, #0]
            break;
 80036d8:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <RI_GetPtrReg+0x114>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 80036e0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80036e2:	600b      	str	r3, [r1, #0]
            break;
 80036e4:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <RI_GetPtrReg+0x114>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 80036ec:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80036ee:	600b      	str	r3, [r1, #0]
            break;
 80036f0:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <RI_GetPtrReg+0x114>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 80036f8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80036fa:	600b      	str	r3, [r1, #0]
            break;
 80036fc:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <RI_GetPtrReg+0x114>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8003704:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003706:	600b      	str	r3, [r1, #0]
            break;
 8003708:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <RI_GetPtrReg+0x114>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 8003710:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003712:	600b      	str	r3, [r1, #0]
            break;
 8003714:	4770      	bx	lr
            *dataPtr = &(pHallSensor[vmotorID]->_Super.hElAngle);
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <RI_GetPtrReg+0x11c>)
 8003718:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800371a:	2000      	movs	r0, #0
            break;
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000192c 	.word	0x2000192c
 8003724:	2000073c 	.word	0x2000073c
 8003728:	200000ec 	.word	0x200000ec
 800372c:	200000e4 	.word	0x200000e4

08003730 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003730:	4a6f      	ldr	r2, [pc, #444]	; (80038f0 <RCM_RegisterRegConv+0x1c0>)
{
 8003732:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003734:	6814      	ldr	r4, [r2, #0]
{
 8003736:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003738:	2c00      	cmp	r4, #0
 800373a:	f000 8088 	beq.w	800384e <RCM_RegisterRegConv+0x11e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800373e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003742:	7923      	ldrb	r3, [r4, #4]
 8003744:	459c      	cmp	ip, r3
 8003746:	d01f      	beq.n	8003788 <RCM_RegisterRegConv+0x58>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003748:	6853      	ldr	r3, [r2, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8097 	beq.w	800387e <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003750:	791c      	ldrb	r4, [r3, #4]
 8003752:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8003754:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003758:	f000 8083 	beq.w	8003862 <RCM_RegisterRegConv+0x132>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800375c:	6894      	ldr	r4, [r2, #8]
 800375e:	2c00      	cmp	r4, #0
 8003760:	f000 80ad 	beq.w	80038be <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003764:	7923      	ldrb	r3, [r4, #4]
 8003766:	4563      	cmp	r3, ip
 8003768:	f000 8082 	beq.w	8003870 <RCM_RegisterRegConv+0x140>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800376c:	68d3      	ldr	r3, [r2, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80ae 	beq.w	80038d0 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003774:	791c      	ldrb	r4, [r3, #4]
 8003776:	4564      	cmp	r4, ip
 8003778:	f000 808c 	beq.w	8003894 <RCM_RegisterRegConv+0x164>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 800377c:	2803      	cmp	r0, #3
 800377e:	bf88      	it	hi
 8003780:	20ff      	movhi	r0, #255	; 0xff
 8003782:	f240 80b1 	bls.w	80038e8 <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003786:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003788:	6803      	ldr	r3, [r0, #0]
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	4283      	cmp	r3, r0
 800378e:	d1db      	bne.n	8003748 <RCM_RegisterRegConv+0x18>
    uint8_t i = 0;
 8003790:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003792:	4c58      	ldr	r4, [pc, #352]	; (80038f4 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 8003794:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003798:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800379a:	2500      	movs	r5, #0
 800379c:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80037a0:	07d5      	lsls	r5, r2, #31
 80037a2:	d422      	bmi.n	80037ea <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80037a4:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80037a6:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80037a8:	f022 0204 	bic.w	r2, r2, #4
 80037ac:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80037ae:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80037b0:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80037b2:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80037b4:	f022 0220 	bic.w	r2, r2, #32
 80037b8:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80037ba:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80037c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80037c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037ca:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	dbfc      	blt.n	80037cc <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80037d2:	681a      	ldr	r2, [r3, #0]
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 80037d4:	07d4      	lsls	r4, r2, #31
 80037d6:	d408      	bmi.n	80037ea <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 80037d8:	4c47      	ldr	r4, [pc, #284]	; (80038f8 <RCM_RegisterRegConv+0x1c8>)
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4022      	ands	r2, r4
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	07d2      	lsls	r2, r2, #31
 80037e8:	d5f7      	bpl.n	80037da <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array[handle].enable = false;
 80037ea:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80037ee:	4c43      	ldr	r4, [pc, #268]	; (80038fc <RCM_RegisterRegConv+0x1cc>)
 80037f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80037f4:	2200      	movs	r2, #0
 80037f6:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array[handle].prev = handle;
 80037fa:	4464      	add	r4, ip
 80037fc:	f360 0207 	bfi	r2, r0, #0, #8
 8003800:	f360 220f 	bfi	r2, r0, #8, #8
 8003804:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003808:	f022 020f 	bic.w	r2, r2, #15
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800380e:	790c      	ldrb	r4, [r1, #4]
 8003810:	2c09      	cmp	r4, #9
 8003812:	d846      	bhi.n	80038a2 <RCM_RegisterRegConv+0x172>
 8003814:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003818:	06a2      	lsls	r2, r4, #26
 800381a:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800381e:	2501      	movs	r5, #1
 8003820:	fa05 f404 	lsl.w	r4, r5, r4
 8003824:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003826:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 8003828:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800382a:	f004 0404 	and.w	r4, r4, #4
 800382e:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003830:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003834:	fa01 fc02 	lsl.w	ip, r1, r2
 8003838:	f04f 0e07 	mov.w	lr, #7
 800383c:	58e1      	ldr	r1, [r4, r3]
 800383e:	fa0e f202 	lsl.w	r2, lr, r2
 8003842:	ea21 0202 	bic.w	r2, r1, r2
 8003846:	ea42 020c 	orr.w	r2, r2, ip
 800384a:	50e2      	str	r2, [r4, r3]
}
 800384c:	bd30      	pop	{r4, r5, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800384e:	6853      	ldr	r3, [r2, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d041      	beq.n	80038d8 <RCM_RegisterRegConv+0x1a8>
 8003854:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003858:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800385a:	791c      	ldrb	r4, [r3, #4]
 800385c:	4564      	cmp	r4, ip
 800385e:	f47f af7d 	bne.w	800375c <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003862:	681c      	ldr	r4, [r3, #0]
 8003864:	680b      	ldr	r3, [r1, #0]
 8003866:	429c      	cmp	r4, r3
 8003868:	f47f af78 	bne.w	800375c <RCM_RegisterRegConv+0x2c>
      i++;
 800386c:	2001      	movs	r0, #1
 800386e:	e790      	b.n	8003792 <RCM_RegisterRegConv+0x62>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003870:	6824      	ldr	r4, [r4, #0]
 8003872:	680b      	ldr	r3, [r1, #0]
 8003874:	429c      	cmp	r4, r3
 8003876:	f47f af79 	bne.w	800376c <RCM_RegisterRegConv+0x3c>
      i++;
 800387a:	2002      	movs	r0, #2
 800387c:	e789      	b.n	8003792 <RCM_RegisterRegConv+0x62>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800387e:	6894      	ldr	r4, [r2, #8]
      i++;
 8003880:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003882:	2c00      	cmp	r4, #0
 8003884:	f47f af6e 	bne.w	8003764 <RCM_RegisterRegConv+0x34>
 8003888:	68d3      	ldr	r3, [r2, #12]
 800388a:	b36b      	cbz	r3, 80038e8 <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800388c:	791d      	ldrb	r5, [r3, #4]
 800388e:	790c      	ldrb	r4, [r1, #4]
 8003890:	42a5      	cmp	r5, r4
 8003892:	d129      	bne.n	80038e8 <RCM_RegisterRegConv+0x1b8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003894:	681c      	ldr	r4, [r3, #0]
 8003896:	680b      	ldr	r3, [r1, #0]
 8003898:	429c      	cmp	r4, r3
 800389a:	f47f af6f 	bne.w	800377c <RCM_RegisterRegConv+0x4c>
      i++;
 800389e:	2003      	movs	r0, #3
 80038a0:	e777      	b.n	8003792 <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80038a2:	2203      	movs	r2, #3
 80038a4:	f06f 051d 	mvn.w	r5, #29
 80038a8:	fb12 5504 	smlabb	r5, r2, r4, r5
 80038ac:	2201      	movs	r2, #1
 80038ae:	40a2      	lsls	r2, r4
 80038b0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80038b4:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80038b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80038bc:	e7b3      	b.n	8003826 <RCM_RegisterRegConv+0xf6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038be:	2804      	cmp	r0, #4
 80038c0:	d910      	bls.n	80038e4 <RCM_RegisterRegConv+0x1b4>
 80038c2:	68d3      	ldr	r3, [r2, #12]
 80038c4:	b113      	cbz	r3, 80038cc <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80038c6:	7918      	ldrb	r0, [r3, #4]
 80038c8:	4584      	cmp	ip, r0
 80038ca:	d00f      	beq.n	80038ec <RCM_RegisterRegConv+0x1bc>
 80038cc:	680b      	ldr	r3, [r1, #0]
 80038ce:	e7d4      	b.n	800387a <RCM_RegisterRegConv+0x14a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038d0:	2804      	cmp	r0, #4
 80038d2:	680b      	ldr	r3, [r1, #0]
 80038d4:	d8e3      	bhi.n	800389e <RCM_RegisterRegConv+0x16e>
 80038d6:	e75c      	b.n	8003792 <RCM_RegisterRegConv+0x62>
 80038d8:	6894      	ldr	r4, [r2, #8]
 80038da:	b11c      	cbz	r4, 80038e4 <RCM_RegisterRegConv+0x1b4>
 80038dc:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 80038e0:	4618      	mov	r0, r3
 80038e2:	e73f      	b.n	8003764 <RCM_RegisterRegConv+0x34>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038e4:	4620      	mov	r0, r4
 80038e6:	e7cf      	b.n	8003888 <RCM_RegisterRegConv+0x158>
 80038e8:	680b      	ldr	r3, [r1, #0]
 80038ea:	e752      	b.n	8003792 <RCM_RegisterRegConv+0x62>
      i++;
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7d1      	b.n	8003894 <RCM_RegisterRegConv+0x164>
 80038f0:	20001970 	.word	0x20001970
 80038f4:	20001930 	.word	0x20001930
 80038f8:	7fffffc0 	.word	0x7fffffc0
 80038fc:	20001950 	.word	0x20001950

08003900 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003900:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <RCM_ExecRegularConv+0x17c>)
 8003902:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003906:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8003908:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800390c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8003910:	2a00      	cmp	r2, #0
 8003912:	d13c      	bne.n	800398e <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003914:	7819      	ldrb	r1, [r3, #0]
 8003916:	b9a9      	cbnz	r1, 8003944 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003918:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 800391a:	7999      	ldrb	r1, [r3, #6]
 800391c:	2900      	cmp	r1, #0
 800391e:	d07e      	beq.n	8003a1e <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003920:	7ad9      	ldrb	r1, [r3, #11]
 8003922:	4288      	cmp	r0, r1
 8003924:	f0c0 809a 	bcc.w	8003a5c <RCM_ExecRegularConv+0x15c>
      if (true == RCM_NoInj_array [i].enable)
 8003928:	7b1a      	ldrb	r2, [r3, #12]
 800392a:	2a00      	cmp	r2, #0
 800392c:	f000 8099 	beq.w	8003a62 <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array[i].next > handle)
 8003930:	7c59      	ldrb	r1, [r3, #17]
 8003932:	4288      	cmp	r0, r1
 8003934:	f0c0 809f 	bcc.w	8003a76 <RCM_ExecRegularConv+0x176>
      if (true == RCM_NoInj_array [i].enable)
 8003938:	7c9a      	ldrb	r2, [r3, #18]
 800393a:	2a00      	cmp	r2, #0
 800393c:	f040 8095 	bne.w	8003a6a <RCM_ExecRegularConv+0x16a>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8003940:	2202      	movs	r2, #2
 8003942:	e073      	b.n	8003a2c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003944:	7959      	ldrb	r1, [r3, #5]
 8003946:	4281      	cmp	r1, r0
 8003948:	d9e7      	bls.n	800391a <RCM_ExecRegularConv+0x1a>
      if (true == RCM_NoInj_array [i].enable)
 800394a:	4696      	mov	lr, r2
          RCM_NoInj_array[handle].next = formerNext;
 800394c:	eb0c 0400 	add.w	r4, ip, r0
 8003950:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003954:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003958:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 800395a:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800395c:	4c48      	ldr	r4, [pc, #288]	; (8003a80 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 800395e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003962:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003966:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800396a:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 800396c:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003970:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array[handle].enable = true;
 8003972:	eb0c 0100 	add.w	r1, ip, r0
 8003976:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800397a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 800397e:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003982:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003986:	7852      	ldrb	r2, [r2, #1]
 8003988:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800398a:	bf18      	it	ne
 800398c:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800398e:	4a3d      	ldr	r2, [pc, #244]	; (8003a84 <RCM_ExecRegularConv+0x184>)
 8003990:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8003994:	2a00      	cmp	r2, #0
 8003996:	d132      	bne.n	80039fe <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003998:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <RCM_ExecRegularConv+0x188>)
 800399a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800399e:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039a0:	6811      	ldr	r1, [r2, #0]
 80039a2:	2c09      	cmp	r4, #9
 80039a4:	d930      	bls.n	8003a08 <RCM_ExecRegularConv+0x108>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80039a6:	2203      	movs	r2, #3
 80039a8:	f06f 0e1d 	mvn.w	lr, #29
 80039ac:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80039b0:	2201      	movs	r2, #1
 80039b2:	40a2      	lsls	r2, r4
 80039b4:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80039b8:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80039c0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80039c2:	0d12      	lsrs	r2, r2, #20
 80039c4:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80039c8:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 80039cc:	4322      	orrs	r2, r4
 80039ce:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80039d0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80039d2:	688a      	ldr	r2, [r1, #8]
 80039d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80039dc:	f042 0204 	orr.w	r2, r2, #4
 80039e0:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80039e2:	680a      	ldr	r2, [r1, #0]
 80039e4:	0752      	lsls	r2, r2, #29
 80039e6:	d5fc      	bpl.n	80039e2 <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80039e8:	eb0c 0200 	add.w	r2, ip, r0
 80039ec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80039f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039f2:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80039f4:	4922      	ldr	r1, [pc, #136]	; (8003a80 <RCM_ExecRegularConv+0x180>)
 80039f6:	7954      	ldrb	r4, [r2, #5]
 80039f8:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 80039fa:	2102      	movs	r1, #2
 80039fc:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80039fe:	4460      	add	r0, ip
 8003a00:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  return retVal;
}
 8003a04:	8858      	ldrh	r0, [r3, #2]
 8003a06:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003a08:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003a0c:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003a0e:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003a12:	f04f 0e01 	mov.w	lr, #1
 8003a16:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003a1a:	4322      	orrs	r2, r4
 8003a1c:	e7d0      	b.n	80039c0 <RCM_ExecRegularConv+0xc0>
      if (true == RCM_NoInj_array [i].enable)
 8003a1e:	7b19      	ldrb	r1, [r3, #12]
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d185      	bne.n	8003930 <RCM_ExecRegularConv+0x30>
 8003a24:	7c99      	ldrb	r1, [r3, #18]
 8003a26:	bb01      	cbnz	r1, 8003a6a <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 8003a28:	2a04      	cmp	r2, #4
 8003a2a:	d013      	beq.n	8003a54 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a2c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003a30:	eb0c 0400 	add.w	r4, ip, r0
 8003a34:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a38:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003a3c:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a3e:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003a40:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003a42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003a46:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003a4a:	4c0d      	ldr	r4, [pc, #52]	; (8003a80 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003a4c:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003a4e:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003a50:	7822      	ldrb	r2, [r4, #0]
 8003a52:	e78e      	b.n	8003972 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8003a54:	4c0a      	ldr	r4, [pc, #40]	; (8003a80 <RCM_ExecRegularConv+0x180>)
 8003a56:	4602      	mov	r2, r0
 8003a58:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003a5a:	e78a      	b.n	8003972 <RCM_ExecRegularConv+0x72>
      i++;
 8003a5c:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 8003a5e:	4696      	mov	lr, r2
 8003a60:	e774      	b.n	800394c <RCM_ExecRegularConv+0x4c>
 8003a62:	7c9a      	ldrb	r2, [r3, #18]
 8003a64:	b90a      	cbnz	r2, 8003a6a <RCM_ExecRegularConv+0x16a>
      i++;
 8003a66:	2201      	movs	r2, #1
 8003a68:	e7e0      	b.n	8003a2c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003a6a:	7dd9      	ldrb	r1, [r3, #23]
 8003a6c:	4281      	cmp	r1, r0
      i++;
 8003a6e:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 8003a72:	d9db      	bls.n	8003a2c <RCM_ExecRegularConv+0x12c>
 8003a74:	e769      	b.n	800394a <RCM_ExecRegularConv+0x4a>
      i++;
 8003a76:	2202      	movs	r2, #2
 8003a78:	e767      	b.n	800394a <RCM_ExecRegularConv+0x4a>
 8003a7a:	bf00      	nop
 8003a7c:	20001950 	.word	0x20001950
 8003a80:	2000196c 	.word	0x2000196c
 8003a84:	2000023c 	.word	0x2000023c
 8003a88:	20001970 	.word	0x20001970

08003a8c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003a8e:	4c12      	ldr	r4, [pc, #72]	; (8003ad8 <RCM_ExecUserConv+0x4c>)
 8003a90:	7823      	ldrb	r3, [r4, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d000      	beq.n	8003a98 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <RCM_ExecUserConv+0x50>)
 8003a9a:	781d      	ldrb	r5, [r3, #0]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7ff ff2f 	bl	8003900 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <RCM_ExecUserConv+0x54>)
 8003aa4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003aa8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003aae:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003ab0:	8010      	strh	r0, [r2, #0]
 8003ab2:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003ab4:	b10b      	cbz	r3, 8003aba <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <RCM_ExecUserConv+0x5c>)
 8003abc:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 8003ac0:	2e00      	cmp	r6, #0
 8003ac2:	d0e8      	beq.n	8003a96 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003ac4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003ac8:	4628      	mov	r0, r5
 8003aca:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003ad0:	4633      	mov	r3, r6
}
 8003ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003ad6:	4718      	bx	r3
 8003ad8:	20001969 	.word	0x20001969
 8003adc:	20001968 	.word	0x20001968
 8003ae0:	20001950 	.word	0x20001950
 8003ae4:	2000196a 	.word	0x2000196a
 8003ae8:	20001930 	.word	0x20001930

08003aec <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <RCM_ExecNextConv+0x94>)
 8003aee:	4825      	ldr	r0, [pc, #148]	; (8003b84 <RCM_ExecNextConv+0x98>)
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003af6:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8003afa:	b3a3      	cbz	r3, 8003b66 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <RCM_ExecNextConv+0x9c>)
{
 8003afe:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b04:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003b06:	2404      	movs	r4, #4
 8003b08:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b0a:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b0e:	f1bc 0f09 	cmp.w	ip, #9
 8003b12:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003b16:	d927      	bls.n	8003b68 <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f06f 041d 	mvn.w	r4, #29
 8003b1e:	fb13 440c 	smlabb	r4, r3, ip, r4
 8003b22:	2301      	movs	r3, #1
 8003b24:	fa03 f30c 	lsl.w	r3, r3, ip
 8003b28:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003b2c:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003b34:	4472      	add	r2, lr
 8003b36:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  MODIFY_REG(*preg,
 8003b3a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b42:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8003b46:	4313      	orrs	r3, r2
 8003b48:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003b4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003b4c:	688b      	ldr	r3, [r1, #8]
 8003b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b56:	f04f 0c01 	mov.w	ip, #1
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	608b      	str	r3, [r1, #8]
 8003b60:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b68:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003b6c:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b70:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b74:	2401      	movs	r4, #1
 8003b76:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b7a:	ea43 030c 	orr.w	r3, r3, ip
 8003b7e:	e7d9      	b.n	8003b34 <RCM_ExecNextConv+0x48>
 8003b80:	2000196c 	.word	0x2000196c
 8003b84:	20001950 	.word	0x20001950
 8003b88:	20001970 	.word	0x20001970

08003b8c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003b8c:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003b8e:	4814      	ldr	r0, [pc, #80]	; (8003be0 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003b92:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003b94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b98:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003ba0:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <RCM_ReadOngoingConv+0x5c>)
 8003ba6:	d008      	beq.n	8003bba <RCM_ReadOngoingConv+0x2e>
 8003ba8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003bac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003bb0:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003bb4:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 8003bb8:	d105      	bne.n	8003bc6 <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003bba:	440b      	add	r3, r1
 8003bbc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003bc0:	7953      	ldrb	r3, [r2, #5]
 8003bc2:	7003      	strb	r3, [r0, #0]
}
 8003bc4:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003bc6:	440b      	add	r3, r1
 8003bc8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003bcc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8003bce:	7953      	ldrb	r3, [r2, #5]
 8003bd0:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003bd4:	2402      	movs	r4, #2
 8003bd6:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003bda:	7003      	strb	r3, [r0, #0]
}
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	bf00      	nop
 8003be0:	2000196c 	.word	0x2000196c
 8003be4:	20001970 	.word	0x20001970
 8003be8:	20001950 	.word	0x20001950

08003bec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_MspInit+0x3c>)
{
 8003bee:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60
 8003bf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003bfa:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfc:	f002 0201 	and.w	r2, r2, #1
 8003c00:	9200      	str	r2, [sp, #0]
 8003c02:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003c14:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003c18:	f001 faaa 	bl	8005170 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c1c:	b003      	add	sp, #12
 8003c1e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003c22:	f001 bd35 	b.w	8005690 <HAL_PWREx_DisableUCPDDeadBattery>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000

08003c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4604      	mov	r4, r0
 8003c30:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c32:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c34:	2244      	movs	r2, #68	; 0x44
 8003c36:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003c3c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003c40:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c42:	f005 f90f 	bl	8008e64 <memset>
  if(hadc->Instance==ADC1)
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003c4e:	4a44      	ldr	r2, [pc, #272]	; (8003d60 <HAL_ADC_MspInit+0x134>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d046      	beq.n	8003ce2 <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003c54:	b01c      	add	sp, #112	; 0x70
 8003c56:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003c58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003c5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c60:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003c62:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003c64:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c66:	f002 f8e3 	bl	8005e30 <HAL_RCCEx_PeriphCLKConfig>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d171      	bne.n	8003d52 <HAL_ADC_MspInit+0x126>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c6e:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <HAL_ADC_MspInit+0x138>)
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c74:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c78:	d109      	bne.n	8003c8e <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_ADC_MspInit+0x13c>)
 8003c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c82:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_ADC_MspInit+0x13c>)
 8003c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c9a:	f002 0201 	and.w	r2, r2, #1
 8003c9e:	9201      	str	r2, [sp, #4]
 8003ca0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca4:	f042 0202 	orr.w	r2, r2, #2
 8003ca8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cbc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc0:	a906      	add	r1, sp, #24
 8003cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8003cc6:	f001 fb67 	bl	8005398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cce:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	4826      	ldr	r0, [pc, #152]	; (8003d6c <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003cd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003cda:	f001 fb5d 	bl	8005398 <HAL_GPIO_Init>
}
 8003cde:	b01c      	add	sp, #112	; 0x70
 8003ce0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ce2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cea:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003cec:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003cee:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cf0:	f002 f89e 	bl	8005e30 <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d12f      	bne.n	8003d58 <HAL_ADC_MspInit+0x12c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_ADC_MspInit+0x138>)
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003cfe:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003d00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003d02:	d109      	bne.n	8003d18 <HAL_ADC_MspInit+0xec>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_ADC_MspInit+0x13c>)
 8003d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	9303      	str	r3, [sp, #12]
 8003d16:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_ADC_MspInit+0x13c>)
 8003d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d24:	f002 0201 	and.w	r2, r2, #1
 8003d28:	9204      	str	r2, [sp, #16]
 8003d2a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d2e:	f042 0202 	orr.w	r2, r2, #2
 8003d32:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d48:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 8003d4a:	a906      	add	r1, sp, #24
 8003d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d50:	e7b9      	b.n	8003cc6 <HAL_ADC_MspInit+0x9a>
      Error_Handler();
 8003d52:	f7fd fe81 	bl	8001a58 <Error_Handler>
 8003d56:	e78a      	b.n	8003c6e <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003d58:	f7fd fe7e 	bl	8001a58 <Error_Handler>
 8003d5c:	e7cc      	b.n	8003cf8 <HAL_ADC_MspInit+0xcc>
 8003d5e:	bf00      	nop
 8003d60:	50000100 	.word	0x50000100
 8003d64:	20001980 	.word	0x20001980
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	48000400 	.word	0x48000400

08003d70 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_CORDIC_MspInit+0x2c>)
 8003d72:	6802      	ldr	r2, [r0, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d000      	beq.n	8003d7a <HAL_CORDIC_MspInit+0xa>
 8003d78:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003d7a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003d7e:	f042 0208 	orr.w	r2, r2, #8
 8003d82:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003d8a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003d96:	b002      	add	sp, #8
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40020c00 	.word	0x40020c00

08003da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003da0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003da2:	6802      	ldr	r2, [r0, #0]
 8003da4:	492c      	ldr	r1, [pc, #176]	; (8003e58 <HAL_TIM_Base_MspInit+0xb8>)
{
 8003da6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003daa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003db0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003db4:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_TIM_Base_MspInit+0xbc>)
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d025      	beq.n	8003e0a <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003dbe:	b00a      	add	sp, #40	; 0x28
 8003dc0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dc6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003dca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8003e50 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003dd0:	4823      	ldr	r0, [pc, #140]	; (8003e60 <HAL_TIM_Base_MspInit+0xc0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
 8003dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003dde:	9200      	str	r2, [sp, #0]
 8003de0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003de4:	f042 0202 	orr.w	r2, r2, #2
 8003de8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df2:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003df4:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003df6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003df8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfc:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dfe:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e00:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003e02:	f001 fac9 	bl	8005398 <HAL_GPIO_Init>
}
 8003e06:	b00a      	add	sp, #40	; 0x28
 8003e08:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e0a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e0e:	2402      	movs	r4, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e12:	4814      	ldr	r0, [pc, #80]	; (8003e64 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e14:	4322      	orrs	r2, r4
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
 8003e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e1a:	4022      	ands	r2, r4
 8003e1c:	9202      	str	r2, [sp, #8]
 8003e1e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e22:	f042 0204 	orr.w	r2, r2, #4
 8003e26:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e2a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8003e32:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e36:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e3e:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e40:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e42:	f001 faa9 	bl	8005398 <HAL_GPIO_Init>
}
 8003e46:	b00a      	add	sp, #40	; 0x28
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w
 8003e50:	00001000 	.word	0x00001000
 8003e54:	00000012 	.word	0x00000012
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	48000400 	.word	0x48000400
 8003e64:	48000800 	.word	0x48000800

08003e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e68:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_TIM_MspPostInit+0x70>)
 8003e6c:	6801      	ldr	r1, [r0, #0]
{
 8003e6e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003e72:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e7c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003e7e:	d002      	beq.n	8003e86 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e80:	b009      	add	sp, #36	; 0x24
 8003e82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003e8e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8003ec8 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003e9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ea0:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8003ed0 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003eac:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003eb2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003eb8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eba:	f001 fa6d 	bl	8005398 <HAL_GPIO_Init>
}
 8003ebe:	b009      	add	sp, #36	; 0x24
 8003ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	00000700 	.word	0x00000700
 8003ecc:	00000002 	.word	0x00000002
 8003ed0:	00000002 	.word	0x00000002
 8003ed4:	00000002 	.word	0x00000002
 8003ed8:	40012c00 	.word	0x40012c00

08003edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ee4:	2244      	movs	r2, #68	; 0x44
 8003ee6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003eec:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003ef0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ef2:	f004 ffb7 	bl	8008e64 <memset>
  if(huart->Instance==USART2)
 8003ef6:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_UART_MspInit+0xe0>)
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003efe:	b018      	add	sp, #96	; 0x60
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f02:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f04:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f06:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f08:	f001 ff92 	bl	8005e30 <HAL_RCCEx_PeriphCLKConfig>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d14c      	bne.n	8003faa <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003f12:	4e2c      	ldr	r6, [pc, #176]	; (8003fc4 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f1e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003f22:	9200      	str	r2, [sp, #0]
 8003f24:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003f36:	220c      	movs	r2, #12
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f3e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f48:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f4a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f50:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	f001 fa21 	bl	8005398 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003f56:	491c      	ldr	r1, [pc, #112]	; (8003fc8 <HAL_UART_MspInit+0xec>)
 8003f58:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f5a:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003f5c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f60:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f62:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f64:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f68:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003f6c:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f70:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f72:	f001 f97b 	bl	800526c <HAL_DMA_Init>
 8003f76:	b9f0      	cbnz	r0, 8003fb6 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003f78:	4d14      	ldr	r5, [pc, #80]	; (8003fcc <HAL_UART_MspInit+0xf0>)
 8003f7a:	4915      	ldr	r1, [pc, #84]	; (8003fd0 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f7c:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003f7e:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f80:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003f82:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f86:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f88:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f8a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f8c:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f90:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f94:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f98:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f9a:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f9c:	f001 f966 	bl	800526c <HAL_DMA_Init>
 8003fa0:	b930      	cbnz	r0, 8003fb0 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003fa2:	67a5      	str	r5, [r4, #120]	; 0x78
 8003fa4:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8003fa6:	b018      	add	sp, #96	; 0x60
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003faa:	f7fd fd55 	bl	8001a58 <Error_Handler>
 8003fae:	e7af      	b.n	8003f10 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8003fb0:	f7fd fd52 	bl	8001a58 <Error_Handler>
 8003fb4:	e7f5      	b.n	8003fa2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8003fb6:	f7fd fd4f 	bl	8001a58 <Error_Handler>
 8003fba:	e7dd      	b.n	8003f78 <HAL_UART_MspInit+0x9c>
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	20000554 	.word	0x20000554
 8003fc8:	40020008 	.word	0x40020008
 8003fcc:	200005b4 	.word	0x200005b4
 8003fd0:	4002001c 	.word	0x4002001c

08003fd4 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();		// execute high frequency task (FOC control)
 8003fdc:	f7fe b974 	b.w	80022c8 <TSK_HighFrequencyTask>

08003fe0 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003fe2:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003fe4:	f06f 0201 	mvn.w	r2, #1
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	f004 bb9f 	b.w	800872c <R3_2_TIMx_UP_IRQHandler>
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	2000023c 	.word	0x2000023c

08003ff8 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003ff8:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	0611      	lsls	r1, r2, #24
 8004000:	d505      	bpl.n	800400e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004002:	f06f 0280 	mvn.w	r2, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8004006:	480a      	ldr	r0, [pc, #40]	; (8004030 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	f004 fbfb 	bl	8008804 <R3_2_BRK_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	05d2      	lsls	r2, r2, #23
 8004014:	d505      	bpl.n	8004022 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004016:	f46f 7280 	mvn.w	r2, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 800401a:	4805      	ldr	r0, [pc, #20]	; (8004030 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	f004 fbcd 	bl	80087bc <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004026:	f7fe b909 	b.w	800223c <MC_Scheduler>
 800402a:	bf00      	nop
 800402c:	40012c00 	.word	0x40012c00
 8004030:	2000023c 	.word	0x2000023c

08004034 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
	// Timer 3
void SPD_TIM_M1_IRQHandler(void)				// up-event is need to be recorded for modifying the pre_scaler
{
 8004034:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (0U == LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <TIM3_IRQHandler+0x34>)
 8004038:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	07d1      	lsls	r1, r2, #31
 800403e:	d40b      	bmi.n	8004058 <TIM3_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	0792      	lsls	r2, r2, #30
 8004044:	d507      	bpl.n	8004056 <TIM3_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004046:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800404a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)HALL_TIMx_CC_IRQHandler(&HALL_M1);
 800404e:	4806      	ldr	r0, [pc, #24]	; (8004068 <TIM3_IRQHandler+0x34>)
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	f7fc bf89 	b.w	8000f68 <HALL_TIMx_CC_IRQHandler>
}
 8004056:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
    (void)HALL_TIMx_UP_IRQHandler(&HALL_M1);
 800405e:	4620      	mov	r0, r4
 8004060:	f7fd f92c 	bl	80012bc <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx) != 0U)			// compare and capture
 8004064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004066:	e7eb      	b.n	8004040 <TIM3_IRQHandler+0xc>
 8004068:	200000e0 	.word	0x200000e0

0800406c <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <DMA1_Channel1_IRQHandler+0x14>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	0792      	lsls	r2, r2, #30
 8004072:	d400      	bmi.n	8004076 <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 8004074:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004076:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <DMA1_Channel1_IRQHandler+0x18>)
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	f7fc bd7c 	b.w	8000b78 <ASPEP_HWDataReceivedIT>
 8004080:	40020000 	.word	0x40020000
 8004084:	200003b4 	.word	0x200003b4

08004088 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004088:	4b33      	ldr	r3, [pc, #204]	; (8004158 <USART2_IRQHandler+0xd0>)
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 800408e:	b510      	push	{r4, lr}
 8004090:	d509      	bpl.n	80040a6 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004092:	4932      	ldr	r1, [pc, #200]	; (800415c <USART2_IRQHandler+0xd4>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004094:	4832      	ldr	r0, [pc, #200]	; (8004160 <USART2_IRQHandler+0xd8>)
 8004096:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004098:	2440      	movs	r4, #64	; 0x40
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	61ca      	str	r2, [r1, #28]
 80040a0:	621c      	str	r4, [r3, #32]
 80040a2:	f7fc fbc9 	bl	8000838 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80040a6:	492c      	ldr	r1, [pc, #176]	; (8004158 <USART2_IRQHandler+0xd0>)
 80040a8:	69ca      	ldr	r2, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80040aa:	69cb      	ldr	r3, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80040ac:	69c8      	ldr	r0, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80040ae:	f002 0c08 	and.w	ip, r2, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80040b2:	f003 0302 	and.w	r3, r3, #2
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80040b6:	688a      	ldr	r2, [r1, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80040b8:	ea43 030c 	orr.w	r3, r3, ip
 80040bc:	f000 0004 	and.w	r0, r0, #4
 80040c0:	4303      	orrs	r3, r0
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 80040c2:	f002 0201 	and.w	r2, r2, #1
 80040c6:	bf08      	it	eq
 80040c8:	2200      	moveq	r2, #0
 80040ca:	b19a      	cbz	r2, 80040f4 <USART2_IRQHandler+0x6c>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 80040cc:	230e      	movs	r3, #14
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <USART2_IRQHandler+0xdc>)
 80040d0:	620b      	str	r3, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	e852 3f00 	ldrex	r3, [r2]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	e842 3100 	strex	r1, r3, [r2]
 80040de:	2900      	cmp	r1, #0
 80040e0:	d1f7      	bne.n	80040d2 <USART2_IRQHandler+0x4a>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <USART2_IRQHandler+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	e852 3f00 	ldrex	r3, [r2]
 80040e8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	e842 3100 	strex	r1, r3, [r2]
 80040f0:	2900      	cmp	r1, #0
 80040f2:	d1f7      	bne.n	80040e4 <USART2_IRQHandler+0x5c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <USART2_IRQHandler+0xd0>)
 80040f6:	69d3      	ldr	r3, [r2, #28]
 80040f8:	06d9      	lsls	r1, r3, #27
 80040fa:	d52a      	bpl.n	8004152 <USART2_IRQHandler+0xca>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80040fc:	6813      	ldr	r3, [r2, #0]
 80040fe:	06db      	lsls	r3, r3, #27
 8004100:	d528      	bpl.n	8004154 <USART2_IRQHandler+0xcc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004106:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	e842 3100 	strex	r1, r3, [r2]
 800410e:	2900      	cmp	r1, #0
 8004110:	d1f7      	bne.n	8004102 <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <USART2_IRQHandler+0xdc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004118:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	e843 2100 	strex	r1, r2, [r3]
 8004120:	2900      	cmp	r1, #0
 8004122:	d1f7      	bne.n	8004114 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	e843 2100 	strex	r1, r2, [r3]
 8004130:	2900      	cmp	r1, #0
 8004132:	d1f7      	bne.n	8004124 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004134:	4a08      	ldr	r2, [pc, #32]	; (8004158 <USART2_IRQHandler+0xd0>)
 8004136:	6a52      	ldr	r2, [r2, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800413c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	e843 2100 	strex	r1, r2, [r3]
 8004144:	2900      	cmp	r1, #0
 8004146:	d1f7      	bne.n	8004138 <USART2_IRQHandler+0xb0>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 800414c:	4804      	ldr	r0, [pc, #16]	; (8004160 <USART2_IRQHandler+0xd8>)
 800414e:	f7fc bd61 	b.w	8000c14 <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004152:	6813      	ldr	r3, [r2, #0]
}
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	40004400 	.word	0x40004400
 800415c:	40020000 	.word	0x40020000
 8004160:	200003b4 	.word	0x200003b4
 8004164:	40004408 	.word	0x40004408

08004168 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004168:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800416a:	f7fe f99b 	bl	80024a4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 800416e:	e7fe      	b.n	800416e <HardFault_Handler+0x6>

08004170 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004170:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004172:	4c0a      	ldr	r4, [pc, #40]	; (800419c <SysTick_Handler+0x2c>)
 8004174:	7823      	ldrb	r3, [r4, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d006      	beq.n	8004188 <SysTick_Handler+0x18>
  {
    HAL_IncTick();						// 1 KHz
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800417a:	3301      	adds	r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();		// 2KHz, state machine: motor speed etc., medium task

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();		// 2KHz, state machine: motor speed etc., medium task
 8004184:	f7fe b982 	b.w	800248c <MC_RunMotorControlTasks>
    HAL_IncTick();						// 1 KHz
 8004188:	f000 f8e4 	bl	8004354 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800418c:	f001 f86a 	bl	8005264 <HAL_SYSTICK_IRQHandler>
 8004190:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004192:	7023      	strb	r3, [r4, #0]
}
 8004194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();		// 2KHz, state machine: motor speed etc., medium task
 8004198:	f7fe b978 	b.w	800248c <MC_RunMotorControlTasks>
 800419c:	20000428 	.word	0x20000428

080041a0 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <EXTI15_10_IRQHandler+0x14>)
 80041a2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80041a4:	0492      	lsls	r2, r2, #18
 80041a6:	d400      	bmi.n	80041aa <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 80041a8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80041aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ae:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 80041b0:	f7fe b988 	b.w	80024c4 <UI_HandleStartStopButton_cb>
 80041b4:	40010400 	.word	0x40010400

080041b8 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80041b8:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80041ba:	2340      	movs	r3, #64	; 0x40
{
 80041bc:	b470      	push	{r4, r5, r6}
 80041be:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80041c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	e842 3100 	strex	r1, r3, [r2]
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d1f7      	bne.n	80041c0 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80041d0:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	e851 3f00 	ldrex	r3, [r1]
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	e841 3400 	strex	r4, r3, [r1]
 80041e0:	2c00      	cmp	r4, #0
 80041e2:	d1f7      	bne.n	80041d4 <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80041e4:	6901      	ldr	r1, [r0, #16]
 80041e6:	4e17      	ldr	r6, [pc, #92]	; (8004244 <UASPEP_INIT+0x8c>)
 80041e8:	6883      	ldr	r3, [r0, #8]
 80041ea:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80041ec:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80041ee:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 80041f0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80041f4:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80041f6:	68c3      	ldr	r3, [r0, #12]
 80041f8:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	586b      	ldr	r3, [r5, r1]
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004206:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	e851 3f00 	ldrex	r3, [r1]
 800420e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	e841 3400 	strex	r4, r3, [r1]
 8004216:	2c00      	cmp	r4, #0
 8004218:	d1f7      	bne.n	800420a <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800421a:	68c3      	ldr	r3, [r0, #12]
 800421c:	5cf0      	ldrb	r0, [r6, r3]
 800421e:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004220:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004224:	2340      	movs	r3, #64	; 0x40
 8004226:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004228:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800422c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	e841 3200 	strex	r2, r3, [r1]
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1f7      	bne.n	800422e <UASPEP_INIT+0x76>
}
 800423e:	bc70      	pop	{r4, r5, r6}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	0800911c 	.word	0x0800911c

08004248 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8004248:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800424a:	6903      	ldr	r3, [r0, #16]
 800424c:	4d0c      	ldr	r5, [pc, #48]	; (8004280 <UASPEP_SEND_PACKET+0x38>)
 800424e:	6884      	ldr	r4, [r0, #8]
 8004250:	5ceb      	ldrb	r3, [r5, r3]
 8004252:	58e0      	ldr	r0, [r4, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8004254:	07c0      	lsls	r0, r0, #31
 8004256:	eb04 0c03 	add.w	ip, r4, r3
 800425a:	d40e      	bmi.n	800427a <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800425c:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004260:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8004264:	0c09      	lsrs	r1, r1, #16
 8004266:	0409      	lsls	r1, r1, #16
 8004268:	4311      	orrs	r1, r2
 800426a:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800426e:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004270:	2001      	movs	r0, #1
 8004272:	4302      	orrs	r2, r0
 8004274:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 8004276:	bc30      	pop	{r4, r5}
 8004278:	4770      	bx	lr
    result = false;
 800427a:	2000      	movs	r0, #0
}
 800427c:	bc30      	pop	{r4, r5}
 800427e:	4770      	bx	lr
 8004280:	0800911c 	.word	0x0800911c

08004284 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004284:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004286:	68c3      	ldr	r3, [r0, #12]
 8004288:	4d0b      	ldr	r5, [pc, #44]	; (80042b8 <UASPEP_RECEIVE_BUFFER+0x34>)
 800428a:	6844      	ldr	r4, [r0, #4]
 800428c:	5ce8      	ldrb	r0, [r5, r3]
 800428e:	5825      	ldr	r5, [r4, r0]
 8004290:	eb04 0c00 	add.w	ip, r4, r0
 8004294:	f025 0501 	bic.w	r5, r5, #1
 8004298:	5025      	str	r5, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800429a:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800429e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	431a      	orrs	r2, r3
 80042a8:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80042ac:	5823      	ldr	r3, [r4, r0]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 80042b4:	bc30      	pop	{r4, r5}
 80042b6:	4770      	bx	lr
 80042b8:	0800911c 	.word	0x0800911c

080042bc <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80042bc:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80042be:	2310      	movs	r3, #16
 80042c0:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80042c6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	e842 3100 	strex	r1, r3, [r2]
 80042ce:	2900      	cmp	r1, #0
 80042d0:	d1f7      	bne.n	80042c2 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80042d2:	4770      	bx	lr

080042d4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042d4:	4a03      	ldr	r2, [pc, #12]	; (80042e4 <SystemInit+0x10>)
 80042d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80042da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_InitTick+0x40>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b90b      	cbnz	r3, 80042f4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042f4:	490d      	ldr	r1, [pc, #52]	; (800432c <HAL_InitTick+0x44>)
 80042f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042fa:	4605      	mov	r5, r0
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	6808      	ldr	r0, [r1, #0]
 8004302:	fbb0 f0f3 	udiv	r0, r0, r3
 8004306:	f000 ff91 	bl	800522c <HAL_SYSTICK_Config>
 800430a:	4604      	mov	r4, r0
 800430c:	2800      	cmp	r0, #0
 800430e:	d1ef      	bne.n	80042f0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004310:	2d0f      	cmp	r5, #15
 8004312:	d8ed      	bhi.n	80042f0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004314:	4602      	mov	r2, r0
 8004316:	4629      	mov	r1, r5
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	f000 ff3a 	bl	8005194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_InitTick+0x48>)
 8004322:	4620      	mov	r0, r4
 8004324:	601d      	str	r5, [r3, #0]
}
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	20000430 	.word	0x20000430
 800432c:	2000042c 	.word	0x2000042c
 8004330:	20000434 	.word	0x20000434

08004334 <HAL_Init>:
{
 8004334:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004336:	2003      	movs	r0, #3
 8004338:	f000 ff1a 	bl	8005170 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800433c:	2004      	movs	r0, #4
 800433e:	f7ff ffd3 	bl	80042e8 <HAL_InitTick>
 8004342:	b110      	cbz	r0, 800434a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004344:	2401      	movs	r4, #1
}
 8004346:	4620      	mov	r0, r4
 8004348:	bd10      	pop	{r4, pc}
 800434a:	4604      	mov	r4, r0
    HAL_MspInit();
 800434c:	f7ff fc4e 	bl	8003bec <HAL_MspInit>
}
 8004350:	4620      	mov	r0, r4
 8004352:	bd10      	pop	{r4, pc}

08004354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004354:	4a03      	ldr	r2, [pc, #12]	; (8004364 <HAL_IncTick+0x10>)
 8004356:	4904      	ldr	r1, [pc, #16]	; (8004368 <HAL_IncTick+0x14>)
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	6809      	ldr	r1, [r1, #0]
 800435c:	440b      	add	r3, r1
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20001984 	.word	0x20001984
 8004368:	20000430 	.word	0x20000430

0800436c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800436c:	4b01      	ldr	r3, [pc, #4]	; (8004374 <HAL_GetTick+0x8>)
 800436e:	6818      	ldr	r0, [r3, #0]
}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20001984 	.word	0x20001984

08004378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7ff fff6 	bl	800436c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004380:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004382:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004384:	d002      	beq.n	800438c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_Delay+0x20>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800438c:	f7ff ffee 	bl	800436c <HAL_GetTick>
 8004390:	1b43      	subs	r3, r0, r5
 8004392:	42a3      	cmp	r3, r4
 8004394:	d3fa      	bcc.n	800438c <HAL_Delay+0x14>
  {
  }
}
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	20000430 	.word	0x20000430

0800439c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800439c:	b530      	push	{r4, r5, lr}
 800439e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f000 80c9 	beq.w	800453c <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043aa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80043ac:	4604      	mov	r4, r0
 80043ae:	2d00      	cmp	r5, #0
 80043b0:	f000 8092 	beq.w	80044d8 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043b6:	6893      	ldr	r3, [r2, #8]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	d505      	bpl.n	80043c8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043bc:	6893      	ldr	r3, [r2, #8]
 80043be:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80043c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043c6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043c8:	6893      	ldr	r3, [r2, #8]
 80043ca:	00dd      	lsls	r5, r3, #3
 80043cc:	d419      	bmi.n	8004402 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ce:	4b70      	ldr	r3, [pc, #448]	; (8004590 <HAL_ADC_Init+0x1f4>)
 80043d0:	4870      	ldr	r0, [pc, #448]	; (8004594 <HAL_ADC_Init+0x1f8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80043d4:	6891      	ldr	r1, [r2, #8]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	fba0 0303 	umull	r0, r3, r0, r3
 80043dc:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80043ee:	6091      	str	r1, [r2, #8]
 80043f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	b12b      	cbz	r3, 8004402 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80043fc:	9b01      	ldr	r3, [sp, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004402:	6893      	ldr	r3, [r2, #8]
 8004404:	00d8      	lsls	r0, r3, #3
 8004406:	d459      	bmi.n	80044bc <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004408:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800440a:	f043 0310 	orr.w	r3, r3, #16
 800440e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004410:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004412:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004414:	4303      	orrs	r3, r0
 8004416:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004418:	6893      	ldr	r3, [r2, #8]
 800441a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800441e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004420:	d153      	bne.n	80044ca <HAL_ADC_Init+0x12e>
 8004422:	06d9      	lsls	r1, r3, #27
 8004424:	d451      	bmi.n	80044ca <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004426:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004428:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004432:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004434:	07db      	lsls	r3, r3, #31
 8004436:	d40e      	bmi.n	8004456 <HAL_ADC_Init+0xba>
 8004438:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_ADC_Init+0x1fc>)
 800443a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800443e:	6889      	ldr	r1, [r1, #8]
 8004440:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004442:	430b      	orrs	r3, r1
 8004444:	07dd      	lsls	r5, r3, #31
 8004446:	d406      	bmi.n	8004456 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004448:	4954      	ldr	r1, [pc, #336]	; (800459c <HAL_ADC_Init+0x200>)
 800444a:	6865      	ldr	r5, [r4, #4]
 800444c:	688b      	ldr	r3, [r1, #8]
 800444e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004452:	432b      	orrs	r3, r5
 8004454:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004456:	68e5      	ldr	r5, [r4, #12]
 8004458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800445a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800445e:	432b      	orrs	r3, r5
 8004460:	68a5      	ldr	r5, [r4, #8]
 8004462:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004464:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004466:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004468:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800446c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004470:	d05f      	beq.n	8004532 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004472:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004474:	b121      	cbz	r1, 8004480 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004476:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004478:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800447c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800447e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004480:	68d5      	ldr	r5, [r2, #12]
 8004482:	4947      	ldr	r1, [pc, #284]	; (80045a0 <HAL_ADC_Init+0x204>)
 8004484:	4029      	ands	r1, r5
 8004486:	430b      	orrs	r3, r1
 8004488:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800448a:	6913      	ldr	r3, [r2, #16]
 800448c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800448e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004492:	430b      	orrs	r3, r1
 8004494:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004496:	6893      	ldr	r3, [r2, #8]
 8004498:	0759      	lsls	r1, r3, #29
 800449a:	d523      	bpl.n	80044e4 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800449c:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800449e:	6963      	ldr	r3, [r4, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d04e      	beq.n	8004542 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044bc:	6893      	ldr	r3, [r2, #8]
 80044be:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c2:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044c8:	d0ab      	beq.n	8004422 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80044cc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ce:	f043 0310 	orr.w	r3, r3, #16
 80044d2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80044d4:	b003      	add	sp, #12
 80044d6:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80044d8:	f7ff fba8 	bl	8003c2c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80044dc:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80044de:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80044e2:	e767      	b.n	80043b4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044e4:	6893      	ldr	r3, [r2, #8]
 80044e6:	071b      	lsls	r3, r3, #28
 80044e8:	d4d9      	bmi.n	800449e <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044ea:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044f0:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044f2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044f6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044f8:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80044fc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004500:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004502:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004504:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004506:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004508:	bb19      	cbnz	r1, 8004552 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004510:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004514:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800451c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004520:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004524:	2b01      	cmp	r3, #1
 8004526:	d021      	beq.n	800456c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004528:	6913      	ldr	r3, [r2, #16]
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6113      	str	r3, [r2, #16]
 8004530:	e7b5      	b.n	800449e <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004532:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004534:	3901      	subs	r1, #1
 8004536:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800453a:	e79a      	b.n	8004472 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 800453c:	2001      	movs	r0, #1
}
 800453e:	b003      	add	sp, #12
 8004540:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004542:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004544:	6a23      	ldr	r3, [r4, #32]
 8004546:	f021 010f 	bic.w	r1, r1, #15
 800454a:	3b01      	subs	r3, #1
 800454c:	430b      	orrs	r3, r1
 800454e:	6313      	str	r3, [r2, #48]	; 0x30
 8004550:	e7ac      	b.n	80044ac <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004558:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800455c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800456a:	e7d9      	b.n	8004520 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 800456c:	6911      	ldr	r1, [r2, #16]
 800456e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004570:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004572:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004576:	f021 0104 	bic.w	r1, r1, #4
 800457a:	432b      	orrs	r3, r5
 800457c:	430b      	orrs	r3, r1
 800457e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004580:	430b      	orrs	r3, r1
 8004582:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004584:	430b      	orrs	r3, r1
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6113      	str	r3, [r2, #16]
 800458c:	e787      	b.n	800449e <HAL_ADC_Init+0x102>
 800458e:	bf00      	nop
 8004590:	2000042c 	.word	0x2000042c
 8004594:	053e2d63 	.word	0x053e2d63
 8004598:	50000100 	.word	0x50000100
 800459c:	50000300 	.word	0x50000300
 80045a0:	fff04007 	.word	0xfff04007

080045a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045a6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80045aa:	b083      	sub	sp, #12
 80045ac:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80045ae:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80045b0:	f04f 0000 	mov.w	r0, #0
 80045b4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80045b6:	f000 8145 	beq.w	8004844 <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ba:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 80045bc:	2001      	movs	r0, #1
 80045be:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045c2:	68a2      	ldr	r2, [r4, #8]
 80045c4:	0755      	lsls	r5, r2, #29
 80045c6:	d44c      	bmi.n	8004662 <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045c8:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 80045ca:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045cc:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 80045d0:	f00e 0e0c 	and.w	lr, lr, #12
 80045d4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 80045d8:	f000 001f 	and.w	r0, r0, #31
 80045dc:	f85e 500c 	ldr.w	r5, [lr, ip]
 80045e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80045e4:	261f      	movs	r6, #31
 80045e6:	4082      	lsls	r2, r0
 80045e8:	fa06 f000 	lsl.w	r0, r6, r0
 80045ec:	ea25 0000 	bic.w	r0, r5, r0
 80045f0:	4302      	orrs	r2, r0
 80045f2:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045f6:	68a2      	ldr	r2, [r4, #8]
 80045f8:	0750      	lsls	r0, r2, #29
 80045fa:	d543      	bpl.n	8004684 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045fc:	68a2      	ldr	r2, [r4, #8]
 80045fe:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004600:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004602:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004606:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004608:	d10c      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800460a:	4dc2      	ldr	r5, [pc, #776]	; (8004914 <HAL_ADC_ConfigChannel+0x370>)
 800460c:	68ce      	ldr	r6, [r1, #12]
 800460e:	42ae      	cmp	r6, r5
 8004610:	f000 80c1 	beq.w	8004796 <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 8004614:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8004618:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800461c:	ea21 0100 	bic.w	r1, r1, r0
 8004620:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004624:	49bc      	ldr	r1, [pc, #752]	; (8004918 <HAL_ADC_ConfigChannel+0x374>)
 8004626:	420a      	tst	r2, r1
 8004628:	d02a      	beq.n	8004680 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800462a:	49bc      	ldr	r1, [pc, #752]	; (800491c <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800462c:	4dbc      	ldr	r5, [pc, #752]	; (8004920 <HAL_ADC_ConfigChannel+0x37c>)
 800462e:	6888      	ldr	r0, [r1, #8]
 8004630:	42aa      	cmp	r2, r5
 8004632:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004636:	d01d      	beq.n	8004674 <HAL_ADC_ConfigChannel+0xd0>
 8004638:	4dba      	ldr	r5, [pc, #744]	; (8004924 <HAL_ADC_ConfigChannel+0x380>)
 800463a:	42aa      	cmp	r2, r5
 800463c:	d01a      	beq.n	8004674 <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800463e:	4dba      	ldr	r5, [pc, #744]	; (8004928 <HAL_ADC_ConfigChannel+0x384>)
 8004640:	42aa      	cmp	r2, r5
 8004642:	f040 8131 	bne.w	80048a8 <HAL_ADC_ConfigChannel+0x304>
 8004646:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800464a:	d119      	bne.n	8004680 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800464c:	4ab7      	ldr	r2, [pc, #732]	; (800492c <HAL_ADC_ConfigChannel+0x388>)
 800464e:	4294      	cmp	r4, r2
 8004650:	d016      	beq.n	8004680 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004652:	688a      	ldr	r2, [r1, #8]
 8004654:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004658:	4316      	orrs	r6, r2
 800465a:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 800465e:	608e      	str	r6, [r1, #8]
}
 8004660:	e003      	b.n	800466a <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004662:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004664:	f042 0220 	orr.w	r2, r2, #32
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004670:	b003      	add	sp, #12
 8004672:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004674:	0202      	lsls	r2, r0, #8
 8004676:	d403      	bmi.n	8004680 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004678:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800467c:	f000 80f5 	beq.w	800486a <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004680:	2000      	movs	r0, #0
 8004682:	e7f2      	b.n	800466a <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004684:	68a2      	ldr	r2, [r4, #8]
 8004686:	f012 0208 	ands.w	r2, r2, #8
 800468a:	f040 8082 	bne.w	8004792 <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800468e:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004690:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004692:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8004696:	f000 811b 	beq.w	80048d0 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800469a:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800469e:	f104 0714 	add.w	r7, r4, #20
 80046a2:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80046a6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80046aa:	f85c 5007 	ldr.w	r5, [ip, r7]
 80046ae:	f04f 0e07 	mov.w	lr, #7
 80046b2:	40b0      	lsls	r0, r6
 80046b4:	fa0e f606 	lsl.w	r6, lr, r6
 80046b8:	ea25 0506 	bic.w	r5, r5, r6
 80046bc:	4328      	orrs	r0, r5
 80046be:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80046c2:	6960      	ldr	r0, [r4, #20]
 80046c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80046c8:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ca:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046cc:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ce:	2f04      	cmp	r7, #4
 80046d0:	d02f      	beq.n	8004732 <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d2:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046d6:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 80046da:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 80046de:	f8df c25c 	ldr.w	ip, [pc, #604]	; 800493c <HAL_ADC_ConfigChannel+0x398>
 80046e2:	006e      	lsls	r6, r5, #1
 80046e4:	680d      	ldr	r5, [r1, #0]
 80046e6:	ea0e 0c0c 	and.w	ip, lr, ip
 80046ea:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80046ee:	ea45 0c0c 	orr.w	ip, r5, ip
 80046f2:	694d      	ldr	r5, [r1, #20]
 80046f4:	40b5      	lsls	r5, r6
 80046f6:	ea45 050c 	orr.w	r5, r5, ip
 80046fa:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80046fe:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004702:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004704:	698e      	ldr	r6, [r1, #24]
 8004706:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 800470a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800470e:	4335      	orrs	r5, r6
 8004710:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004714:	7f0d      	ldrb	r5, [r1, #28]
 8004716:	690e      	ldr	r6, [r1, #16]
 8004718:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 800471a:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 800471e:	bf08      	it	eq
 8004720:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8004724:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004728:	432a      	orrs	r2, r5
 800472a:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 800472e:	6808      	ldr	r0, [r1, #0]
}
 8004730:	e766      	b.n	8004600 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004732:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004734:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004736:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004738:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800473c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004740:	2d00      	cmp	r5, #0
 8004742:	f040 80fd 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x39c>
 8004746:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800474a:	42aa      	cmp	r2, r5
 800474c:	f000 8171 	beq.w	8004a32 <HAL_ADC_ConfigChannel+0x48e>
 8004750:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004752:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004754:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004758:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800475c:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8004760:	42ae      	cmp	r6, r5
 8004762:	f000 8154 	beq.w	8004a0e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004766:	6896      	ldr	r6, [r2, #8]
 8004768:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800476a:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800476e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004772:	42ae      	cmp	r6, r5
 8004774:	f000 8139 	beq.w	80049ea <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004778:	68d6      	ldr	r6, [r2, #12]
 800477a:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800477c:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004780:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8004784:	4295      	cmp	r5, r2
 8004786:	f47f af3b 	bne.w	8004600 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004790:	603a      	str	r2, [r7, #0]
 8004792:	6808      	ldr	r0, [r1, #0]
}
 8004794:	e734      	b.n	8004600 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8004796:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800479a:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800479e:	432a      	orrs	r2, r5
 80047a0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	d050      	beq.n	800484a <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	f000 80f8 	beq.w	80049a2 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 80047b2:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b6:	3201      	adds	r2, #1
 80047b8:	f002 021f 	and.w	r2, r2, #31
 80047bc:	2a09      	cmp	r2, #9
 80047be:	f240 80f0 	bls.w	80049a2 <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	f000 814f 	beq.w	8004a6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80047cc:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047d0:	3201      	adds	r2, #1
 80047d2:	0692      	lsls	r2, r2, #26
 80047d4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80047dc:	2d00      	cmp	r5, #0
 80047de:	f000 8149 	beq.w	8004a74 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 80047e2:	fab5 f585 	clz	r5, r5
 80047e6:	3501      	adds	r5, #1
 80047e8:	f005 051f 	and.w	r5, r5, #31
 80047ec:	2601      	movs	r6, #1
 80047ee:	fa06 f505 	lsl.w	r5, r6, r5
 80047f2:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f000 8139 	beq.w	8004a70 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80047fe:	fab0 f080 	clz	r0, r0
 8004802:	1c42      	adds	r2, r0, #1
 8004804:	f002 001f 	and.w	r0, r2, #31
 8004808:	f06f 061d 	mvn.w	r6, #29
 800480c:	2203      	movs	r2, #3
 800480e:	fb12 6200 	smlabb	r2, r2, r0, r6
 8004812:	0512      	lsls	r2, r2, #20
 8004814:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004818:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800481a:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 800481c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800481e:	f006 0604 	and.w	r6, r6, #4
 8004822:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8004826:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800482a:	fa00 f702 	lsl.w	r7, r0, r2
 800482e:	f04f 0c07 	mov.w	ip, #7
 8004832:	5970      	ldr	r0, [r6, r5]
 8004834:	fa0c f202 	lsl.w	r2, ip, r2
 8004838:	ea20 0202 	bic.w	r2, r0, r2
 800483c:	433a      	orrs	r2, r7
 800483e:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004840:	680a      	ldr	r2, [r1, #0]
}
 8004842:	e6ef      	b.n	8004624 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8004844:	2002      	movs	r0, #2
}
 8004846:	b003      	add	sp, #12
 8004848:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800484a:	0e80      	lsrs	r0, r0, #26
 800484c:	3001      	adds	r0, #1
 800484e:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004852:	2e09      	cmp	r6, #9
 8004854:	d850      	bhi.n	80048f8 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004856:	0685      	lsls	r5, r0, #26
 8004858:	2201      	movs	r2, #1
 800485a:	40b2      	lsls	r2, r6
 800485c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004860:	4315      	orrs	r5, r2
 8004862:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004866:	0512      	lsls	r2, r2, #20
 8004868:	e7d6      	b.n	8004818 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800486a:	492c      	ldr	r1, [pc, #176]	; (800491c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800486c:	4830      	ldr	r0, [pc, #192]	; (8004930 <HAL_ADC_ConfigChannel+0x38c>)
 800486e:	688a      	ldr	r2, [r1, #8]
 8004870:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004874:	4316      	orrs	r6, r2
 8004876:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 800487a:	608e      	str	r6, [r1, #8]
 800487c:	6802      	ldr	r2, [r0, #0]
 800487e:	492d      	ldr	r1, [pc, #180]	; (8004934 <HAL_ADC_ConfigChannel+0x390>)
 8004880:	0992      	lsrs	r2, r2, #6
 8004882:	fba1 1202 	umull	r1, r2, r1, r2
 8004886:	0992      	lsrs	r2, r2, #6
 8004888:	3201      	adds	r2, #1
 800488a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004892:	9a01      	ldr	r2, [sp, #4]
 8004894:	2a00      	cmp	r2, #0
 8004896:	f43f aef3 	beq.w	8004680 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 800489a:	9a01      	ldr	r2, [sp, #4]
 800489c:	3a01      	subs	r2, #1
 800489e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80048a0:	9a01      	ldr	r2, [sp, #4]
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	d1f9      	bne.n	800489a <HAL_ADC_ConfigChannel+0x2f6>
 80048a6:	e6eb      	b.n	8004680 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80048a8:	4d23      	ldr	r5, [pc, #140]	; (8004938 <HAL_ADC_ConfigChannel+0x394>)
 80048aa:	42aa      	cmp	r2, r5
 80048ac:	f47f aee8 	bne.w	8004680 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048b0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80048b4:	f47f aee4 	bne.w	8004680 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 80048b8:	4a1c      	ldr	r2, [pc, #112]	; (800492c <HAL_ADC_ConfigChannel+0x388>)
 80048ba:	4294      	cmp	r4, r2
 80048bc:	f43f aee0 	beq.w	8004680 <HAL_ADC_ConfigChannel+0xdc>
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80048c6:	4332      	orrs	r2, r6
 80048c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80048cc:	608a      	str	r2, [r1, #8]
}
 80048ce:	e6cc      	b.n	800466a <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048d0:	0df5      	lsrs	r5, r6, #23
 80048d2:	f104 0014 	add.w	r0, r4, #20
 80048d6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80048da:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80048de:	582f      	ldr	r7, [r5, r0]
 80048e0:	f04f 0c07 	mov.w	ip, #7
 80048e4:	fa0c f606 	lsl.w	r6, ip, r6
 80048e8:	ea27 0606 	bic.w	r6, r7, r6
 80048ec:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048ee:	6960      	ldr	r0, [r4, #20]
 80048f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80048f4:	6160      	str	r0, [r4, #20]
}
 80048f6:	e6e8      	b.n	80046ca <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80048fc:	0685      	lsls	r5, r0, #26
 80048fe:	3a1e      	subs	r2, #30
 8004900:	2001      	movs	r0, #1
 8004902:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004906:	0512      	lsls	r2, r2, #20
 8004908:	fa00 f606 	lsl.w	r6, r0, r6
 800490c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004910:	4335      	orrs	r5, r6
 8004912:	e781      	b.n	8004818 <HAL_ADC_ConfigChannel+0x274>
 8004914:	407f0000 	.word	0x407f0000
 8004918:	80080000 	.word	0x80080000
 800491c:	50000300 	.word	0x50000300
 8004920:	c3210000 	.word	0xc3210000
 8004924:	90c00010 	.word	0x90c00010
 8004928:	c7520000 	.word	0xc7520000
 800492c:	50000100 	.word	0x50000100
 8004930:	2000042c 	.word	0x2000042c
 8004934:	053e2d63 	.word	0x053e2d63
 8004938:	cb840000 	.word	0xcb840000
 800493c:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004944:	b11d      	cbz	r5, 800494e <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8004946:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800494a:	42aa      	cmp	r2, r5
 800494c:	d071      	beq.n	8004a32 <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800494e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004950:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004952:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004956:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800495a:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004962:	b11d      	cbz	r5, 800496c <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004964:	fab5 f585 	clz	r5, r5
 8004968:	42ae      	cmp	r6, r5
 800496a:	d050      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800496c:	6895      	ldr	r5, [r2, #8]
 800496e:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004970:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004974:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800497c:	b11d      	cbz	r5, 8004986 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 800497e:	fab5 f585 	clz	r5, r5
 8004982:	42ae      	cmp	r6, r5
 8004984:	d031      	beq.n	80049ea <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004986:	68d5      	ldr	r5, [r2, #12]
 8004988:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800498a:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800498e:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004996:	2d00      	cmp	r5, #0
 8004998:	f43f ae32 	beq.w	8004600 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 800499c:	fab5 f585 	clz	r5, r5
 80049a0:	e6f0      	b.n	8004784 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d059      	beq.n	8004a5e <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 80049aa:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ae:	3201      	adds	r2, #1
 80049b0:	0692      	lsls	r2, r2, #26
 80049b2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	d04d      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 80049be:	fab5 f585 	clz	r5, r5
 80049c2:	3501      	adds	r5, #1
 80049c4:	f005 051f 	and.w	r5, r5, #31
 80049c8:	2601      	movs	r6, #1
 80049ca:	fa06 f505 	lsl.w	r5, r6, r5
 80049ce:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d045      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 80049d8:	fab0 f080 	clz	r0, r0
 80049dc:	3001      	adds	r0, #1
 80049de:	f000 001f 	and.w	r0, r0, #31
 80049e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80049e6:	0502      	lsls	r2, r0, #20
 80049e8:	e716      	b.n	8004818 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 80049ea:	6838      	ldr	r0, [r7, #0]
 80049ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049f0:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049f2:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049f4:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f6:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049fa:	68d2      	ldr	r2, [r2, #12]
 80049fc:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a00:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d1c4      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x3ee>
 8004a08:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004a0c:	e6ba      	b.n	8004784 <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8004a0e:	6838      	ldr	r0, [r7, #0]
 8004a10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a14:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a16:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a18:	6808      	ldr	r0, [r1, #0]
 8004a1a:	6896      	ldr	r6, [r2, #8]
 8004a1c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a20:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a24:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	d1a5      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x3d4>
 8004a2c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004a30:	e69f      	b.n	8004772 <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8004a32:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004a34:	4622      	mov	r2, r4
 8004a36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a3a:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a3e:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004a44:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a48:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a4c:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	d184      	bne.n	800495e <HAL_ADC_ConfigChannel+0x3ba>
 8004a54:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004a58:	e682      	b.n	8004760 <HAL_ADC_ConfigChannel+0x1bc>
 8004a5a:	2502      	movs	r5, #2
 8004a5c:	e7b7      	b.n	80049ce <HAL_ADC_ConfigChannel+0x42a>
 8004a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a62:	e7a8      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x412>
 8004a64:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004a68:	e6d6      	b.n	8004818 <HAL_ADC_ConfigChannel+0x274>
 8004a6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a6e:	e6b3      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x234>
 8004a70:	4a01      	ldr	r2, [pc, #4]	; (8004a78 <HAL_ADC_ConfigChannel+0x4d4>)
 8004a72:	e6d1      	b.n	8004818 <HAL_ADC_ConfigChannel+0x274>
 8004a74:	2502      	movs	r5, #2
 8004a76:	e6bc      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x24e>
 8004a78:	fe500000 	.word	0xfe500000

08004a7c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a80:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004a84:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004a86:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004a88:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004a8a:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a8c:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8004a8e:	f000 8166 	beq.w	8004d5e <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8004a92:	2301      	movs	r3, #1
 8004a94:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004a98:	b1e2      	cbz	r2, 8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004a9a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d019      	beq.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004aa0:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004aa2:	2c00      	cmp	r4, #0
 8004aa4:	f040 8119 	bne.w	8004cda <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004aa8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	f000 8222 	beq.w	8004ef4 <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004ab0:	1e5d      	subs	r5, r3, #1
 8004ab2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004ab4:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8004ab8:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004aba:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004abc:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004ac0:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004ac2:	f004 051f 	and.w	r5, r4, #31
 8004ac6:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8004aca:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004acc:	431c      	orrs	r4, r3
 8004ace:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	e005      	b.n	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004ad4:	684b      	ldr	r3, [r1, #4]
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	f000 80eb 	beq.w	8004cb2 <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004adc:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004ade:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ae0:	689c      	ldr	r4, [r3, #8]
 8004ae2:	0727      	lsls	r7, r4, #28
 8004ae4:	d410      	bmi.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004ae6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	f040 80d8 	bne.w	8004ca0 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004af0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004af4:	68dd      	ldr	r5, [r3, #12]
 8004af6:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004afa:	0524      	lsls	r4, r4, #20
 8004afc:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004b00:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004b04:	432c      	orrs	r4, r5
 8004b06:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b08:	689c      	ldr	r4, [r3, #8]
 8004b0a:	f014 0404 	ands.w	r4, r4, #4
 8004b0e:	d058      	beq.n	8004bc2 <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b10:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b12:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b14:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b16:	07ee      	lsls	r6, r5, #31
 8004b18:	d40c      	bmi.n	8004b34 <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004b1a:	4dac      	ldr	r5, [pc, #688]	; (8004dcc <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004b1c:	68ce      	ldr	r6, [r1, #12]
 8004b1e:	42ae      	cmp	r6, r5
 8004b20:	f000 8100 	beq.w	8004d24 <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004b24:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004b28:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004b2c:	ea21 0105 	bic.w	r1, r1, r5
 8004b30:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004b34:	49a6      	ldr	r1, [pc, #664]	; (8004dd0 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004b36:	420a      	tst	r2, r1
 8004b38:	d019      	beq.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b3a:	4ea6      	ldr	r6, [pc, #664]	; (8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004b3c:	4da6      	ldr	r5, [pc, #664]	; (8004dd8 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8004b3e:	68b1      	ldr	r1, [r6, #8]
 8004b40:	42aa      	cmp	r2, r5
 8004b42:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004b46:	d019      	beq.n	8004b7c <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b48:	4da4      	ldr	r5, [pc, #656]	; (8004ddc <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004b4a:	42aa      	cmp	r2, r5
 8004b4c:	d016      	beq.n	8004b7c <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004b4e:	4da4      	ldr	r5, [pc, #656]	; (8004de0 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004b50:	42aa      	cmp	r2, r5
 8004b52:	f040 810d 	bne.w	8004d70 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b56:	01cd      	lsls	r5, r1, #7
 8004b58:	d409      	bmi.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b5a:	4aa2      	ldr	r2, [pc, #648]	; (8004de4 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d006      	beq.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b60:	68b3      	ldr	r3, [r6, #8]
 8004b62:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004b66:	431f      	orrs	r7, r3
 8004b68:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004b6c:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004b74:	4620      	mov	r0, r4
 8004b76:	b002      	add	sp, #8
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b7c:	020a      	lsls	r2, r1, #8
 8004b7e:	d4f6      	bmi.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b84:	d1f3      	bne.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8004b86:	4a93      	ldr	r2, [pc, #588]	; (8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004b88:	6893      	ldr	r3, [r2, #8]
 8004b8a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004b8e:	431f      	orrs	r7, r3
 8004b90:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004b94:	4b94      	ldr	r3, [pc, #592]	; (8004de8 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004b96:	6097      	str	r7, [r2, #8]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a94      	ldr	r2, [pc, #592]	; (8004dec <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3318      	adds	r3, #24
 8004bac:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0dc      	beq.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8004bb4:	9b01      	ldr	r3, [sp, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f9      	bne.n	8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x138>
 8004bc0:	e7d5      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bc2:	689d      	ldr	r5, [r3, #8]
 8004bc4:	f015 0508 	ands.w	r5, r5, #8
 8004bc8:	d1a4      	bne.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004bca:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004bcc:	2c00      	cmp	r4, #0
 8004bce:	f040 809a 	bne.w	8004d06 <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004bd2:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004bd6:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004bd8:	68dc      	ldr	r4, [r3, #12]
 8004bda:	bf0c      	ite	eq
 8004bdc:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004be0:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004be4:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be6:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004be8:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004bec:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8004bee:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004bf0:	f000 80e0 	beq.w	8004db4 <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004bf4:	f026 0602 	bic.w	r6, r6, #2
 8004bf8:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bfa:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bfc:	0dd7      	lsrs	r7, r2, #23
 8004bfe:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004c02:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004c06:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004c0a:	f000 80c4 	beq.w	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c0e:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004c12:	f04f 0e07 	mov.w	lr, #7
 8004c16:	4096      	lsls	r6, r2
 8004c18:	fa0e fe02 	lsl.w	lr, lr, r2
 8004c1c:	f857 200c 	ldr.w	r2, [r7, ip]
 8004c20:	ea22 020e 	bic.w	r2, r2, lr
 8004c24:	4316      	orrs	r6, r2
 8004c26:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c30:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004c32:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004c34:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004c36:	2f04      	cmp	r7, #4
 8004c38:	f000 80e0 	beq.w	8004dfc <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004c3c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c40:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004c44:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8004c48:	680e      	ldr	r6, [r1, #0]
 8004c4a:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8004c4e:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 8004c52:	4e67      	ldr	r6, [pc, #412]	; (8004df0 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004c54:	ea08 0606 	and.w	r6, r8, r6
 8004c58:	ea4c 0c06 	orr.w	ip, ip, r6
 8004c5c:	694e      	ldr	r6, [r1, #20]
 8004c5e:	fa06 f60e 	lsl.w	r6, r6, lr
 8004c62:	ea46 060c 	orr.w	r6, r6, ip
 8004c66:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004c6a:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c6e:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004c72:	698f      	ldr	r7, [r1, #24]
 8004c74:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004c78:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004c7c:	433e      	orrs	r6, r7
 8004c7e:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004c82:	7f0e      	ldrb	r6, [r1, #28]
 8004c84:	690f      	ldr	r7, [r1, #16]
 8004c86:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8004c88:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004c8c:	bf08      	it	eq
 8004c8e:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004c92:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004c96:	4335      	orrs	r5, r6
 8004c98:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004c9c:	680a      	ldr	r2, [r1, #0]
}
 8004c9e:	e739      	b.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004ca0:	68dc      	ldr	r4, [r3, #12]
 8004ca2:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004ca6:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004caa:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004cae:	60dc      	str	r4, [r3, #12]
 8004cb0:	e72a      	b.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cb2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cb4:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d056      	beq.n	8004d68 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cba:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004cbc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cc0:	0c55      	lsrs	r5, r2, #17
 8004cc2:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004cc6:	4323      	orrs	r3, r4
 8004cc8:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004cca:	6803      	ldr	r3, [r0, #0]
 8004ccc:	4e49      	ldr	r6, [pc, #292]	; (8004df4 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004cce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004cd0:	4034      	ands	r4, r6
 8004cd2:	432c      	orrs	r4, r5
 8004cd4:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004cd6:	6645      	str	r5, [r0, #100]	; 0x64
 8004cd8:	e702      	b.n	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004cda:	680a      	ldr	r2, [r1, #0]
 8004cdc:	684b      	ldr	r3, [r1, #4]
 8004cde:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004ce8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004cea:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004cec:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004cee:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004cf0:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004cf2:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	f47f aef3 	bne.w	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004cfa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004cfc:	4e3d      	ldr	r6, [pc, #244]	; (8004df4 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004cfe:	4034      	ands	r4, r6
 8004d00:	4325      	orrs	r5, r4
 8004d02:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004d04:	e6ec      	b.n	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004d06:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	f43f af62 	beq.w	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004d0e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004d12:	2c01      	cmp	r4, #1
 8004d14:	f000 8158 	beq.w	8004fc8 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004d18:	68dc      	ldr	r4, [r3, #12]
 8004d1a:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004d1e:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d20:	462c      	mov	r4, r5
 8004d22:	e761      	b.n	8004be8 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8004d24:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004d28:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004d2c:	4335      	orrs	r5, r6
 8004d2e:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d32:	2e00      	cmp	r6, #0
 8004d34:	f040 80a7 	bne.w	8004e86 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004d38:	0e92      	lsrs	r2, r2, #26
 8004d3a:	1c55      	adds	r5, r2, #1
 8004d3c:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d40:	f1bc 0f09 	cmp.w	ip, #9
 8004d44:	f200 80d9 	bhi.w	8004efa <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d48:	06ad      	lsls	r5, r5, #26
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	fa02 f20c 	lsl.w	r2, r2, ip
 8004d50:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004d54:	4315      	orrs	r5, r2
 8004d56:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004d5a:	0512      	lsls	r2, r2, #20
 8004d5c:	e0db      	b.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8004d5e:	2402      	movs	r4, #2
}
 8004d60:	4620      	mov	r0, r4
 8004d62:	b002      	add	sp, #8
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004d68:	0c55      	lsrs	r5, r2, #17
 8004d6a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004d6e:	e7ac      	b.n	8004cca <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004d70:	4d21      	ldr	r5, [pc, #132]	; (8004df8 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8004d72:	42aa      	cmp	r2, r5
 8004d74:	f47f aefb 	bne.w	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d78:	0249      	lsls	r1, r1, #9
 8004d7a:	f53f aef8 	bmi.w	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f43f aef4 	beq.w	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d86:	68b3      	ldr	r3, [r6, #8]
 8004d88:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004d8c:	431f      	orrs	r7, r3
 8004d8e:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004d92:	60b7      	str	r7, [r6, #8]
}
 8004d94:	e6eb      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d96:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004d9a:	f04f 0c07 	mov.w	ip, #7
 8004d9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004da2:	59ba      	ldr	r2, [r7, r6]
 8004da4:	ea22 020c 	bic.w	r2, r2, ip
 8004da8:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	e73e      	b.n	8004c32 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004db4:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004db8:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8004dbc:	433e      	orrs	r6, r7
 8004dbe:	ea46 060c 	orr.w	r6, r6, ip
 8004dc2:	f046 0602 	orr.w	r6, r6, #2
 8004dc6:	611e      	str	r6, [r3, #16]
 8004dc8:	e717      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8004dca:	bf00      	nop
 8004dcc:	407f0000 	.word	0x407f0000
 8004dd0:	80080000 	.word	0x80080000
 8004dd4:	50000300 	.word	0x50000300
 8004dd8:	c3210000 	.word	0xc3210000
 8004ddc:	90c00010 	.word	0x90c00010
 8004de0:	c7520000 	.word	0xc7520000
 8004de4:	50000100 	.word	0x50000100
 8004de8:	2000042c 	.word	0x2000042c
 8004dec:	053e2d63 	.word	0x053e2d63
 8004df0:	03fff000 	.word	0x03fff000
 8004df4:	04104000 	.word	0x04104000
 8004df8:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004dfe:	680a      	ldr	r2, [r1, #0]
 8004e00:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004e02:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e06:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	f000 809a 	beq.w	8004f44 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004e14:	b126      	cbz	r6, 8004e20 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8004e16:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e1a:	42b5      	cmp	r5, r6
 8004e1c:	f000 80d9 	beq.w	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8004e20:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004e22:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e24:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e28:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004e2c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004e34:	b126      	cbz	r6, 8004e40 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e36:	fab6 f686 	clz	r6, r6
 8004e3a:	42b7      	cmp	r7, r6
 8004e3c:	f000 80de 	beq.w	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e40:	68ae      	ldr	r6, [r5, #8]
 8004e42:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e44:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e48:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004e50:	b126      	cbz	r6, 8004e5c <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 8004e52:	fab6 f686 	clz	r6, r6
 8004e56:	42b7      	cmp	r7, r6
 8004e58:	f000 80e5 	beq.w	8005026 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e5c:	68ee      	ldr	r6, [r5, #12]
 8004e5e:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e60:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e62:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	f43f ae52 	beq.w	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004e70:	fab6 f686 	clz	r6, r6
 8004e74:	42be      	cmp	r6, r7
 8004e76:	f47f ae4d 	bne.w	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004e7a:	682a      	ldr	r2, [r5, #0]
 8004e7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e80:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004e82:	680a      	ldr	r2, [r1, #0]
}
 8004e84:	e646      	b.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e86:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	d076      	beq.n	8004f7c <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8004e8e:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e92:	3501      	adds	r5, #1
 8004e94:	f005 051f 	and.w	r5, r5, #31
 8004e98:	2d09      	cmp	r5, #9
 8004e9a:	d96f      	bls.n	8004f7c <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	f000 80e0 	beq.w	8005066 <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004ea6:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004eaa:	3501      	adds	r5, #1
 8004eac:	06ad      	lsls	r5, r5, #26
 8004eae:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	f000 80d3 	beq.w	8005062 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004ebc:	fab6 f686 	clz	r6, r6
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	f006 061f 	and.w	r6, r6, #31
 8004ec6:	2701      	movs	r7, #1
 8004ec8:	fa07 f606 	lsl.w	r6, r7, r6
 8004ecc:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ece:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	f000 80c3 	beq.w	800505e <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8004ed8:	fab2 f282 	clz	r2, r2
 8004edc:	3201      	adds	r2, #1
 8004ede:	f002 061f 	and.w	r6, r2, #31
 8004ee2:	f06f 071d 	mvn.w	r7, #29
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fb12 7206 	smlabb	r2, r2, r6, r7
 8004eec:	0512      	lsls	r2, r2, #20
 8004eee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ef2:	e010      	b.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	e5e0      	b.n	8004abc <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004efa:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004efe:	06ad      	lsls	r5, r5, #26
 8004f00:	3a1e      	subs	r2, #30
 8004f02:	2601      	movs	r6, #1
 8004f04:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004f08:	0512      	lsls	r2, r2, #20
 8004f0a:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004f0e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f12:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f16:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f18:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 8004f1a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f1c:	f007 0704 	and.w	r7, r7, #4
 8004f20:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004f24:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004f28:	fa05 fc02 	lsl.w	ip, r5, r2
 8004f2c:	f04f 0e07 	mov.w	lr, #7
 8004f30:	59bd      	ldr	r5, [r7, r6]
 8004f32:	fa0e f202 	lsl.w	r2, lr, r2
 8004f36:	ea25 0202 	bic.w	r2, r5, r2
 8004f3a:	ea42 020c 	orr.w	r2, r2, ip
 8004f3e:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004f40:	680a      	ldr	r2, [r1, #0]
}
 8004f42:	e5f7      	b.n	8004b34 <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004f44:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f48:	42b5      	cmp	r5, r6
 8004f4a:	d042      	beq.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f4c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004f4e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f50:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f54:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004f58:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004f5c:	42b7      	cmp	r7, r6
 8004f5e:	d04d      	beq.n	8004ffc <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f60:	68af      	ldr	r7, [r5, #8]
 8004f62:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f64:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f68:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004f6c:	42b7      	cmp	r7, r6
 8004f6e:	d05a      	beq.n	8005026 <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f70:	68ef      	ldr	r7, [r5, #12]
 8004f72:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f74:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f76:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004f7a:	e77b      	b.n	8004e74 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004f80:	2d00      	cmp	r5, #0
 8004f82:	d066      	beq.n	8005052 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004f84:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f88:	3501      	adds	r5, #1
 8004f8a:	06ad      	lsls	r5, r5, #26
 8004f8c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	d05a      	beq.n	800504e <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004f98:	fab6 f686 	clz	r6, r6
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	f006 061f 	and.w	r6, r6, #31
 8004fa2:	2701      	movs	r7, #1
 8004fa4:	fa07 f606 	lsl.w	r6, r7, r6
 8004fa8:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d052      	beq.n	8005058 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004fb2:	fab2 fc82 	clz	ip, r2
 8004fb6:	f10c 0c01 	add.w	ip, ip, #1
 8004fba:	f00c 0c1f 	and.w	ip, ip, #31
 8004fbe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004fc2:	ea4f 520c 	mov.w	r2, ip, lsl #20
 8004fc6:	e7a6      	b.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc8:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004fca:	f046 0620 	orr.w	r6, r6, #32
 8004fce:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004fd0:	e60a      	b.n	8004be8 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 8004fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fda:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004fe0:	680a      	ldr	r2, [r1, #0]
 8004fe2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004fe4:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fe8:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fec:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004ff0:	2e00      	cmp	r6, #0
 8004ff2:	f47f af1d 	bne.w	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8004ff6:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004ffa:	e7af      	b.n	8004f5c <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 8004ffc:	f8dc 2000 	ldr.w	r2, [ip]
 8005000:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005004:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005008:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800500a:	680a      	ldr	r2, [r1, #0]
 800500c:	68af      	ldr	r7, [r5, #8]
 800500e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005012:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005016:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800501a:	2e00      	cmp	r6, #0
 800501c:	f47f af16 	bne.w	8004e4c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 8005020:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005024:	e7a2      	b.n	8004f6c <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 8005026:	f8dc 2000 	ldr.w	r2, [ip]
 800502a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800502e:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005032:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005034:	680a      	ldr	r2, [r1, #0]
 8005036:	68ef      	ldr	r7, [r5, #12]
 8005038:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800503c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800503e:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005042:	2e00      	cmp	r6, #0
 8005044:	f47f af0f 	bne.w	8004e66 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8005048:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800504c:	e712      	b.n	8004e74 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 800504e:	2602      	movs	r6, #2
 8005050:	e7aa      	b.n	8004fa8 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 8005052:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005056:	e79b      	b.n	8004f90 <HAL_ADCEx_InjectedConfigChannel+0x514>
 8005058:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800505c:	e75b      	b.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800505e:	4a03      	ldr	r2, [pc, #12]	; (800506c <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 8005060:	e759      	b.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8005062:	2602      	movs	r6, #2
 8005064:	e732      	b.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x450>
 8005066:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800506a:	e722      	b.n	8004eb2 <HAL_ADCEx_InjectedConfigChannel+0x436>
 800506c:	fe500000 	.word	0xfe500000

08005070 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005070:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005072:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005076:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005078:	2a01      	cmp	r2, #1
{
 800507a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 800507c:	d04f      	beq.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800507e:	6804      	ldr	r4, [r0, #0]
 8005080:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005082:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005084:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005086:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800508a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 800508c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005090:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005092:	d008      	beq.n	80050a6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800509a:	f041 0120 	orr.w	r1, r1, #32
 800509e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80050a0:	b01c      	add	sp, #112	; 0x70
 80050a2:	bcf0      	pop	{r4, r5, r6, r7}
 80050a4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050a6:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80050a8:	6890      	ldr	r0, [r2, #8]
 80050aa:	0740      	lsls	r0, r0, #29
 80050ac:	d50b      	bpl.n	80050c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80050ae:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b2:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80050b6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b8:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80050c0:	b01c      	add	sp, #112	; 0x70
 80050c2:	bcf0      	pop	{r4, r5, r6, r7}
 80050c4:	4770      	bx	lr
 80050c6:	68a0      	ldr	r0, [r4, #8]
 80050c8:	0746      	lsls	r6, r0, #29
 80050ca:	d4f1      	bmi.n	80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050cc:	b1d5      	cbz	r5, 8005104 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050ce:	4e1a      	ldr	r6, [pc, #104]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80050d0:	684f      	ldr	r7, [r1, #4]
 80050d2:	68b0      	ldr	r0, [r6, #8]
 80050d4:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80050d8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80050dc:	4338      	orrs	r0, r7
 80050de:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80050e2:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050e4:	68a4      	ldr	r4, [r4, #8]
 80050e6:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e8:	4320      	orrs	r0, r4
 80050ea:	f010 0001 	ands.w	r0, r0, #1
 80050ee:	d114      	bne.n	800511a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 80050f0:	688a      	ldr	r2, [r1, #8]
 80050f2:	4315      	orrs	r5, r2
 80050f4:	68b2      	ldr	r2, [r6, #8]
 80050f6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80050fa:	f022 020f 	bic.w	r2, r2, #15
 80050fe:	4315      	orrs	r5, r2
 8005100:	60b5      	str	r5, [r6, #8]
 8005102:	e7da      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005104:	4d0c      	ldr	r5, [pc, #48]	; (8005138 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005106:	68a9      	ldr	r1, [r5, #8]
 8005108:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800510c:	60a9      	str	r1, [r5, #8]
 800510e:	68a1      	ldr	r1, [r4, #8]
 8005110:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005112:	4308      	orrs	r0, r1
 8005114:	f010 0001 	ands.w	r0, r0, #1
 8005118:	d005      	beq.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800511a:	2000      	movs	r0, #0
 800511c:	e7cd      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800511e:	2002      	movs	r0, #2
}
 8005120:	b01c      	add	sp, #112	; 0x70
 8005122:	bcf0      	pop	{r4, r5, r6, r7}
 8005124:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005126:	68aa      	ldr	r2, [r5, #8]
 8005128:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800512c:	f022 020f 	bic.w	r2, r2, #15
 8005130:	60aa      	str	r2, [r5, #8]
 8005132:	e7c2      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8005134:	50000100 	.word	0x50000100
 8005138:	50000300 	.word	0x50000300

0800513c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800513c:	b1b0      	cbz	r0, 800516c <HAL_CORDIC_Init+0x30>
{
 800513e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005140:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005144:	4604      	mov	r4, r0
 8005146:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800514a:	b153      	cbz	r3, 8005162 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800514c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800514e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005150:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005152:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8005156:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 800515a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800515e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005160:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005162:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005166:	f7fe fe03 	bl	8003d70 <HAL_CORDIC_MspInit>
 800516a:	e7ef      	b.n	800514c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 800516c:	2001      	movs	r0, #1
}
 800516e:	4770      	bx	lr

08005170 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005170:	4907      	ldr	r1, [pc, #28]	; (8005190 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005172:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005174:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005176:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800517a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800517e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005180:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005182:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800518a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005194:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <HAL_NVIC_SetPriority+0x74>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800519c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800519e:	f1c3 0e07 	rsb	lr, r3, #7
 80051a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051aa:	bf28      	it	cs
 80051ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b0:	f1bc 0f06 	cmp.w	ip, #6
 80051b4:	d91b      	bls.n	80051ee <HAL_NVIC_SetPriority+0x5a>
 80051b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b8:	f04f 3cff 	mov.w	ip, #4294967295
 80051bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80051c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c4:	f04f 3cff 	mov.w	ip, #4294967295
 80051c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80051cc:	ea21 010c 	bic.w	r1, r1, ip
 80051d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80051d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80051d8:	db0c      	blt.n	80051f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80051de:	0109      	lsls	r1, r1, #4
 80051e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80051e4:	b2c9      	uxtb	r1, r1
 80051e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80051ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80051ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051f0:	4613      	mov	r3, r2
 80051f2:	e7e7      	b.n	80051c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_NVIC_SetPriority+0x78>)
 80051f6:	f000 000f 	and.w	r0, r0, #15
 80051fa:	0109      	lsls	r1, r1, #4
 80051fc:	4403      	add	r3, r0
 80051fe:	b2c9      	uxtb	r1, r1
 8005200:	7619      	strb	r1, [r3, #24]
 8005202:	f85d fb04 	ldr.w	pc, [sp], #4
 8005206:	bf00      	nop
 8005208:	e000ed00 	.word	0xe000ed00
 800520c:	e000ecfc 	.word	0xe000ecfc

08005210 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005210:	2800      	cmp	r0, #0
 8005212:	db08      	blt.n	8005226 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005214:	4a04      	ldr	r2, [pc, #16]	; (8005228 <HAL_NVIC_EnableIRQ+0x18>)
 8005216:	0941      	lsrs	r1, r0, #5
 8005218:	2301      	movs	r3, #1
 800521a:	f000 001f 	and.w	r0, r0, #31
 800521e:	fa03 f000 	lsl.w	r0, r3, r0
 8005222:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100

0800522c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800522c:	3801      	subs	r0, #1
 800522e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005232:	d210      	bcs.n	8005256 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005234:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005236:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523a:	4c08      	ldr	r4, [pc, #32]	; (800525c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8005242:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005246:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005248:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800524a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800524c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800524e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005252:	6119      	str	r1, [r3, #16]
 8005254:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005256:	2001      	movs	r0, #1
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <HAL_SYSTICK_IRQHandler>:
{
 8005264:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005266:	f7ff fffb 	bl	8005260 <HAL_SYSTICK_Callback>
}
 800526a:	bd08      	pop	{r3, pc}

0800526c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800526c:	2800      	cmp	r0, #0
 800526e:	d078      	beq.n	8005362 <HAL_DMA_Init+0xf6>
{
 8005270:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005272:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <HAL_DMA_Init+0xfc>)
 8005274:	6804      	ldr	r4, [r0, #0]
 8005276:	429c      	cmp	r4, r3
 8005278:	d95f      	bls.n	800533a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800527a:	4a3c      	ldr	r2, [pc, #240]	; (800536c <HAL_DMA_Init+0x100>)
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800527e:	493d      	ldr	r1, [pc, #244]	; (8005374 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005280:	4422      	add	r2, r4
 8005282:	fba3 3202 	umull	r3, r2, r3, r2
 8005286:	0912      	lsrs	r2, r2, #4
 8005288:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800528a:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800528c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800528e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8005292:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005294:	69c6      	ldr	r6, [r0, #28]
 8005296:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529a:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800529c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529e:	430b      	orrs	r3, r1
 80052a0:	6941      	ldr	r1, [r0, #20]
 80052a2:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a4:	6981      	ldr	r1, [r0, #24]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052aa:	fa5f fc84 	uxtb.w	ip, r4
 80052ae:	4e30      	ldr	r6, [pc, #192]	; (8005370 <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 80052b0:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80052b6:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ba:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052bc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80052c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80052c4:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80052c6:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80052c8:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052ca:	4e2b      	ldr	r6, [pc, #172]	; (8005378 <HAL_DMA_Init+0x10c>)
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_DMA_Init+0xfc>)
 80052ce:	492b      	ldr	r1, [pc, #172]	; (800537c <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052d0:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052d4:	429c      	cmp	r4, r3
 80052d6:	bf98      	it	ls
 80052d8:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052da:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052de:	4c28      	ldr	r4, [pc, #160]	; (8005380 <HAL_DMA_Init+0x114>)
 80052e0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052e2:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052e6:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052e8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052ec:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80052ee:	6484      	str	r4, [r0, #72]	; 0x48
 80052f0:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052f4:	d02a      	beq.n	800534c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052f6:	6845      	ldr	r5, [r0, #4]
 80052f8:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052fa:	3d01      	subs	r5, #1
 80052fc:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052fe:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005302:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005306:	d827      	bhi.n	8005358 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800530a:	491f      	ldr	r1, [pc, #124]	; (8005388 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800530c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800530e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005310:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005312:	f004 041f 	and.w	r4, r4, #31
 8005316:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800531a:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800531c:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005320:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005322:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_DMA_Init+0x120>)
 8005326:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005328:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800532a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800532c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800532e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005332:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8005336:	4618      	mov	r0, r3
}
 8005338:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_DMA_Init+0x124>)
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800533e:	4915      	ldr	r1, [pc, #84]	; (8005394 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005340:	4422      	add	r2, r4
 8005342:	fba3 3202 	umull	r3, r2, r3, r2
 8005346:	0912      	lsrs	r2, r2, #4
 8005348:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800534a:	e79e      	b.n	800528a <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800534c:	2400      	movs	r4, #0
 800534e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005350:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005354:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005358:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800535a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800535e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005360:	e7e2      	b.n	8005328 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8005362:	2001      	movs	r0, #1
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40020407 	.word	0x40020407
 800536c:	bffdfbf8 	.word	0xbffdfbf8
 8005370:	cccccccd 	.word	0xcccccccd
 8005374:	40020400 	.word	0x40020400
 8005378:	40020800 	.word	0x40020800
 800537c:	40020820 	.word	0x40020820
 8005380:	40020880 	.word	0x40020880
 8005384:	1000823f 	.word	0x1000823f
 8005388:	40020940 	.word	0x40020940
 800538c:	40020900 	.word	0x40020900
 8005390:	bffdfff8 	.word	0xbffdfff8
 8005394:	40020000 	.word	0x40020000

08005398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800539c:	680c      	ldr	r4, [r1, #0]
{
 800539e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053a0:	2c00      	cmp	r4, #0
 80053a2:	f000 8083 	beq.w	80054ac <HAL_GPIO_Init+0x114>
 80053a6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053aa:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005584 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 80053ae:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053b0:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053b4:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053b6:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 80053ba:	ea15 0804 	ands.w	r8, r5, r4
 80053be:	d06f      	beq.n	80054a0 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053c0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80053c4:	f007 0203 	and.w	r2, r7, #3
 80053c8:	1e51      	subs	r1, r2, #1
 80053ca:	2901      	cmp	r1, #1
 80053cc:	d971      	bls.n	80054b2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ce:	2a03      	cmp	r2, #3
 80053d0:	f040 80b0 	bne.w	8005534 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053d4:	fa02 f20c 	lsl.w	r2, r2, ip
 80053d8:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80053da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053dc:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053de:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053e0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 80053e4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053e6:	d05b      	beq.n	80054a0 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e8:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 80053f4:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80053f8:	f002 0201 	and.w	r2, r2, #1
 80053fc:	9203      	str	r2, [sp, #12]
 80053fe:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005400:	f023 0203 	bic.w	r2, r3, #3
 8005404:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005408:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800540c:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005410:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005412:	00ad      	lsls	r5, r5, #2
 8005414:	260f      	movs	r6, #15
 8005416:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800541a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800541e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005422:	d019      	beq.n	8005458 <HAL_GPIO_Init+0xc0>
 8005424:	4e51      	ldr	r6, [pc, #324]	; (800556c <HAL_GPIO_Init+0x1d4>)
 8005426:	42b0      	cmp	r0, r6
 8005428:	f000 808f 	beq.w	800554a <HAL_GPIO_Init+0x1b2>
 800542c:	4e50      	ldr	r6, [pc, #320]	; (8005570 <HAL_GPIO_Init+0x1d8>)
 800542e:	42b0      	cmp	r0, r6
 8005430:	f000 808f 	beq.w	8005552 <HAL_GPIO_Init+0x1ba>
 8005434:	4e4f      	ldr	r6, [pc, #316]	; (8005574 <HAL_GPIO_Init+0x1dc>)
 8005436:	42b0      	cmp	r0, r6
 8005438:	f000 8081 	beq.w	800553e <HAL_GPIO_Init+0x1a6>
 800543c:	4e4e      	ldr	r6, [pc, #312]	; (8005578 <HAL_GPIO_Init+0x1e0>)
 800543e:	42b0      	cmp	r0, r6
 8005440:	f000 808d 	beq.w	800555e <HAL_GPIO_Init+0x1c6>
 8005444:	4e4d      	ldr	r6, [pc, #308]	; (800557c <HAL_GPIO_Init+0x1e4>)
 8005446:	42b0      	cmp	r0, r6
 8005448:	bf0c      	ite	eq
 800544a:	f04f 0e05 	moveq.w	lr, #5
 800544e:	f04f 0e06 	movne.w	lr, #6
 8005452:	fa0e f505 	lsl.w	r5, lr, r5
 8005456:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005458:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800545a:	4a49      	ldr	r2, [pc, #292]	; (8005580 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800545c:	4948      	ldr	r1, [pc, #288]	; (8005580 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 800545e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8005460:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005464:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8005466:	bf54      	ite	pl
 8005468:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800546a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 800546e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8005470:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005472:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005474:	4942      	ldr	r1, [pc, #264]	; (8005580 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005476:	bf54      	ite	pl
 8005478:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800547a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800547e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005480:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005482:	4a3f      	ldr	r2, [pc, #252]	; (8005580 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005484:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8005486:	bf54      	ite	pl
 8005488:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800548a:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 800548e:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005490:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005492:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005494:	493a      	ldr	r1, [pc, #232]	; (8005580 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005496:	bf54      	ite	pl
 8005498:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800549a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 800549e:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 80054a0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054a2:	fa34 f203 	lsrs.w	r2, r4, r3
 80054a6:	f10c 0c02 	add.w	ip, ip, #2
 80054aa:	d184      	bne.n	80053b6 <HAL_GPIO_Init+0x1e>
  }
}
 80054ac:	b005      	add	sp, #20
 80054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80054b2:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b4:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054b8:	f04f 0e03 	mov.w	lr, #3
 80054bc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80054c0:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054c4:	fa06 f60c 	lsl.w	r6, r6, ip
 80054c8:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 80054ca:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054cc:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 80054d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054d4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d8:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80054dc:	409d      	lsls	r5, r3
 80054de:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 80054e2:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80054e4:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054e6:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ea:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80054ee:	fa05 f50c 	lsl.w	r5, r5, ip
 80054f2:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f6:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80054f8:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fa:	fa02 f20c 	lsl.w	r2, r2, ip
 80054fe:	f47f af6c 	bne.w	80053da <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8005502:	08dd      	lsrs	r5, r3, #3
 8005504:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005508:	9501      	str	r5, [sp, #4]
 800550a:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800550c:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005510:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005512:	f003 0e07 	and.w	lr, r3, #7
 8005516:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800551a:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800551c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005520:	fa06 fe0e 	lsl.w	lr, r6, lr
 8005524:	9e00      	ldr	r6, [sp, #0]
 8005526:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800552a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800552c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005530:	6235      	str	r5, [r6, #32]
 8005532:	e752      	b.n	80053da <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005534:	2103      	movs	r1, #3
 8005536:	fa01 f10c 	lsl.w	r1, r1, ip
 800553a:	43c9      	mvns	r1, r1
 800553c:	e7d2      	b.n	80054e4 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800553e:	f04f 0e03 	mov.w	lr, #3
 8005542:	fa0e f505 	lsl.w	r5, lr, r5
 8005546:	4329      	orrs	r1, r5
 8005548:	e786      	b.n	8005458 <HAL_GPIO_Init+0xc0>
 800554a:	fa0b f505 	lsl.w	r5, fp, r5
 800554e:	4329      	orrs	r1, r5
 8005550:	e782      	b.n	8005458 <HAL_GPIO_Init+0xc0>
 8005552:	f04f 0e02 	mov.w	lr, #2
 8005556:	fa0e f505 	lsl.w	r5, lr, r5
 800555a:	4329      	orrs	r1, r5
 800555c:	e77c      	b.n	8005458 <HAL_GPIO_Init+0xc0>
 800555e:	f04f 0e04 	mov.w	lr, #4
 8005562:	fa0e f505 	lsl.w	r5, lr, r5
 8005566:	4329      	orrs	r1, r5
 8005568:	e776      	b.n	8005458 <HAL_GPIO_Init+0xc0>
 800556a:	bf00      	nop
 800556c:	48000400 	.word	0x48000400
 8005570:	48000800 	.word	0x48000800
 8005574:	48000c00 	.word	0x48000c00
 8005578:	48001000 	.word	0x48001000
 800557c:	48001400 	.word	0x48001400
 8005580:	40010400 	.word	0x40010400
 8005584:	40021000 	.word	0x40021000

08005588 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005588:	b10a      	cbz	r2, 800558e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800558a:	6181      	str	r1, [r0, #24]
 800558c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800558e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop

08005594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005594:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005596:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005598:	b970      	cbnz	r0, 80055b8 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055a8:	d023      	beq.n	80055f2 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80055ae:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80055b6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80055bc:	d009      	beq.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055be:	6813      	ldr	r3, [r2, #0]
}
 80055c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 80055cc:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055ce:	6013      	str	r3, [r2, #0]
}
 80055d0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055e0:	d02f      	beq.n	8005642 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80055e6:	2000      	movs	r0, #0
}
 80055e8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80055f0:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055fa:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055fc:	4c22      	ldr	r4, [pc, #136]	; (8005688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80055fe:	4823      	ldr	r0, [pc, #140]	; (800568c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005600:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005604:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005608:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	2132      	movs	r1, #50	; 0x32
 800560e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005612:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005614:	fba0 0303 	umull	r0, r3, r0, r3
 8005618:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800561c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005620:	d506      	bpl.n	8005630 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005622:	e000      	b.n	8005626 <HAL_PWREx_ControlVoltageScaling+0x92>
 8005624:	b123      	cbz	r3, 8005630 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005626:	6951      	ldr	r1, [r2, #20]
 8005628:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800562a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800562e:	d4f9      	bmi.n	8005624 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005630:	4b14      	ldr	r3, [pc, #80]	; (8005684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 8005636:	bf54      	ite	pl
 8005638:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800563a:	2003      	movmi	r0, #3
}
 800563c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005640:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800564a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800564c:	4c0e      	ldr	r4, [pc, #56]	; (8005688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800564e:	480f      	ldr	r0, [pc, #60]	; (800568c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005650:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005654:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005658:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	2132      	movs	r1, #50	; 0x32
 800565e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005662:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005664:	fba0 0303 	umull	r0, r3, r0, r3
 8005668:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800566a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800566c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005670:	d5de      	bpl.n	8005630 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005672:	e001      	b.n	8005678 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0db      	beq.n	8005630 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005678:	6951      	ldr	r1, [r2, #20]
 800567a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800567c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005680:	d5d6      	bpl.n	8005630 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005682:	e7f7      	b.n	8005674 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8005684:	40007000 	.word	0x40007000
 8005688:	2000042c 	.word	0x2000042c
 800568c:	431bde83 	.word	0x431bde83

08005690 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005690:	4a02      	ldr	r2, [pc, #8]	; (800569c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005692:	6893      	ldr	r3, [r2, #8]
 8005694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005698:	6093      	str	r3, [r2, #8]
}
 800569a:	4770      	bx	lr
 800569c:	40007000 	.word	0x40007000

080056a0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f000 81c3 	beq.w	8005a2c <HAL_RCC_OscConfig+0x38c>
{
 80056a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056aa:	6803      	ldr	r3, [r0, #0]
 80056ac:	07d9      	lsls	r1, r3, #31
{
 80056ae:	b082      	sub	sp, #8
 80056b0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b2:	d52d      	bpl.n	8005710 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b4:	49a6      	ldr	r1, [pc, #664]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 80056b6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ba:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056be:	2a0c      	cmp	r2, #12
 80056c0:	f000 810a 	beq.w	80058d8 <HAL_RCC_OscConfig+0x238>
 80056c4:	2a08      	cmp	r2, #8
 80056c6:	f000 810c 	beq.w	80058e2 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	f000 8133 	beq.w	800593a <HAL_RCC_OscConfig+0x29a>
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d8:	f000 819b 	beq.w	8005a12 <HAL_RCC_OscConfig+0x372>
 80056dc:	4d9c      	ldr	r5, [pc, #624]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 80056de:	682a      	ldr	r2, [r5, #0]
 80056e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	682a      	ldr	r2, [r5, #0]
 80056e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056ec:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8128 	bne.w	8005944 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fe fe3a 	bl	800436c <HAL_GetTick>
 80056f8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056fa:	e005      	b.n	8005708 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fe fe36 	bl	800436c <HAL_GetTick>
 8005700:	1b80      	subs	r0, r0, r6
 8005702:	2864      	cmp	r0, #100	; 0x64
 8005704:	f200 8142 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	039f      	lsls	r7, r3, #14
 800570c:	d4f6      	bmi.n	80056fc <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	079e      	lsls	r6, r3, #30
 8005712:	d528      	bpl.n	8005766 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005714:	4a8e      	ldr	r2, [pc, #568]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 8005716:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005718:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800571e:	2b0c      	cmp	r3, #12
 8005720:	f000 80ec 	beq.w	80058fc <HAL_RCC_OscConfig+0x25c>
 8005724:	2b04      	cmp	r3, #4
 8005726:	f000 80ee 	beq.w	8005906 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800572a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572c:	4d88      	ldr	r5, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 811d 	beq.w	800596e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fe fe16 	bl	800436c <HAL_GetTick>
 8005740:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005742:	e005      	b.n	8005750 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005744:	f7fe fe12 	bl	800436c <HAL_GetTick>
 8005748:	1b80      	subs	r0, r0, r6
 800574a:	2802      	cmp	r0, #2
 800574c:	f200 811e 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	0558      	lsls	r0, r3, #21
 8005754:	d5f6      	bpl.n	8005744 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005756:	686b      	ldr	r3, [r5, #4]
 8005758:	6922      	ldr	r2, [r4, #16]
 800575a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800575e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005762:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	071a      	lsls	r2, r3, #28
 8005768:	d519      	bpl.n	800579e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800576a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800576c:	4d78      	ldr	r5, [pc, #480]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 809e 	beq.w	80058b0 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005774:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fe fdf4 	bl	800436c <HAL_GetTick>
 8005784:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005786:	e005      	b.n	8005794 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005788:	f7fe fdf0 	bl	800436c <HAL_GetTick>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	2802      	cmp	r0, #2
 8005790:	f200 80fc 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005794:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005798:	079f      	lsls	r7, r3, #30
 800579a:	d5f5      	bpl.n	8005788 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	0759      	lsls	r1, r3, #29
 80057a0:	d541      	bpl.n	8005826 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057a2:	4b6b      	ldr	r3, [pc, #428]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 80057a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057a6:	00d2      	lsls	r2, r2, #3
 80057a8:	f100 80f4 	bmi.w	8005994 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057b2:	659a      	str	r2, [r3, #88]	; 0x58
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80057be:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c0:	4e64      	ldr	r6, [pc, #400]	; (8005954 <HAL_RCC_OscConfig+0x2b4>)
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	05df      	lsls	r7, r3, #23
 80057c6:	f140 8113 	bpl.w	80059f0 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f000 80e3 	beq.w	8005998 <HAL_RCC_OscConfig+0x2f8>
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	f000 8169 	beq.w	8005aaa <HAL_RCC_OscConfig+0x40a>
 80057d8:	4e5d      	ldr	r6, [pc, #372]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 80057da:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80057e6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 80d7 	bne.w	80059a6 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fe fdb8 	bl	800436c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005800:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005802:	e005      	b.n	8005810 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fe fdb2 	bl	800436c <HAL_GetTick>
 8005808:	1bc0      	subs	r0, r0, r7
 800580a:	4540      	cmp	r0, r8
 800580c:	f200 80be 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005810:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005814:	079a      	lsls	r2, r3, #30
 8005816:	d4f5      	bmi.n	8005804 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005818:	b125      	cbz	r5, 8005824 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581a:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 800581c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005822:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	069b      	lsls	r3, r3, #26
 8005828:	d518      	bpl.n	800585c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800582a:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800582c:	4d48      	ldr	r5, [pc, #288]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80ca 	beq.w	80059c8 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8005834:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005840:	f7fe fd94 	bl	800436c <HAL_GetTick>
 8005844:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005846:	e005      	b.n	8005854 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005848:	f7fe fd90 	bl	800436c <HAL_GetTick>
 800584c:	1b80      	subs	r0, r0, r6
 800584e:	2802      	cmp	r0, #2
 8005850:	f200 809c 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005854:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005858:	079f      	lsls	r7, r3, #30
 800585a:	d5f5      	bpl.n	8005848 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800585c:	69e0      	ldr	r0, [r4, #28]
 800585e:	b318      	cbz	r0, 80058a8 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005860:	4d3b      	ldr	r5, [pc, #236]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 8005862:	68ab      	ldr	r3, [r5, #8]
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b0c      	cmp	r3, #12
 800586a:	f000 812c 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005870:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005876:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005878:	f000 80da 	beq.w	8005a30 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800587c:	68eb      	ldr	r3, [r5, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005884:	68eb      	ldr	r3, [r5, #12]
 8005886:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fe fd6c 	bl	800436c <HAL_GetTick>
 8005894:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005896:	e004      	b.n	80058a2 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fe fd68 	bl	800436c <HAL_GetTick>
 800589c:	1b00      	subs	r0, r0, r4
 800589e:	2802      	cmp	r0, #2
 80058a0:	d874      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	d4f7      	bmi.n	8005898 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80058a8:	2000      	movs	r0, #0
}
 80058aa:	b002      	add	sp, #8
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80058b0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80058bc:	f7fe fd56 	bl	800436c <HAL_GetTick>
 80058c0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058c2:	e004      	b.n	80058ce <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c4:	f7fe fd52 	bl	800436c <HAL_GetTick>
 80058c8:	1b80      	subs	r0, r0, r6
 80058ca:	2802      	cmp	r0, #2
 80058cc:	d85e      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80058d2:	0798      	lsls	r0, r3, #30
 80058d4:	d4f6      	bmi.n	80058c4 <HAL_RCC_OscConfig+0x224>
 80058d6:	e761      	b.n	800579c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058dc:	2903      	cmp	r1, #3
 80058de:	f47f aef4 	bne.w	80056ca <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e2:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	0392      	lsls	r2, r2, #14
 80058e8:	f57f af12 	bpl.w	8005710 <HAL_RCC_OscConfig+0x70>
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	f47f af0e 	bne.w	8005710 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80058f4:	2001      	movs	r0, #1
}
 80058f6:	b002      	add	sp, #8
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058fc:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005900:	2a02      	cmp	r2, #2
 8005902:	f47f af12 	bne.w	800572a <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	055d      	lsls	r5, r3, #21
 800590c:	d502      	bpl.n	8005914 <HAL_RCC_OscConfig+0x274>
 800590e:	68e3      	ldr	r3, [r4, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ef      	beq.n	80058f4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 8005916:	6920      	ldr	r0, [r4, #16]
 8005918:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800591a:	490f      	ldr	r1, [pc, #60]	; (8005958 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005920:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005924:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005926:	6808      	ldr	r0, [r1, #0]
 8005928:	f7fe fcde 	bl	80042e8 <HAL_InitTick>
 800592c:	2800      	cmp	r0, #0
 800592e:	d1e1      	bne.n	80058f4 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	071a      	lsls	r2, r3, #28
 8005934:	f57f af33 	bpl.w	800579e <HAL_RCC_OscConfig+0xfe>
 8005938:	e717      	b.n	800576a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800593a:	4a05      	ldr	r2, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005942:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005944:	f7fe fd12 	bl	800436c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005948:	4e01      	ldr	r6, [pc, #4]	; (8005950 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800594a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594c:	e00b      	b.n	8005966 <HAL_RCC_OscConfig+0x2c6>
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	20000434 	.word	0x20000434
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800595c:	f7fe fd06 	bl	800436c <HAL_GetTick>
 8005960:	1b40      	subs	r0, r0, r5
 8005962:	2864      	cmp	r0, #100	; 0x64
 8005964:	d812      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005966:	6833      	ldr	r3, [r6, #0]
 8005968:	039b      	lsls	r3, r3, #14
 800596a:	d5f7      	bpl.n	800595c <HAL_RCC_OscConfig+0x2bc>
 800596c:	e6cf      	b.n	800570e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005974:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005976:	f7fe fcf9 	bl	800436c <HAL_GetTick>
 800597a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	0559      	lsls	r1, r3, #21
 8005980:	d5d6      	bpl.n	8005930 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005982:	f7fe fcf3 	bl	800436c <HAL_GetTick>
 8005986:	1b80      	subs	r0, r0, r6
 8005988:	2802      	cmp	r0, #2
 800598a:	d9f7      	bls.n	800597c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800598c:	2003      	movs	r0, #3
}
 800598e:	b002      	add	sp, #8
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005994:	2500      	movs	r5, #0
 8005996:	e713      	b.n	80057c0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <HAL_RCC_OscConfig+0x490>)
 800599a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80059a6:	f7fe fce1 	bl	800436c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	4f61      	ldr	r7, [pc, #388]	; (8005b30 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80059ac:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b2:	e004      	b.n	80059be <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f7fe fcda 	bl	800436c <HAL_GetTick>
 80059b8:	1b80      	subs	r0, r0, r6
 80059ba:	4540      	cmp	r0, r8
 80059bc:	d8e6      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059c2:	0799      	lsls	r1, r3, #30
 80059c4:	d5f6      	bpl.n	80059b4 <HAL_RCC_OscConfig+0x314>
 80059c6:	e727      	b.n	8005818 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80059c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80059d4:	f7fe fcca 	bl	800436c <HAL_GetTick>
 80059d8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059da:	e004      	b.n	80059e6 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059dc:	f7fe fcc6 	bl	800436c <HAL_GetTick>
 80059e0:	1b80      	subs	r0, r0, r6
 80059e2:	2802      	cmp	r0, #2
 80059e4:	d8d2      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80059ea:	0798      	lsls	r0, r3, #30
 80059ec:	d4f6      	bmi.n	80059dc <HAL_RCC_OscConfig+0x33c>
 80059ee:	e735      	b.n	800585c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80059f8:	f7fe fcb8 	bl	800436c <HAL_GetTick>
 80059fc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059fe:	6833      	ldr	r3, [r6, #0]
 8005a00:	05d8      	lsls	r0, r3, #23
 8005a02:	f53f aee2 	bmi.w	80057ca <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a06:	f7fe fcb1 	bl	800436c <HAL_GetTick>
 8005a0a:	1bc0      	subs	r0, r0, r7
 8005a0c:	2802      	cmp	r0, #2
 8005a0e:	d9f6      	bls.n	80059fe <HAL_RCC_OscConfig+0x35e>
 8005a10:	e7bc      	b.n	800598c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a16:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a28:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a2a:	e78b      	b.n	8005944 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
}
 8005a2e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005a30:	f7fe fc9c 	bl	800436c <HAL_GetTick>
 8005a34:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a36:	e004      	b.n	8005a42 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fe fc98 	bl	800436c <HAL_GetTick>
 8005a3c:	1b80      	subs	r0, r0, r6
 8005a3e:	2802      	cmp	r0, #2
 8005a40:	d8a4      	bhi.n	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	0199      	lsls	r1, r3, #6
 8005a46:	d4f7      	bmi.n	8005a38 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a48:	68e9      	ldr	r1, [r5, #12]
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <HAL_RCC_OscConfig+0x494>)
 8005a4c:	6a22      	ldr	r2, [r4, #32]
 8005a4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a50:	4e37      	ldr	r6, [pc, #220]	; (8005b30 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a52:	400b      	ands	r3, r1
 8005a54:	4313      	orrs	r3, r2
 8005a56:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005a5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a5e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005a62:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005a66:	3801      	subs	r0, #1
 8005a68:	0849      	lsrs	r1, r1, #1
 8005a6a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005a6e:	3901      	subs	r1, #1
 8005a70:	0852      	lsrs	r2, r2, #1
 8005a72:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005a76:	3a01      	subs	r2, #1
 8005a78:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005a7c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a84:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a86:	68eb      	ldr	r3, [r5, #12]
 8005a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a8c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005a8e:	f7fe fc6d 	bl	800436c <HAL_GetTick>
 8005a92:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a94:	e005      	b.n	8005aa2 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fe fc69 	bl	800436c <HAL_GetTick>
 8005a9a:	1b00      	subs	r0, r0, r4
 8005a9c:	2802      	cmp	r0, #2
 8005a9e:	f63f af75 	bhi.w	800598c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa2:	6833      	ldr	r3, [r6, #0]
 8005aa4:	019a      	lsls	r2, r3, #6
 8005aa6:	d5f6      	bpl.n	8005a96 <HAL_RCC_OscConfig+0x3f6>
 8005aa8:	e6fe      	b.n	80058a8 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aaa:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_OscConfig+0x490>)
 8005aac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ab0:	f042 0204 	orr.w	r2, r2, #4
 8005ab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005ab8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac4:	e76f      	b.n	80059a6 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac6:	2801      	cmp	r0, #1
 8005ac8:	f43f aeef 	beq.w	80058aa <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005acc:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ace:	6a22      	ldr	r2, [r4, #32]
 8005ad0:	f003 0103 	and.w	r1, r3, #3
 8005ad4:	4291      	cmp	r1, r2
 8005ad6:	f47f af0d 	bne.w	80058f4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ada:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ae0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005ae6:	f47f af05 	bne.w	80058f4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005aec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005af0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005af4:	f47f aefe 	bne.w	80058f4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005af8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005afa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005afe:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005b02:	f47f aef7 	bne.w	80058f4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b08:	0852      	lsrs	r2, r2, #1
 8005b0a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005b0e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b10:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005b14:	f47f aeee 	bne.w	80058f4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005b1a:	0852      	lsrs	r2, r2, #1
 8005b1c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005b20:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b22:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8005b26:	bf14      	ite	ne
 8005b28:	2001      	movne	r0, #1
 8005b2a:	2000      	moveq	r0, #0
 8005b2c:	e6bd      	b.n	80058aa <HAL_RCC_OscConfig+0x20a>
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	019f800c 	.word	0x019f800c

08005b38 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b38:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x64>)
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	f002 020c 	and.w	r2, r2, #12
 8005b40:	2a04      	cmp	r2, #4
 8005b42:	d027      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	f002 020c 	and.w	r2, r2, #12
 8005b4a:	2a08      	cmp	r2, #8
 8005b4c:	d024      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	f002 020c 	and.w	r2, r2, #12
 8005b54:	2a0c      	cmp	r2, #12
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005b58:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005b5a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b5e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b60:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005b64:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b66:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005b6a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b6e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b70:	bf0c      	ite	eq
 8005b72:	4b0b      	ldreq	r3, [pc, #44]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b74:	4b0b      	ldrne	r3, [pc, #44]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005b76:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <HAL_RCC_GetSysClockFreq+0x64>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b82:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b86:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b88:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b8c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005b8e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005b92:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005b94:	4803      	ldr	r0, [pc, #12]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005b96:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0x68>)
 8005b9a:	4770      	bx	lr
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	016e3600 	.word	0x016e3600
 8005ba4:	00f42400 	.word	0x00f42400

08005ba8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f000 80ee 	beq.w	8005d8a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bae:	4a7f      	ldr	r2, [pc, #508]	; (8005dac <HAL_RCC_ClockConfig+0x204>)
{
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	d20c      	bcs.n	8005bdc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	428b      	cmp	r3, r1
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005bd6:	2001      	movs	r0, #1
}
 8005bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07df      	lsls	r7, r3, #31
 8005be0:	d563      	bpl.n	8005caa <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	2a03      	cmp	r2, #3
 8005be6:	f000 809a 	beq.w	8005d1e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bea:	4b71      	ldr	r3, [pc, #452]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bec:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bee:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf0:	f000 8091 	beq.w	8005d16 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf4:	055b      	lsls	r3, r3, #21
 8005bf6:	d5ee      	bpl.n	8005bd6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bf8:	f7ff ff9e 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005bfc:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <HAL_RCC_ClockConfig+0x20c>)
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	f200 80c5 	bhi.w	8005d8e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c04:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c06:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4e69      	ldr	r6, [pc, #420]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005c0c:	68b3      	ldr	r3, [r6, #8]
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	431a      	orrs	r2, r3
 8005c14:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005c16:	f7fe fba9 	bl	800436c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c1a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005c1e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c20:	e004      	b.n	8005c2c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c22:	f7fe fba3 	bl	800436c <HAL_GetTick>
 8005c26:	1bc0      	subs	r0, r0, r7
 8005c28:	4540      	cmp	r0, r8
 8005c2a:	d871      	bhi.n	8005d10 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2c:	68b3      	ldr	r3, [r6, #8]
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c38:	d1f3      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	079f      	lsls	r7, r3, #30
 8005c3e:	d436      	bmi.n	8005cae <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005c40:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005c44:	d103      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c46:	68b3      	ldr	r3, [r6, #8]
 8005c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4e:	4e57      	ldr	r6, [pc, #348]	; (8005dac <HAL_RCC_ClockConfig+0x204>)
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	42ab      	cmp	r3, r5
 8005c58:	d846      	bhi.n	8005ce8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	075a      	lsls	r2, r3, #29
 8005c5e:	d506      	bpl.n	8005c6e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c60:	4953      	ldr	r1, [pc, #332]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c6a:	4302      	orrs	r2, r0
 8005c6c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6e:	071b      	lsls	r3, r3, #28
 8005c70:	d507      	bpl.n	8005c82 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c72:	4a4f      	ldr	r2, [pc, #316]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005c74:	6921      	ldr	r1, [r4, #16]
 8005c76:	6893      	ldr	r3, [r2, #8]
 8005c78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005c7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c80:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c82:	f7ff ff59 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005c88:	4c4b      	ldr	r4, [pc, #300]	; (8005db8 <HAL_RCC_ClockConfig+0x210>)
 8005c8a:	6892      	ldr	r2, [r2, #8]
 8005c8c:	494b      	ldr	r1, [pc, #300]	; (8005dbc <HAL_RCC_ClockConfig+0x214>)
 8005c8e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005c92:	4603      	mov	r3, r0
 8005c94:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005c96:	484a      	ldr	r0, [pc, #296]	; (8005dc0 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c98:	f002 021f 	and.w	r2, r2, #31
 8005c9c:	40d3      	lsrs	r3, r2
 8005c9e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005ca0:	6800      	ldr	r0, [r0, #0]
}
 8005ca2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005ca6:	f7fe bb1f 	b.w	80042e8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005caa:	079e      	lsls	r6, r3, #30
 8005cac:	d5cf      	bpl.n	8005c4e <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cae:	0758      	lsls	r0, r3, #29
 8005cb0:	d504      	bpl.n	8005cbc <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb2:	493f      	ldr	r1, [pc, #252]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005cb4:	688a      	ldr	r2, [r1, #8]
 8005cb6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005cba:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	0719      	lsls	r1, r3, #28
 8005cbe:	d506      	bpl.n	8005cce <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005cc0:	4a3b      	ldr	r2, [pc, #236]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005cc2:	6893      	ldr	r3, [r2, #8]
 8005cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cc8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ccc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cce:	4a38      	ldr	r2, [pc, #224]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005cd0:	68a1      	ldr	r1, [r4, #8]
 8005cd2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4e35      	ldr	r6, [pc, #212]	; (8005dac <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cde:	6833      	ldr	r3, [r6, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	d9b8      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	f023 030f 	bic.w	r3, r3, #15
 8005cee:	432b      	orrs	r3, r5
 8005cf0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005cf2:	f7fe fb3b 	bl	800436c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005cfa:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	42ab      	cmp	r3, r5
 8005d04:	d0a9      	beq.n	8005c5a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d06:	f7fe fb31 	bl	800436c <HAL_GetTick>
 8005d0a:	1bc0      	subs	r0, r0, r7
 8005d0c:	4540      	cmp	r0, r8
 8005d0e:	d9f5      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005d10:	2003      	movs	r0, #3
}
 8005d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d16:	039a      	lsls	r2, r3, #14
 8005d18:	f53f af6e 	bmi.w	8005bf8 <HAL_RCC_ClockConfig+0x50>
 8005d1c:	e75b      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1e:	4924      	ldr	r1, [pc, #144]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	0180      	lsls	r0, r0, #6
 8005d24:	f57f af57 	bpl.w	8005bd6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d28:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d2a:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d2c:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8005d2e:	4f21      	ldr	r7, [pc, #132]	; (8005db4 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d30:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8005d34:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d36:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d3a:	bf0c      	ite	eq
 8005d3c:	4e21      	ldreq	r6, [pc, #132]	; (8005dc4 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d3e:	4e22      	ldrne	r6, [pc, #136]	; (8005dc8 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d40:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d42:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d46:	4e1a      	ldr	r6, [pc, #104]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d48:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005d4c:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d50:	68f0      	ldr	r0, [r6, #12]
 8005d52:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005d56:	3001      	adds	r0, #1
 8005d58:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005d5a:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005d5e:	42b9      	cmp	r1, r7
 8005d60:	d920      	bls.n	8005da4 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d62:	68b1      	ldr	r1, [r6, #8]
 8005d64:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x1ce>
 8005d6a:	f013 0902 	ands.w	r9, r3, #2
 8005d6e:	f43f af4c 	beq.w	8005c0a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	b9b3      	cbnz	r3, 8005da4 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d76:	490e      	ldr	r1, [pc, #56]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005d78:	688b      	ldr	r3, [r1, #8]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d84:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005d88:	e73f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005d8a:	2001      	movs	r0, #1
}
 8005d8c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d8e:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <HAL_RCC_ClockConfig+0x208>)
 8005d90:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d92:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9a:	ea43 0309 	orr.w	r3, r3, r9
 8005d9e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005da0:	6862      	ldr	r2, [r4, #4]
 8005da2:	e732      	b.n	8005c0a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005da4:	f04f 0900 	mov.w	r9, #0
 8005da8:	e72f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x62>
 8005daa:	bf00      	nop
 8005dac:	40022000 	.word	0x40022000
 8005db0:	40021000 	.word	0x40021000
 8005db4:	04c4b400 	.word	0x04c4b400
 8005db8:	08009124 	.word	0x08009124
 8005dbc:	2000042c 	.word	0x2000042c
 8005dc0:	20000434 	.word	0x20000434
 8005dc4:	016e3600 	.word	0x016e3600
 8005dc8:	00f42400 	.word	0x00f42400

08005dcc <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005dcc:	4b01      	ldr	r3, [pc, #4]	; (8005dd4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000042c 	.word	0x2000042c

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005dda:	4a06      	ldr	r2, [pc, #24]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005dde:	4906      	ldr	r1, [pc, #24]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005de0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005de4:	6808      	ldr	r0, [r1, #0]
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
 8005de8:	f003 031f 	and.w	r3, r3, #31
}
 8005dec:	40d8      	lsrs	r0, r3
 8005dee:	4770      	bx	lr
 8005df0:	40021000 	.word	0x40021000
 8005df4:	08009134 	.word	0x08009134
 8005df8:	2000042c 	.word	0x2000042c

08005dfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005dfe:	4a06      	ldr	r2, [pc, #24]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005e00:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005e02:	4906      	ldr	r1, [pc, #24]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e04:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005e08:	6808      	ldr	r0, [r1, #0]
 8005e0a:	5cd3      	ldrb	r3, [r2, r3]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
}
 8005e10:	40d8      	lsrs	r0, r3
 8005e12:	4770      	bx	lr
 8005e14:	40021000 	.word	0x40021000
 8005e18:	08009134 	.word	0x08009134
 8005e1c:	2000042c 	.word	0x2000042c

08005e20 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005e20:	4a02      	ldr	r2, [pc, #8]	; (8005e2c <HAL_RCC_EnableCSS+0xc>)
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e28:	6013      	str	r3, [r2, #0]
}
 8005e2a:	4770      	bx	lr
 8005e2c:	40021000 	.word	0x40021000

08005e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e34:	6803      	ldr	r3, [r0, #0]
{
 8005e36:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e38:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005e3c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e3e:	d056      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e40:	4b9f      	ldr	r3, [pc, #636]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e44:	00d5      	lsls	r5, r2, #3
 8005e46:	f140 810c 	bpl.w	8006062 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005e4a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e4c:	4d9d      	ldr	r5, [pc, #628]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e54:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e56:	f7fe fa89 	bl	800436c <HAL_GetTick>
 8005e5a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e5e:	f7fe fa85 	bl	800436c <HAL_GetTick>
 8005e62:	1b83      	subs	r3, r0, r6
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f200 8107 	bhi.w	8006078 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	05d8      	lsls	r0, r3, #23
 8005e6e:	d5f6      	bpl.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e70:	4d93      	ldr	r5, [pc, #588]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e72:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e76:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005e7a:	d027      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005e7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d025      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e82:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e86:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e92:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e9e:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ea2:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005ea4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ea8:	f140 8108 	bpl.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fe fa5e 	bl	800436c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005eb4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb8:	f7fe fa58 	bl	800436c <HAL_GetTick>
 8005ebc:	1b80      	subs	r0, r0, r6
 8005ebe:	4540      	cmp	r0, r8
 8005ec0:	f200 80da 	bhi.w	8006078 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ec4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d5f5      	bpl.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ece:	497c      	ldr	r1, [pc, #496]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ed0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005ed4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ede:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ee0:	b127      	cbz	r7, 8005eec <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee2:	4a77      	ldr	r2, [pc, #476]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ee4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	07de      	lsls	r6, r3, #31
 8005ef0:	d508      	bpl.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef2:	4973      	ldr	r1, [pc, #460]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ef4:	6865      	ldr	r5, [r4, #4]
 8005ef6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005efa:	f022 0203 	bic.w	r2, r2, #3
 8005efe:	432a      	orrs	r2, r5
 8005f00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f04:	079d      	lsls	r5, r3, #30
 8005f06:	d508      	bpl.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f08:	496d      	ldr	r1, [pc, #436]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f0a:	68a5      	ldr	r5, [r4, #8]
 8005f0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f10:	f022 020c 	bic.w	r2, r2, #12
 8005f14:	432a      	orrs	r2, r5
 8005f16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f1a:	0759      	lsls	r1, r3, #29
 8005f1c:	d508      	bpl.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f1e:	4968      	ldr	r1, [pc, #416]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f20:	68e5      	ldr	r5, [r4, #12]
 8005f22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f26:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005f2a:	432a      	orrs	r2, r5
 8005f2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f30:	071a      	lsls	r2, r3, #28
 8005f32:	d508      	bpl.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f34:	4962      	ldr	r1, [pc, #392]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f36:	6925      	ldr	r5, [r4, #16]
 8005f38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f3c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f40:	432a      	orrs	r2, r5
 8005f42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f46:	069f      	lsls	r7, r3, #26
 8005f48:	d508      	bpl.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f4a:	495d      	ldr	r1, [pc, #372]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f4c:	6965      	ldr	r5, [r4, #20]
 8005f4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f56:	432a      	orrs	r2, r5
 8005f58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f5c:	065e      	lsls	r6, r3, #25
 8005f5e:	d508      	bpl.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f60:	4957      	ldr	r1, [pc, #348]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f62:	69a5      	ldr	r5, [r4, #24]
 8005f64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f6c:	432a      	orrs	r2, r5
 8005f6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f72:	061d      	lsls	r5, r3, #24
 8005f74:	d508      	bpl.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f76:	4952      	ldr	r1, [pc, #328]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f78:	69e5      	ldr	r5, [r4, #28]
 8005f7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f82:	432a      	orrs	r2, r5
 8005f84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f88:	05d9      	lsls	r1, r3, #23
 8005f8a:	d508      	bpl.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f8c:	494c      	ldr	r1, [pc, #304]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f8e:	6a25      	ldr	r5, [r4, #32]
 8005f90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005f98:	432a      	orrs	r2, r5
 8005f9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f9e:	059a      	lsls	r2, r3, #22
 8005fa0:	d508      	bpl.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fa2:	4947      	ldr	r1, [pc, #284]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fa4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fa6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005faa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005fae:	432a      	orrs	r2, r5
 8005fb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fb4:	055f      	lsls	r7, r3, #21
 8005fb6:	d50b      	bpl.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fb8:	4941      	ldr	r1, [pc, #260]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005fbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fc0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005fc4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fc6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fce:	d055      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fd0:	051e      	lsls	r6, r3, #20
 8005fd2:	d50b      	bpl.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fd4:	493a      	ldr	r1, [pc, #232]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fd6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005fd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fdc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005fe0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fe2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fe6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fea:	d04c      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fec:	04dd      	lsls	r5, r3, #19
 8005fee:	d50b      	bpl.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ff0:	4933      	ldr	r1, [pc, #204]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ff2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005ff4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ffc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ffe:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006002:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006006:	d043      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006008:	0499      	lsls	r1, r3, #18
 800600a:	d50b      	bpl.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800600c:	492c      	ldr	r1, [pc, #176]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800600e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006010:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006014:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006018:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800601a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800601e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006022:	d03a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006024:	045a      	lsls	r2, r3, #17
 8006026:	d50b      	bpl.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006028:	4925      	ldr	r1, [pc, #148]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800602a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800602c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006030:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006034:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006036:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800603a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800603e:	d031      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	d50b      	bpl.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006044:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006046:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006048:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800604c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006050:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006052:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006056:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800605a:	d028      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 800605c:	b002      	add	sp, #8
 800605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006064:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006068:	659a      	str	r2, [r3, #88]	; 0x58
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006074:	2701      	movs	r7, #1
 8006076:	e6e9      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006078:	2003      	movs	r0, #3
 800607a:	e731      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800607c:	68ca      	ldr	r2, [r1, #12]
 800607e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006082:	60ca      	str	r2, [r1, #12]
 8006084:	e7a4      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006086:	68ca      	ldr	r2, [r1, #12]
 8006088:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800608c:	60ca      	str	r2, [r1, #12]
 800608e:	e7ad      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006090:	68ca      	ldr	r2, [r1, #12]
 8006092:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006096:	60ca      	str	r2, [r1, #12]
 8006098:	e7b6      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609a:	68ca      	ldr	r2, [r1, #12]
 800609c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060a0:	60ca      	str	r2, [r1, #12]
 80060a2:	e7bf      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a4:	68ca      	ldr	r2, [r1, #12]
 80060a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060aa:	60ca      	str	r2, [r1, #12]
 80060ac:	e7c8      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060ae:	68d3      	ldr	r3, [r2, #12]
 80060b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b4:	60d3      	str	r3, [r2, #12]
}
 80060b6:	b002      	add	sp, #8
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	4613      	mov	r3, r2
 80060be:	e706      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40007000 	.word	0x40007000

080060c8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d0:	6a03      	ldr	r3, [r0, #32]
{
 80060d2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80060e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80060e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80060ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060ec:	4d13      	ldr	r5, [pc, #76]	; (800613c <TIM_OC1_SetConfig+0x74>)
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	d00f      	beq.n	8006112 <TIM_OC1_SetConfig+0x4a>
 80060f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80060f6:	42a8      	cmp	r0, r5
 80060f8:	d00b      	beq.n	8006112 <TIM_OC1_SetConfig+0x4a>
 80060fa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80060fe:	42a8      	cmp	r0, r5
 8006100:	d007      	beq.n	8006112 <TIM_OC1_SetConfig+0x4a>
 8006102:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006106:	42a8      	cmp	r0, r5
 8006108:	d003      	beq.n	8006112 <TIM_OC1_SetConfig+0x4a>
 800610a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800610e:	42a8      	cmp	r0, r5
 8006110:	d10d      	bne.n	800612e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006112:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006114:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006118:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800611a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800611e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006122:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006126:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800612a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006130:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006132:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006134:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006136:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006138:	6203      	str	r3, [r0, #32]
}
 800613a:	4770      	bx	lr
 800613c:	40012c00 	.word	0x40012c00

08006140 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006140:	6a03      	ldr	r3, [r0, #32]
 8006142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006146:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006148:	6a03      	ldr	r3, [r0, #32]
{
 800614a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006156:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800615a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800615e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006162:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006166:	4d15      	ldr	r5, [pc, #84]	; (80061bc <TIM_OC3_SetConfig+0x7c>)
 8006168:	42a8      	cmp	r0, r5
 800616a:	d010      	beq.n	800618e <TIM_OC3_SetConfig+0x4e>
 800616c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006170:	42a8      	cmp	r0, r5
 8006172:	d00c      	beq.n	800618e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006178:	42a8      	cmp	r0, r5
 800617a:	d00f      	beq.n	800619c <TIM_OC3_SetConfig+0x5c>
 800617c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006180:	42a8      	cmp	r0, r5
 8006182:	d00b      	beq.n	800619c <TIM_OC3_SetConfig+0x5c>
 8006184:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006188:	42a8      	cmp	r0, r5
 800618a:	d10f      	bne.n	80061ac <TIM_OC3_SetConfig+0x6c>
 800618c:	e006      	b.n	800619c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800618e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006194:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800619c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061a0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061a4:	ea46 0c05 	orr.w	ip, r6, r5
 80061a8:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80061b0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80061b2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80061b4:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80061b6:	6203      	str	r3, [r0, #32]
}
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40012c00 	.word	0x40012c00

080061c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c8:	6a03      	ldr	r3, [r0, #32]
{
 80061ca:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80061d6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061de:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80061e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061e8:	4d14      	ldr	r5, [pc, #80]	; (800623c <TIM_OC4_SetConfig+0x7c>)
 80061ea:	42a8      	cmp	r0, r5
 80061ec:	d010      	beq.n	8006210 <TIM_OC4_SetConfig+0x50>
 80061ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061f2:	42a8      	cmp	r0, r5
 80061f4:	d00c      	beq.n	8006210 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80061fa:	42a8      	cmp	r0, r5
 80061fc:	d00f      	beq.n	800621e <TIM_OC4_SetConfig+0x5e>
 80061fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006202:	42a8      	cmp	r0, r5
 8006204:	d00b      	beq.n	800621e <TIM_OC4_SetConfig+0x5e>
 8006206:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800620a:	42a8      	cmp	r0, r5
 800620c:	d10f      	bne.n	800622e <TIM_OC4_SetConfig+0x6e>
 800620e:	e006      	b.n	800621e <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006210:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006212:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006216:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800621a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800621e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006222:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006226:	ea46 0c05 	orr.w	ip, r6, r5
 800622a:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800622e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006230:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006232:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006234:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006236:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006238:	6203      	str	r3, [r0, #32]
}
 800623a:	4770      	bx	lr
 800623c:	40012c00 	.word	0x40012c00

08006240 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006240:	2800      	cmp	r0, #0
 8006242:	f000 8081 	beq.w	8006348 <HAL_TIM_Base_Init+0x108>
{
 8006246:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006248:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800624c:	4604      	mov	r4, r0
 800624e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006252:	2b00      	cmp	r3, #0
 8006254:	d06d      	beq.n	8006332 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006256:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006258:	493c      	ldr	r1, [pc, #240]	; (800634c <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006262:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	d051      	beq.n	800630a <HAL_TIM_Base_Init+0xca>
 8006266:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800626a:	d021      	beq.n	80062b0 <HAL_TIM_Base_Init+0x70>
 800626c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006270:	428a      	cmp	r2, r1
 8006272:	d01d      	beq.n	80062b0 <HAL_TIM_Base_Init+0x70>
 8006274:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006278:	428a      	cmp	r2, r1
 800627a:	d019      	beq.n	80062b0 <HAL_TIM_Base_Init+0x70>
 800627c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006280:	428a      	cmp	r2, r1
 8006282:	d042      	beq.n	800630a <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006284:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006288:	428a      	cmp	r2, r1
 800628a:	d057      	beq.n	800633c <HAL_TIM_Base_Init+0xfc>
 800628c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006290:	428a      	cmp	r2, r1
 8006292:	d053      	beq.n	800633c <HAL_TIM_Base_Init+0xfc>
 8006294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006298:	428a      	cmp	r2, r1
 800629a:	d04f      	beq.n	800633c <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80062a6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80062a8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062aa:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062ac:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ae:	e010      	b.n	80062d2 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80062b0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062b8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062be:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80062ca:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80062cc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ce:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062d0:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80062d2:	2301      	movs	r3, #1
 80062d4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80062de:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80062e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80062e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80062ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80062f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80062fe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006306:	2000      	movs	r0, #0
}
 8006308:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800630a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006312:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006318:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800631a:	69a1      	ldr	r1, [r4, #24]
 800631c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006320:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006322:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800632c:	6963      	ldr	r3, [r4, #20]
 800632e:	6313      	str	r3, [r2, #48]	; 0x30
 8006330:	e7cf      	b.n	80062d2 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8006332:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006336:	f7fd fd33 	bl	8003da0 <HAL_TIM_Base_MspInit>
 800633a:	e78c      	b.n	8006256 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006344:	4303      	orrs	r3, r0
 8006346:	e7e9      	b.n	800631c <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8006348:	2001      	movs	r0, #1
}
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00

08006350 <HAL_TIM_PWM_MspInit>:
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop

08006354 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006354:	2800      	cmp	r0, #0
 8006356:	f000 8081 	beq.w	800645c <HAL_TIM_PWM_Init+0x108>
{
 800635a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800635c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006360:	4604      	mov	r4, r0
 8006362:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06d      	beq.n	8006446 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800636a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800636c:	493c      	ldr	r1, [pc, #240]	; (8006460 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800636e:	2302      	movs	r3, #2
 8006370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006376:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006378:	d051      	beq.n	800641e <HAL_TIM_PWM_Init+0xca>
 800637a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800637e:	d021      	beq.n	80063c4 <HAL_TIM_PWM_Init+0x70>
 8006380:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006384:	428a      	cmp	r2, r1
 8006386:	d01d      	beq.n	80063c4 <HAL_TIM_PWM_Init+0x70>
 8006388:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800638c:	428a      	cmp	r2, r1
 800638e:	d019      	beq.n	80063c4 <HAL_TIM_PWM_Init+0x70>
 8006390:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006394:	428a      	cmp	r2, r1
 8006396:	d042      	beq.n	800641e <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006398:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800639c:	428a      	cmp	r2, r1
 800639e:	d057      	beq.n	8006450 <HAL_TIM_PWM_Init+0xfc>
 80063a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063a4:	428a      	cmp	r2, r1
 80063a6:	d053      	beq.n	8006450 <HAL_TIM_PWM_Init+0xfc>
 80063a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ac:	428a      	cmp	r2, r1
 80063ae:	d04f      	beq.n	8006450 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b0:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80063ba:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80063bc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063be:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063c0:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c2:	e010      	b.n	80063e6 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80063c4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063cc:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063da:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80063de:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80063e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063e4:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80063e6:	2301      	movs	r3, #1
 80063e8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80063f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80063f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80063fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80063fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800640a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800640e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006412:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800641a:	2000      	movs	r0, #0
}
 800641c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800641e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006420:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006426:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642e:	69a1      	ldr	r1, [r4, #24]
 8006430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006434:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006436:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006440:	6963      	ldr	r3, [r4, #20]
 8006442:	6313      	str	r3, [r2, #48]	; 0x30
 8006444:	e7cf      	b.n	80063e6 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8006446:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800644a:	f7ff ff81 	bl	8006350 <HAL_TIM_PWM_MspInit>
 800644e:	e78c      	b.n	800636a <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006450:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006452:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006458:	4303      	orrs	r3, r0
 800645a:	e7e9      	b.n	8006430 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 800645c:	2001      	movs	r0, #1
}
 800645e:	4770      	bx	lr
 8006460:	40012c00 	.word	0x40012c00

08006464 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006464:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	f000 8089 	beq.w	8006580 <HAL_TIM_ConfigClockSource+0x11c>
{
 800646e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006472:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006478:	2201      	movs	r2, #1
 800647a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800647e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006480:	4b5f      	ldr	r3, [pc, #380]	; (8006600 <HAL_TIM_ConfigClockSource+0x19c>)
 8006482:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006484:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006486:	680b      	ldr	r3, [r1, #0]
 8006488:	2b70      	cmp	r3, #112	; 0x70
 800648a:	f000 80a8 	beq.w	80065de <HAL_TIM_ConfigClockSource+0x17a>
 800648e:	d828      	bhi.n	80064e2 <HAL_TIM_ConfigClockSource+0x7e>
 8006490:	2b50      	cmp	r3, #80	; 0x50
 8006492:	d078      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x122>
 8006494:	d93e      	bls.n	8006514 <HAL_TIM_ConfigClockSource+0xb0>
 8006496:	2b60      	cmp	r3, #96	; 0x60
 8006498:	d11a      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800649a:	68cb      	ldr	r3, [r1, #12]
 800649c:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	6a21      	ldr	r1, [r4, #32]
 80064a0:	f021 0110 	bic.w	r1, r1, #16
 80064a4:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a6:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ac:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 80064b0:	6a23      	ldr	r3, [r4, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064b2:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80064b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80064bc:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064be:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2200      	movs	r2, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ce:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80064d2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80064d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80064dc:	bc70      	pop	{r4, r5, r6}
 80064de:	4610      	mov	r0, r2
 80064e0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	d069      	beq.n	80065bc <HAL_TIM_ConfigClockSource+0x158>
 80064e8:	d938      	bls.n	800655c <HAL_TIM_ConfigClockSource+0xf8>
 80064ea:	4946      	ldr	r1, [pc, #280]	; (8006604 <HAL_TIM_ConfigClockSource+0x1a0>)
 80064ec:	428b      	cmp	r3, r1
 80064ee:	d006      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 80064f0:	d92d      	bls.n	800654e <HAL_TIM_ConfigClockSource+0xea>
 80064f2:	4945      	ldr	r1, [pc, #276]	; (8006608 <HAL_TIM_ConfigClockSource+0x1a4>)
 80064f4:	428b      	cmp	r3, r1
 80064f6:	d002      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 80064f8:	3130      	adds	r1, #48	; 0x30
 80064fa:	428b      	cmp	r3, r1
 80064fc:	d1e8      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80064fe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006500:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006504:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006508:	430b      	orrs	r3, r1
 800650a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006510:	60a3      	str	r3, [r4, #8]
}
 8006512:	e7dd      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d126      	bne.n	8006566 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006518:	684a      	ldr	r2, [r1, #4]
 800651a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800651c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	6a25      	ldr	r5, [r4, #32]
 8006520:	f025 0501 	bic.w	r5, r5, #1
 8006524:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006528:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800652c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006530:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006532:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006536:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006538:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800653a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800653c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006544:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 800654a:	60a3      	str	r3, [r4, #8]
}
 800654c:	e7c0      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800654e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006552:	d0d4      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 8006554:	3910      	subs	r1, #16
 8006556:	428b      	cmp	r3, r1
 8006558:	d0d1      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 800655a:	e7b9      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800655c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8006560:	bf18      	it	ne
 8006562:	2201      	movne	r2, #1
 8006564:	e7b4      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006566:	d8b3      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
 8006568:	2b20      	cmp	r3, #32
 800656a:	d0c8      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 800656c:	d903      	bls.n	8006576 <HAL_TIM_ConfigClockSource+0x112>
 800656e:	2b30      	cmp	r3, #48	; 0x30
 8006570:	d0c5      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 8006572:	2201      	movs	r2, #1
 8006574:	e7ac      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
 8006576:	f033 0210 	bics.w	r2, r3, #16
 800657a:	d0c0      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x9a>
 800657c:	2201      	movs	r2, #1
 800657e:	e7a7      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 8006580:	2202      	movs	r2, #2
}
 8006582:	4610      	mov	r0, r2
 8006584:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006586:	684a      	ldr	r2, [r1, #4]
 8006588:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800658a:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800658c:	6a25      	ldr	r5, [r4, #32]
 800658e:	f025 0501 	bic.w	r5, r5, #1
 8006592:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006594:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006596:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800659a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800659e:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80065a4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80065a6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80065a8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065aa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80065b8:	60a3      	str	r3, [r4, #8]
}
 80065ba:	e789      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065bc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80065c0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c2:	68c9      	ldr	r1, [r1, #12]
 80065c4:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80065ce:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065d2:	68a3      	ldr	r3, [r4, #8]
 80065d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80065d8:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065da:	60a3      	str	r3, [r4, #8]
      break;
 80065dc:	e778      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065de:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80065e2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e4:	68c9      	ldr	r1, [r1, #12]
 80065e6:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80065f0:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80065f2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80065f4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 80065fc:	60a3      	str	r3, [r4, #8]
      break;
 80065fe:	e767      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x6c>
 8006600:	ffce0088 	.word	0xffce0088
 8006604:	00100030 	.word	0x00100030
 8006608:	00100040 	.word	0x00100040

0800660c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800660c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d069      	beq.n	80066e8 <HAL_TIM_SlaveConfigSynchro+0xdc>
 8006614:	4684      	mov	ip, r0
 8006616:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006618:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	2302      	movs	r3, #2
{
 800661c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800661e:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006622:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006626:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006628:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800662a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800662c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006634:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800663a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800663e:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8006640:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006642:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006644:	d05e      	beq.n	8006704 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8006646:	d816      	bhi.n	8006676 <HAL_TIM_SlaveConfigSynchro+0x6a>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d06e      	beq.n	800672a <HAL_TIM_SlaveConfigSynchro+0x11e>
 800664c:	d933      	bls.n	80066b6 <HAL_TIM_SlaveConfigSynchro+0xaa>
 800664e:	2b50      	cmp	r3, #80	; 0x50
 8006650:	d141      	bne.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	688a      	ldr	r2, [r1, #8]
 8006654:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 8006656:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006658:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800665c:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665e:	6a01      	ldr	r1, [r0, #32]
 8006660:	f021 0101 	bic.w	r1, r1, #1
 8006664:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006666:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800666c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006670:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006672:	6202      	str	r2, [r0, #32]
 8006674:	e00d      	b.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 8006676:	2b70      	cmp	r3, #112	; 0x70
 8006678:	d038      	beq.n	80066ec <HAL_TIM_SlaveConfigSynchro+0xe0>
 800667a:	2b6f      	cmp	r3, #111	; 0x6f
 800667c:	d92b      	bls.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
 800667e:	4a34      	ldr	r2, [pc, #208]	; (8006750 <HAL_TIM_SlaveConfigSynchro+0x144>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d006      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006684:	d91d      	bls.n	80066c2 <HAL_TIM_SlaveConfigSynchro+0xb6>
 8006686:	4a33      	ldr	r2, [pc, #204]	; (8006754 <HAL_TIM_SlaveConfigSynchro+0x148>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d002      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 800668c:	3230      	adds	r2, #48	; 0x30
 800668e:	4293      	cmp	r3, r2
 8006690:	d121      	bne.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006692:	68c3      	ldr	r3, [r0, #12]
 8006694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006698:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800669a:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 800669c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800669e:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80066a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a4:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 80066a6:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80066aa:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 80066ae:	4610      	mov	r0, r2
}
 80066b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d0eb      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 80066ba:	d909      	bls.n	80066d0 <HAL_TIM_SlaveConfigSynchro+0xc4>
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d10a      	bne.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
 80066c0:	e7e7      	b.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 80066c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066c6:	d0e4      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 80066c8:	3a10      	subs	r2, #16
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d0e1      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 80066ce:	e002      	b.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
 80066d0:	f033 0310 	bics.w	r3, r3, #16
 80066d4:	d0dd      	beq.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 80066d6:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80066d8:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80066da:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80066de:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 80066e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80066e8:	2002      	movs	r0, #2
}
 80066ea:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ec:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80066f0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f2:	6909      	ldr	r1, [r1, #16]
 80066f4:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80066fe:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8006700:	6083      	str	r3, [r0, #8]
 8006702:	e7c6      	b.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006704:	690b      	ldr	r3, [r1, #16]
 8006706:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006708:	6a01      	ldr	r1, [r0, #32]
 800670a:	f021 0110 	bic.w	r1, r1, #16
 800670e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006710:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006712:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006716:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 800671a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800671c:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006722:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 8006726:	6203      	str	r3, [r0, #32]
 8006728:	e7b3      	b.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800672a:	2c05      	cmp	r4, #5
 800672c:	d0d3      	beq.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
 800672e:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8006732:	d0d0      	beq.n	80066d6 <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8006734:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006736:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006738:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006740:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006746:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800674a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 800674c:	6204      	str	r4, [r0, #32]
      break;
 800674e:	e7a0      	b.n	8006692 <HAL_TIM_SlaveConfigSynchro+0x86>
 8006750:	00100030 	.word	0x00100030
 8006754:	00100040 	.word	0x00100040

08006758 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006758:	4a32      	ldr	r2, [pc, #200]	; (8006824 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800675a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	4290      	cmp	r0, r2
{
 800675e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006760:	d039      	beq.n	80067d6 <TIM_Base_SetConfig+0x7e>
 8006762:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006766:	d021      	beq.n	80067ac <TIM_Base_SetConfig+0x54>
 8006768:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800676c:	4290      	cmp	r0, r2
 800676e:	d01d      	beq.n	80067ac <TIM_Base_SetConfig+0x54>
 8006770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006774:	4290      	cmp	r0, r2
 8006776:	d019      	beq.n	80067ac <TIM_Base_SetConfig+0x54>
 8006778:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800677c:	4290      	cmp	r0, r2
 800677e:	d041      	beq.n	8006804 <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006780:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006784:	4290      	cmp	r0, r2
 8006786:	d047      	beq.n	8006818 <TIM_Base_SetConfig+0xc0>
 8006788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800678c:	4290      	cmp	r0, r2
 800678e:	d043      	beq.n	8006818 <TIM_Base_SetConfig+0xc0>
 8006790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006794:	4290      	cmp	r0, r2
 8006796:	d03f      	beq.n	8006818 <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006798:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800679a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800679c:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80067a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80067a8:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067aa:	e010      	b.n	80067ce <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 80067ac:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ae:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80067b4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ba:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c2:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c4:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80067c6:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80067c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ca:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80067cc:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80067ce:	2301      	movs	r3, #1
}
 80067d0:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80067d2:	6143      	str	r3, [r0, #20]
}
 80067d4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80067d6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80067de:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e6:	694a      	ldr	r2, [r1, #20]
 80067e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80067ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f0:	688b      	ldr	r3, [r1, #8]
 80067f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	690b      	ldr	r3, [r1, #16]
 80067fa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80067fc:	2301      	movs	r3, #1
}
 80067fe:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006800:	6143      	str	r3, [r0, #20]
}
 8006802:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006804:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800680c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800680e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006812:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006814:	694a      	ldr	r2, [r1, #20]
 8006816:	e7e7      	b.n	80067e8 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006818:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800681a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800681c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006820:	4323      	orrs	r3, r4
 8006822:	e7e1      	b.n	80067e8 <TIM_Base_SetConfig+0x90>
 8006824:	40012c00 	.word	0x40012c00

08006828 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006828:	6a03      	ldr	r3, [r0, #32]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006830:	6a03      	ldr	r3, [r0, #32]
{
 8006832:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006834:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006836:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006838:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800683e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006842:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006846:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006848:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800684c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006850:	4d14      	ldr	r5, [pc, #80]	; (80068a4 <TIM_OC2_SetConfig+0x7c>)
 8006852:	42a8      	cmp	r0, r5
 8006854:	d010      	beq.n	8006878 <TIM_OC2_SetConfig+0x50>
 8006856:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800685a:	42a8      	cmp	r0, r5
 800685c:	d00c      	beq.n	8006878 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006862:	42a8      	cmp	r0, r5
 8006864:	d00f      	beq.n	8006886 <TIM_OC2_SetConfig+0x5e>
 8006866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800686a:	42a8      	cmp	r0, r5
 800686c:	d00b      	beq.n	8006886 <TIM_OC2_SetConfig+0x5e>
 800686e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006872:	42a8      	cmp	r0, r5
 8006874:	d10f      	bne.n	8006896 <TIM_OC2_SetConfig+0x6e>
 8006876:	e006      	b.n	8006886 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800687a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006886:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800688a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800688e:	ea46 0c05 	orr.w	ip, r6, r5
 8006892:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006896:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006898:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800689a:	6182      	str	r2, [r0, #24]
}
 800689c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800689e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80068a0:	6203      	str	r3, [r0, #32]
}
 80068a2:	4770      	bx	lr
 80068a4:	40012c00 	.word	0x40012c00

080068a8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80068a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f000 80f4 	beq.w	8006a9a <HAL_TIM_PWM_ConfigChannel+0x1f2>
 80068b2:	2301      	movs	r3, #1
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80068ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80068be:	2a14      	cmp	r2, #20
 80068c0:	d80c      	bhi.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x34>
 80068c2:	e8df f002 	tbb	[pc, r2]
 80068c6:	0b53      	.short	0x0b53
 80068c8:	0b680b0b 	.word	0x0b680b0b
 80068cc:	0b7e0b0b 	.word	0x0b7e0b0b
 80068d0:	0b930b0b 	.word	0x0b930b0b
 80068d4:	0ba90b0b 	.word	0x0ba90b0b
 80068d8:	0b0b      	.short	0x0b0b
 80068da:	10          	.byte	0x10
 80068db:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80068dc:	2300      	movs	r3, #0
 80068de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80068e2:	2001      	movs	r0, #1
}
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068e6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80068f0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80068f2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80068f4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80068f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068f8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80068fc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006904:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006906:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800690a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690e:	4e64      	ldr	r6, [pc, #400]	; (8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006910:	42b3      	cmp	r3, r6
 8006912:	d00f      	beq.n	8006934 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006914:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006918:	42b3      	cmp	r3, r6
 800691a:	d00b      	beq.n	8006934 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800691c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006920:	42b3      	cmp	r3, r6
 8006922:	d007      	beq.n	8006934 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006924:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006928:	42b3      	cmp	r3, r6
 800692a:	d003      	beq.n	8006934 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800692c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006930:	42b3      	cmp	r3, r6
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006934:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006936:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800693a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800693e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006940:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006942:	6869      	ldr	r1, [r5, #4]
 8006944:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006946:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006948:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800694a:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800694c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006950:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006952:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006954:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006958:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800695a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800695c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006960:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006962:	2300      	movs	r3, #0
 8006964:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006968:	2000      	movs	r0, #0
}
 800696a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f7ff fbab 	bl	80060c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006972:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006974:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006976:	6999      	ldr	r1, [r3, #24]
 8006978:	f041 0108 	orr.w	r1, r1, #8
 800697c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800697e:	6999      	ldr	r1, [r3, #24]
 8006980:	f021 0104 	bic.w	r1, r1, #4
 8006984:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	4302      	orrs	r2, r0
 800698a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800698c:	2300      	movs	r3, #0
 800698e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2000      	movs	r0, #0
}
 8006994:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	f7ff ff46 	bl	8006828 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800699c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800699e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80069a6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069a8:	6999      	ldr	r1, [r3, #24]
 80069aa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80069ae:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80069b6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80069b8:	2300      	movs	r3, #0
 80069ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80069be:	2000      	movs	r0, #0
}
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	f7ff fbbc 	bl	8006140 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069cc:	69d9      	ldr	r1, [r3, #28]
 80069ce:	f041 0108 	orr.w	r1, r1, #8
 80069d2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069d4:	69d9      	ldr	r1, [r3, #28]
 80069d6:	f021 0104 	bic.w	r1, r1, #4
 80069da:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	4302      	orrs	r2, r0
 80069e0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2000      	movs	r0, #0
}
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f7ff fbe7 	bl	80061c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f6:	69d9      	ldr	r1, [r3, #28]
 80069f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80069fc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069fe:	69d9      	ldr	r1, [r3, #28]
 8006a00:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006a04:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006a0c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006a14:	2000      	movs	r0, #0
}
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a18:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006a1a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a22:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006a24:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006a26:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006a28:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a2a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006a2e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006a32:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a34:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006a36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a3a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3e:	4e18      	ldr	r6, [pc, #96]	; (8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006a40:	42b3      	cmp	r3, r6
 8006a42:	d00f      	beq.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006a44:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006a48:	42b3      	cmp	r3, r6
 8006a4a:	d00b      	beq.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006a4c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006a50:	42b3      	cmp	r3, r6
 8006a52:	d007      	beq.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006a54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a58:	42b3      	cmp	r3, r6
 8006a5a:	d003      	beq.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006a5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006a60:	42b3      	cmp	r3, r6
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a64:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a66:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a6a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006a6e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006a70:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006a72:	6869      	ldr	r1, [r5, #4]
 8006a74:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006a76:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a78:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a7a:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a7c:	f041 0108 	orr.w	r1, r1, #8
 8006a80:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a82:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a84:	f021 0104 	bic.w	r1, r1, #4
 8006a88:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a8c:	432a      	orrs	r2, r5
 8006a8e:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006a90:	2300      	movs	r3, #0
 8006a92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2000      	movs	r0, #0
}
 8006a98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006a9a:	2002      	movs	r0, #2
}
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00

08006aa4 <TIM_TI1_SetConfig>:
{
 8006aa4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa6:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aa8:	4e17      	ldr	r6, [pc, #92]	; (8006b08 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aaa:	f025 0501 	bic.w	r5, r5, #1
 8006aae:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ab0:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8006ab2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006ab4:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ab6:	d015      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
 8006ab8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006abc:	d012      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
 8006abe:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8006ac2:	42b0      	cmp	r0, r6
 8006ac4:	d00e      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
 8006ac6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006aca:	42b0      	cmp	r0, r6
 8006acc:	d00a      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
 8006ace:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8006ad2:	42b0      	cmp	r0, r6
 8006ad4:	d006      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
 8006ad6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006ada:	42b0      	cmp	r0, r6
 8006adc:	d002      	beq.n	8006ae4 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ade:	f044 0201 	orr.w	r2, r4, #1
 8006ae2:	e002      	b.n	8006aea <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8006ae8:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aea:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aec:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006af4:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006af6:	f001 010a 	and.w	r1, r1, #10
 8006afa:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006afc:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8006afe:	6183      	str	r3, [r0, #24]
}
 8006b00:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8006b02:	6201      	str	r1, [r0, #32]
}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00

08006b0c <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d065      	beq.n	8006be0 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8006b14:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d056      	beq.n	8006bd6 <HAL_TIMEx_HallSensor_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b28:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b34:	f7ff fe10 	bl	8006758 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006b38:	68ab      	ldr	r3, [r5, #8]
 8006b3a:	6829      	ldr	r1, [r5, #0]
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	f7ff ffb0 	bl	8006aa4 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b44:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006b46:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b48:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006b4a:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b4c:	f022 020c 	bic.w	r2, r2, #12
 8006b50:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006b52:	6983      	ldr	r3, [r0, #24]
 8006b54:	4333      	orrs	r3, r6
 8006b56:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006b58:	6843      	ldr	r3, [r0, #4]
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006b60:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006b62:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006b64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006b6e:	6883      	ldr	r3, [r0, #8]
 8006b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b74:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006b76:	6883      	ldr	r3, [r0, #8]
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006b82:	6883      	ldr	r3, [r0, #8]
 8006b84:	f043 0304 	orr.w	r3, r3, #4
 8006b88:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006b8a:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006b8c:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006b8e:	2370      	movs	r3, #112	; 0x70
 8006b90:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006b92:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b96:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006b9a:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006b9c:	f7ff fe44 	bl	8006828 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	684a      	ldr	r2, [r1, #4]
 8006ba4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006ba8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006bac:	604a      	str	r2, [r1, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006bae:	684a      	ldr	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb0:	2301      	movs	r3, #1
  return HAL_OK;
 8006bb2:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006bb4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006bb8:	604a      	str	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006bd2:	b008      	add	sp, #32
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006bda:	f7ff ff97 	bl	8006b0c <HAL_TIMEx_HallSensor_MspInit>
 8006bde:	e7a3      	b.n	8006b28 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8006be0:	2001      	movs	r0, #1
}
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d03e      	beq.n	8006c6a <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006bec:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;				// 0, reset value is also 0.
 8006bee:	6802      	ldr	r2, [r0, #0]
  	  	  	  	  	  	  	  	  	  	  	  	  // TS[4:0] = 00001, Internal Trigger 1 (tim_itr1)
  	  	  	  	  	  	  	  	  	  	  	  	  // SMS[3:0] = 0110, Trigger Mode, The counter starts at a rising edge of the trigger tim_trgi
  	  	  	  	  	  	  	  	  	  	  	  	  // (but it is not reset). Only the start of the counter is controlled.

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf0:	4d1f      	ldr	r5, [pc, #124]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf8:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;				// 0, reset value is also 0.
 8006bfa:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;				  // 22 = 0x16,
 8006bfc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bfe:	d028      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006c00:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006c04:	42aa      	cmp	r2, r5
 8006c06:	d024      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x6e>

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;				// TIM_CR2_MMS = 0x2000070,

  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;		// MMS[3:0] = 0111, Compare - tim_oc4refc signal is used as trigger output (tim_trgo)
 8006c08:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;				// TIM_CR2_MMS = 0x2000070,
 8006c0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;		// MMS[3:0] = 0111, Compare - tim_oc4refc signal is used as trigger output (tim_trgo)
 8006c12:	4333      	orrs	r3, r6
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;							// 0x70:
  	  	  	  	  	  	  	  	  	  	  	  	  	  	// MMS[3:0] = 0111, tim_trgo, Compare - tim_oc4refc signal is used as trigger output (tim_trgo)
  	  	  	  	  	  	  	  	  	  	  	  	  	  	// MMS2[3:0] = 0000, tim_trgo2, is reset. means the trgo2 is not used

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c14:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;							// 0x70:
 8006c18:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1a:	d00c      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006c1c:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d009      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d005      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006c2a:	42aa      	cmp	r2, r5
 8006c2c:	d003      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006c2e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d104      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;						// 0x16
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;		// MSM = 0, means not master mode, is slave mode.
 8006c36:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;						// 0x16
 8006c38:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;		// MSM = 0, means not master mode, is slave mode.
 8006c3c:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;					// 0x16
 8006c3e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006c40:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006c42:	2201      	movs	r2, #1
 8006c44:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006c48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006c4c:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006c4e:	4618      	mov	r0, r3
}
 8006c50:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2; 	// 0, MMS2[3:0] = 0000, Reset, tim_trgo2 is chosen
 8006c52:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;						// 0
 8006c54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2; 	// 0, MMS2[3:0] = 0000, Reset, tim_trgo2 is chosen
 8006c58:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;				// TIM_CR2_MMS = 0x2000070,
 8006c5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;		// MMS[3:0] = 0111, Compare - tim_oc4refc signal is used as trigger output (tim_trgo)
 8006c5e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;				// TIM_CR2_MMS = 0x2000070,
 8006c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;		// MMS[3:0] = 0111, Compare - tim_oc4refc signal is used as trigger output (tim_trgo)
 8006c64:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;							// 0x70:
 8006c66:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c68:	e7e5      	b.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8006c6a:	2002      	movs	r0, #2
}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40000400 	.word	0x40000400

08006c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d045      	beq.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006c80:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c82:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c8e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c90:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c96:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c9c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c9e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ca4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ca6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cac:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cb4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cb6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cb8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cbc:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cc2:	4c13      	ldr	r4, [pc, #76]	; (8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d00b      	beq.n	8006ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006cc8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d007      	beq.n	8006ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006cd0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006cd2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006cd4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006cd8:	4608      	mov	r0, r1
}
 8006cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cde:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ce0:	69cc      	ldr	r4, [r1, #28]
 8006ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ce8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006cea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cee:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cf2:	6a0c      	ldr	r4, [r1, #32]
 8006cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cfa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cfc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cfe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d02:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	e7e1      	b.n	8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006d0c:	2002      	movs	r0, #2
}
 8006d0e:	4770      	bx	lr
 8006d10:	40012c00 	.word	0x40012c00

08006d14 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d04b      	beq.n	8006db4 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8006d1c:	6813      	ldr	r3, [r2, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	2b0f      	cmp	r3, #15
{
 8006d22:	b4f0      	push	{r4, r5, r6, r7}
 8006d24:	d824      	bhi.n	8006d70 <HAL_TIMEx_ConfigBreakInput+0x5c>
 8006d26:	4c25      	ldr	r4, [pc, #148]	; (8006dbc <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8006d28:	4e25      	ldr	r6, [pc, #148]	; (8006dc0 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8006d2a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006d2e:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8006d32:	4c24      	ldr	r4, [pc, #144]	; (8006dc4 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8006d34:	4e24      	ldr	r6, [pc, #144]	; (8006dc8 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8006d36:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8006d3a:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006d3e:	2901      	cmp	r1, #1
 8006d40:	d01c      	beq.n	8006d7c <HAL_TIMEx_ConfigBreakInput+0x68>
 8006d42:	2902      	cmp	r1, #2
 8006d44:	d12f      	bne.n	8006da6 <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d46:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006d48:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d4a:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d4c:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 8006d50:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d52:	404b      	eors	r3, r1
 8006d54:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d56:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d58:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d5a:	405a      	eors	r2, r3
 8006d5c:	4014      	ands	r4, r2
 8006d5e:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006d60:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8006d62:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8006d64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d68:	2300      	movs	r3, #0

  return status;
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	bcf0      	pop	{r4, r5, r6, r7}
 8006d6e:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006d70:	2700      	movs	r7, #0
  switch (BreakInput)
 8006d72:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006d74:	46bc      	mov	ip, r7
 8006d76:	463c      	mov	r4, r7
 8006d78:	463d      	mov	r5, r7
  switch (BreakInput)
 8006d7a:	d1e2      	bne.n	8006d42 <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8006d7c:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d7e:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006d80:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d82:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d84:	fa03 f30c 	lsl.w	r3, r3, ip
 8006d88:	404b      	eors	r3, r1
 8006d8a:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d8c:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006d8e:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006d90:	405a      	eors	r2, r3
 8006d92:	4014      	ands	r4, r2
 8006d94:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 8006d96:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8006d98:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006d9a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	bcf0      	pop	{r4, r5, r6, r7}
 8006da4:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8006da6:	2200      	movs	r2, #0
 8006da8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 8006dac:	2301      	movs	r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	bcf0      	pop	{r4, r5, r6, r7}
 8006db2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006db4:	2302      	movs	r3, #2
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	0800913c 	.word	0x0800913c
 8006dc0:	080091bc 	.word	0x080091bc
 8006dc4:	0800917c 	.word	0x0800917c
 8006dc8:	080091fc 	.word	0x080091fc

08006dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dd0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dd2:	6882      	ldr	r2, [r0, #8]
 8006dd4:	6900      	ldr	r0, [r0, #16]
 8006dd6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dda:	4302      	orrs	r2, r0
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de0:	49a6      	ldr	r1, [pc, #664]	; (800707c <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de4:	4029      	ands	r1, r5
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	68e1      	ldr	r1, [r4, #12]
 8006dee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006df2:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df4:	49a2      	ldr	r1, [pc, #648]	; (8007080 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dfa:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dfc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dfe:	d06b      	beq.n	8006ed8 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8006e00:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e02:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006e06:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006e0a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e14:	f022 020f 	bic.w	r2, r2, #15
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e1c:	4a99      	ldr	r2, [pc, #612]	; (8007084 <UART_SetConfig+0x2b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d012      	beq.n	8006e48 <UART_SetConfig+0x7c>
 8006e22:	4a99      	ldr	r2, [pc, #612]	; (8007088 <UART_SetConfig+0x2bc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d036      	beq.n	8006e96 <UART_SetConfig+0xca>
 8006e28:	4a98      	ldr	r2, [pc, #608]	; (800708c <UART_SetConfig+0x2c0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f000 80fa 	beq.w	8007024 <UART_SetConfig+0x258>
 8006e30:	4a97      	ldr	r2, [pc, #604]	; (8007090 <UART_SetConfig+0x2c4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f000 80a5 	beq.w	8006f82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8006e38:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006e3c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8006e40:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006e44:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e48:	4b92      	ldr	r3, [pc, #584]	; (8007094 <UART_SetConfig+0x2c8>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	f240 808e 	bls.w	8006f76 <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e5a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e5e:	f000 80fe 	beq.w	800705e <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e62:	f7fe ffcb 	bl	8005dfc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f000 80da 	beq.w	8007020 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e6e:	6862      	ldr	r2, [r4, #4]
 8006e70:	4b89      	ldr	r3, [pc, #548]	; (8007098 <UART_SetConfig+0x2cc>)
 8006e72:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006e76:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7a:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e7e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8006e82:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e86:	f1a3 0210 	sub.w	r2, r3, #16
 8006e8a:	428a      	cmp	r2, r1
 8006e8c:	d8d4      	bhi.n	8006e38 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e8e:	6822      	ldr	r2, [r4, #0]
 8006e90:	2000      	movs	r0, #0
 8006e92:	60d3      	str	r3, [r2, #12]
 8006e94:	e7d1      	b.n	8006e3a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e96:	4b7f      	ldr	r3, [pc, #508]	; (8007094 <UART_SetConfig+0x2c8>)
 8006e98:	4a80      	ldr	r2, [pc, #512]	; (800709c <UART_SetConfig+0x2d0>)
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006ea8:	d07d      	beq.n	8006fa6 <UART_SetConfig+0x1da>
    switch (clocksource)
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d8c4      	bhi.n	8006e38 <UART_SetConfig+0x6c>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <UART_SetConfig+0xe8>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006fdf 	.word	0x08006fdf
 8006eb8:	08006e63 	.word	0x08006e63
 8006ebc:	0800705b 	.word	0x0800705b
 8006ec0:	08006e39 	.word	0x08006e39
 8006ec4:	08006fa1 	.word	0x08006fa1
 8006ec8:	08006e39 	.word	0x08006e39
 8006ecc:	08006e39 	.word	0x08006e39
 8006ed0:	08006e39 	.word	0x08006e39
 8006ed4:	0800704b 	.word	0x0800704b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed8:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006edc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ee8:	486a      	ldr	r0, [pc, #424]	; (8007094 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eea:	f022 020f 	bic.w	r2, r2, #15
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ef2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006ef6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	f000 80aa 	beq.w	8007056 <UART_SetConfig+0x28a>
 8006f02:	d80b      	bhi.n	8006f1c <UART_SetConfig+0x150>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d039      	beq.n	8006f7c <UART_SetConfig+0x1b0>
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0c:	d194      	bne.n	8006e38 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0e:	f7fe fe13 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f000 8084 	beq.w	8007020 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f1a:	e004      	b.n	8006f26 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f20:	d18a      	bne.n	8006e38 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8006f22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f26:	4b5c      	ldr	r3, [pc, #368]	; (8007098 <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f28:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f2a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8006f2e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f32:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006f36:	4299      	cmp	r1, r3
 8006f38:	f63f af7e 	bhi.w	8006e38 <UART_SetConfig+0x6c>
 8006f3c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006f40:	f63f af7a 	bhi.w	8006e38 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f44:	2300      	movs	r3, #0
 8006f46:	4619      	mov	r1, r3
 8006f48:	f7f9 f966 	bl	8000218 <__aeabi_uldivmod>
 8006f4c:	0209      	lsls	r1, r1, #8
 8006f4e:	0203      	lsls	r3, r0, #8
 8006f50:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006f54:	0868      	lsrs	r0, r5, #1
 8006f56:	1818      	adds	r0, r3, r0
 8006f58:	462a      	mov	r2, r5
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	f141 0100 	adc.w	r1, r1, #0
 8006f62:	f7f9 f959 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f66:	4a4e      	ldr	r2, [pc, #312]	; (80070a0 <UART_SetConfig+0x2d4>)
 8006f68:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006f6c:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f6e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f70:	f63f af62 	bhi.w	8006e38 <UART_SetConfig+0x6c>
 8006f74:	e78b      	b.n	8006e8e <UART_SetConfig+0xc2>
 8006f76:	4a4b      	ldr	r2, [pc, #300]	; (80070a4 <UART_SetConfig+0x2d8>)
 8006f78:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f7a:	e793      	b.n	8006ea4 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f7c:	f7fe ff2c 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
        break;
 8006f80:	e7c7      	b.n	8006f12 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f82:	4b44      	ldr	r3, [pc, #272]	; (8007094 <UART_SetConfig+0x2c8>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d06e      	beq.n	800706e <UART_SetConfig+0x2a2>
 8006f90:	d85e      	bhi.n	8007050 <UART_SetConfig+0x284>
 8006f92:	b30b      	cbz	r3, 8006fd8 <UART_SetConfig+0x20c>
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	f47f af4f 	bne.w	8006e38 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006f9e:	d021      	beq.n	8006fe4 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa0:	f7fe fdca 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
        break;
 8006fa4:	e75f      	b.n	8006e66 <UART_SetConfig+0x9a>
    switch (clocksource)
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	f63f af46 	bhi.w	8006e38 <UART_SetConfig+0x6c>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x1e8>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08007065 	.word	0x08007065
 8006fb8:	0800705f 	.word	0x0800705f
 8006fbc:	0800706b 	.word	0x0800706b
 8006fc0:	08006e39 	.word	0x08006e39
 8006fc4:	08006fe5 	.word	0x08006fe5
 8006fc8:	08006e39 	.word	0x08006e39
 8006fcc:	08006e39 	.word	0x08006e39
 8006fd0:	08006e39 	.word	0x08006e39
 8006fd4:	08006fed 	.word	0x08006fed
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006fdc:	d042      	beq.n	8007064 <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fde:	f7fe fefb 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
        break;
 8006fe2:	e740      	b.n	8006e66 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe4:	f7fe fda8 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006fe8:	b1d0      	cbz	r0, 8007020 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fec:	6862      	ldr	r2, [r4, #4]
 8006fee:	4b2a      	ldr	r3, [pc, #168]	; (8007098 <UART_SetConfig+0x2cc>)
 8006ff0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8006ff4:	fbb0 f0f1 	udiv	r0, r0, r1
 8006ff8:	0853      	lsrs	r3, r2, #1
 8006ffa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffe:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007002:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007006:	f1a0 0210 	sub.w	r2, r0, #16
 800700a:	429a      	cmp	r2, r3
 800700c:	f63f af14 	bhi.w	8006e38 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007010:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8007014:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007016:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800701c:	4318      	orrs	r0, r3
 800701e:	60d0      	str	r0, [r2, #12]
 8007020:	2000      	movs	r0, #0
 8007022:	e70a      	b.n	8006e3a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <UART_SetConfig+0x2c8>)
 8007026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800702e:	2b20      	cmp	r3, #32
 8007030:	d01d      	beq.n	800706e <UART_SetConfig+0x2a2>
 8007032:	d804      	bhi.n	800703e <UART_SetConfig+0x272>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0cf      	beq.n	8006fd8 <UART_SetConfig+0x20c>
 8007038:	2b10      	cmp	r3, #16
 800703a:	d0ae      	beq.n	8006f9a <UART_SetConfig+0x1ce>
 800703c:	e6fc      	b.n	8006e38 <UART_SetConfig+0x6c>
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	f47f aefa 	bne.w	8006e38 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007044:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007048:	d0d0      	beq.n	8006fec <UART_SetConfig+0x220>
    switch (clocksource)
 800704a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800704e:	e70e      	b.n	8006e6e <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007050:	2bc0      	cmp	r3, #192	; 0xc0
 8007052:	d0f7      	beq.n	8007044 <UART_SetConfig+0x278>
 8007054:	e6f0      	b.n	8006e38 <UART_SetConfig+0x6c>
 8007056:	4814      	ldr	r0, [pc, #80]	; (80070a8 <UART_SetConfig+0x2dc>)
 8007058:	e765      	b.n	8006f26 <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800705a:	4813      	ldr	r0, [pc, #76]	; (80070a8 <UART_SetConfig+0x2dc>)
 800705c:	e707      	b.n	8006e6e <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800705e:	f7fe fecd 	bl	8005dfc <HAL_RCC_GetPCLK2Freq>
        break;
 8007062:	e7c1      	b.n	8006fe8 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe feb8 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
        break;
 8007068:	e7be      	b.n	8006fe8 <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 800706a:	480f      	ldr	r0, [pc, #60]	; (80070a8 <UART_SetConfig+0x2dc>)
 800706c:	e7be      	b.n	8006fec <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007072:	480d      	ldr	r0, [pc, #52]	; (80070a8 <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007074:	f47f aefb 	bne.w	8006e6e <UART_SetConfig+0xa2>
 8007078:	e7b8      	b.n	8006fec <UART_SetConfig+0x220>
 800707a:	bf00      	nop
 800707c:	cfff69f3 	.word	0xcfff69f3
 8007080:	40008000 	.word	0x40008000
 8007084:	40013800 	.word	0x40013800
 8007088:	40004400 	.word	0x40004400
 800708c:	40004800 	.word	0x40004800
 8007090:	40004c00 	.word	0x40004c00
 8007094:	40021000 	.word	0x40021000
 8007098:	08009250 	.word	0x08009250
 800709c:	08009240 	.word	0x08009240
 80070a0:	000ffcff 	.word	0x000ffcff
 80070a4:	0800923c 	.word	0x0800923c
 80070a8:	00f42400 	.word	0x00f42400

080070ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070ae:	07da      	lsls	r2, r3, #31
{
 80070b0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070b2:	d506      	bpl.n	80070c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070b4:	6801      	ldr	r1, [r0, #0]
 80070b6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80070b8:	684a      	ldr	r2, [r1, #4]
 80070ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80070be:	4322      	orrs	r2, r4
 80070c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c2:	079c      	lsls	r4, r3, #30
 80070c4:	d506      	bpl.n	80070d4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c6:	6801      	ldr	r1, [r0, #0]
 80070c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80070ca:	684a      	ldr	r2, [r1, #4]
 80070cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070d0:	4322      	orrs	r2, r4
 80070d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d4:	0759      	lsls	r1, r3, #29
 80070d6:	d506      	bpl.n	80070e6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80070dc:	684a      	ldr	r2, [r1, #4]
 80070de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070e2:	4322      	orrs	r2, r4
 80070e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e6:	071a      	lsls	r2, r3, #28
 80070e8:	d506      	bpl.n	80070f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ea:	6801      	ldr	r1, [r0, #0]
 80070ec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80070ee:	684a      	ldr	r2, [r1, #4]
 80070f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f4:	4322      	orrs	r2, r4
 80070f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f8:	06dc      	lsls	r4, r3, #27
 80070fa:	d506      	bpl.n	800710a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070fc:	6801      	ldr	r1, [r0, #0]
 80070fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007100:	688a      	ldr	r2, [r1, #8]
 8007102:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007106:	4322      	orrs	r2, r4
 8007108:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710a:	0699      	lsls	r1, r3, #26
 800710c:	d506      	bpl.n	800711c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800710e:	6801      	ldr	r1, [r0, #0]
 8007110:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007112:	688a      	ldr	r2, [r1, #8]
 8007114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007118:	4322      	orrs	r2, r4
 800711a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800711c:	065a      	lsls	r2, r3, #25
 800711e:	d509      	bpl.n	8007134 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007120:	6801      	ldr	r1, [r0, #0]
 8007122:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007124:	684a      	ldr	r2, [r1, #4]
 8007126:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800712a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800712c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007130:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007132:	d00b      	beq.n	800714c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	d506      	bpl.n	8007146 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007138:	6802      	ldr	r2, [r0, #0]
 800713a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800713c:	6853      	ldr	r3, [r2, #4]
 800713e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007142:	430b      	orrs	r3, r1
 8007144:	6053      	str	r3, [r2, #4]
  }
}
 8007146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800714c:	684a      	ldr	r2, [r1, #4]
 800714e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007150:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007154:	4322      	orrs	r2, r4
 8007156:	604a      	str	r2, [r1, #4]
 8007158:	e7ec      	b.n	8007134 <UART_AdvFeatureConfig+0x88>
 800715a:	bf00      	nop

0800715c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007164:	6804      	ldr	r4, [r0, #0]
{
 8007166:	4607      	mov	r7, r0
 8007168:	460e      	mov	r6, r1
 800716a:	4615      	mov	r5, r2
 800716c:	4699      	mov	r9, r3
 800716e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007172:	d10a      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007174:	69e3      	ldr	r3, [r4, #28]
 8007176:	ea36 0303 	bics.w	r3, r6, r3
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	429d      	cmp	r5, r3
 8007182:	d0f7      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8007184:	2000      	movs	r0, #0
}
 8007186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718a:	69e3      	ldr	r3, [r4, #28]
 800718c:	ea36 0303 	bics.w	r3, r6, r3
 8007190:	bf0c      	ite	eq
 8007192:	2301      	moveq	r3, #1
 8007194:	2300      	movne	r3, #0
 8007196:	42ab      	cmp	r3, r5
 8007198:	d1f4      	bne.n	8007184 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719a:	f7fd f8e7 	bl	800436c <HAL_GetTick>
 800719e:	eba0 0009 	sub.w	r0, r0, r9
 80071a2:	4540      	cmp	r0, r8
 80071a4:	d833      	bhi.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d030      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ac:	683c      	ldr	r4, [r7, #0]
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	0759      	lsls	r1, r3, #29
 80071b2:	4622      	mov	r2, r4
 80071b4:	d5db      	bpl.n	800716e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b6:	69e3      	ldr	r3, [r4, #28]
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	d5d8      	bpl.n	800716e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071c0:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	e844 3100 	strex	r1, r3, [r4]
 80071ce:	b139      	cbz	r1, 80071e0 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	e852 3f00 	ldrex	r3, [r2]
 80071d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	e842 3100 	strex	r1, r3, [r2]
 80071dc:	2900      	cmp	r1, #0
 80071de:	d1f7      	bne.n	80071d0 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f102 0308 	add.w	r3, r2, #8
 80071e4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	f102 0008 	add.w	r0, r2, #8
 80071f0:	e840 3100 	strex	r1, r3, [r0]
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d1f3      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80071f8:	2320      	movs	r3, #32
 80071fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80071fe:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8007206:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800720c:	e7bb      	b.n	8007186 <UART_WaitOnFlagUntilTimeout+0x2a>
 800720e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	e842 3100 	strex	r1, r3, [r2]
 800721c:	2900      	cmp	r1, #0
 800721e:	d1f7      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	f102 0308 	add.w	r3, r2, #8
 8007224:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007228:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	f102 0008 	add.w	r0, r2, #8
 8007230:	e840 3100 	strex	r1, r3, [r0]
 8007234:	2900      	cmp	r1, #0
 8007236:	d1f3      	bne.n	8007220 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8007238:	2320      	movs	r3, #32
 800723a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800723e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8007246:	2003      	movs	r0, #3
 8007248:	e79d      	b.n	8007186 <UART_WaitOnFlagUntilTimeout+0x2a>
 800724a:	bf00      	nop

0800724c <HAL_UART_Init>:
  if (huart == NULL)
 800724c:	2800      	cmp	r0, #0
 800724e:	d066      	beq.n	800731e <HAL_UART_Init+0xd2>
{
 8007250:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007252:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007256:	b082      	sub	sp, #8
 8007258:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800725a:	2b00      	cmp	r3, #0
 800725c:	d04c      	beq.n	80072f8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800725e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	2324      	movs	r3, #36	; 0x24
 8007262:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800726c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800726e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007270:	f7ff fdac 	bl	8006dcc <UART_SetConfig>
 8007274:	2801      	cmp	r0, #1
 8007276:	d03c      	beq.n	80072f2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d135      	bne.n	80072ea <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	6859      	ldr	r1, [r3, #4]
 8007282:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8007286:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007288:	6899      	ldr	r1, [r3, #8]
 800728a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800728e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007290:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007292:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8007294:	f041 0101 	orr.w	r1, r1, #1
 8007298:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800729e:	f7fd f865 	bl	800436c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80072a8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072aa:	d40e      	bmi.n	80072ca <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	075b      	lsls	r3, r3, #29
 80072b0:	d427      	bmi.n	8007302 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80072ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80072be:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 80072c2:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80072c6:	b002      	add	sp, #8
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	462a      	mov	r2, r5
 80072d2:	4603      	mov	r3, r0
 80072d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff ff3f 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 80072de:	b9e0      	cbnz	r0, 800731a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	075b      	lsls	r3, r3, #29
 80072e6:	d40c      	bmi.n	8007302 <HAL_UART_Init+0xb6>
 80072e8:	e7e3      	b.n	80072b2 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff fede 	bl	80070ac <UART_AdvFeatureConfig>
 80072f0:	e7c5      	b.n	800727e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80072f2:	2001      	movs	r0, #1
}
 80072f4:	b002      	add	sp, #8
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80072f8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80072fc:	f7fc fdee 	bl	8003edc <HAL_UART_MspInit>
 8007300:	e7ad      	b.n	800725e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	4633      	mov	r3, r6
 800730c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007310:	4620      	mov	r0, r4
 8007312:	f7ff ff23 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 8007316:	2800      	cmp	r0, #0
 8007318:	d0cb      	beq.n	80072b2 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800731a:	2003      	movs	r0, #3
 800731c:	e7d3      	b.n	80072c6 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800731e:	2001      	movs	r0, #1
}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007324:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007328:	2b01      	cmp	r3, #1
 800732a:	d017      	beq.n	800735c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800732e:	2324      	movs	r3, #36	; 0x24
{
 8007330:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007336:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007338:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800733a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800733c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007340:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8007344:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007346:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007348:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800734a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800734e:	2220      	movs	r2, #32
 8007350:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8007354:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007358:	4618      	mov	r0, r3
}
 800735a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800735c:	2002      	movs	r0, #2
}
 800735e:	4770      	bx	lr

08007360 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007360:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007364:	2a01      	cmp	r2, #1
 8007366:	d037      	beq.n	80073d8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007368:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800736a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	2024      	movs	r0, #36	; 0x24
{
 800736e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007370:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007374:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007376:	6810      	ldr	r0, [r2, #0]
 8007378:	f020 0001 	bic.w	r0, r0, #1
 800737c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800737e:	6890      	ldr	r0, [r2, #8]
 8007380:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007384:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007386:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007388:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800738a:	b310      	cbz	r0, 80073d2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800738c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800738e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8007390:	4d12      	ldr	r5, [pc, #72]	; (80073dc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007392:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007396:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800739a:	4911      	ldr	r1, [pc, #68]	; (80073e0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800739c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073a4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ac:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ae:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b4:	fbb1 f1f5 	udiv	r1, r1, r5
 80073b8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80073bc:	2100      	movs	r1, #0
 80073be:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80073c2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80073c6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80073ca:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80073d0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80073d2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80073d4:	4608      	mov	r0, r1
 80073d6:	e7ef      	b.n	80073b8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80073d8:	2002      	movs	r0, #2
}
 80073da:	4770      	bx	lr
 80073dc:	08009268 	.word	0x08009268
 80073e0:	08009270 	.word	0x08009270

080073e4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80073e4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80073e8:	2a01      	cmp	r2, #1
 80073ea:	d037      	beq.n	800745c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80073ec:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ee:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80073f0:	2024      	movs	r0, #36	; 0x24
{
 80073f2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80073f4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80073fa:	6810      	ldr	r0, [r2, #0]
 80073fc:	f020 0001 	bic.w	r0, r0, #1
 8007400:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007402:	6890      	ldr	r0, [r2, #8]
 8007404:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007408:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800740a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800740c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800740e:	b310      	cbz	r0, 8007456 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007410:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007412:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007414:	4d12      	ldr	r5, [pc, #72]	; (8007460 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007416:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800741a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800741e:	4911      	ldr	r1, [pc, #68]	; (8007464 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007420:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007424:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007428:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800742c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007430:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007432:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007434:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007438:	fbb1 f1f5 	udiv	r1, r1, r5
 800743c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007440:	2100      	movs	r1, #0
 8007442:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007446:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007448:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800744a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800744e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007450:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007454:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007456:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007458:	4608      	mov	r0, r1
 800745a:	e7ef      	b.n	800743c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800745c:	2002      	movs	r0, #2
}
 800745e:	4770      	bx	lr
 8007460:	08009268 	.word	0x08009268
 8007464:	08009270 	.word	0x08009270

08007468 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007468:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800746a:	8840      	ldrh	r0, [r0, #2]
 800746c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007470:	0c00      	lsrs	r0, r0, #16
 8007472:	4770      	bx	lr

08007474 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007474:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007476:	8803      	ldrh	r3, [r0, #0]
 8007478:	140d      	asrs	r5, r1, #16
{
 800747a:	b084      	sub	sp, #16
 800747c:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800747e:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007482:	fb03 f303 	mul.w	r3, r3, r3
{
 8007486:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007488:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800748c:	428b      	cmp	r3, r1
 800748e:	da10      	bge.n	80074b2 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8007490:	8846      	ldrh	r6, [r0, #2]
 8007492:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8007496:	4282      	cmp	r2, r0
 8007498:	dd14      	ble.n	80074c4 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800749a:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800749c:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80074a0:	bfb8      	it	lt
 80074a2:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80074a4:	f7fa fcea 	bl	8001e7c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80074a8:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 80074aa:	bfb8      	it	lt
 80074ac:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 80074ae:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 80074b0:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 80074b2:	b2a4      	uxth	r4, r4
 80074b4:	2000      	movs	r0, #0
 80074b6:	f364 000f 	bfi	r0, r4, #0, #16
 80074ba:	b2ad      	uxth	r5, r5
 80074bc:	f365 401f 	bfi	r0, r5, #16, #16
}
 80074c0:	b004      	add	sp, #16
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80074c4:	1a98      	subs	r0, r3, r2
 80074c6:	f7fa fcd9 	bl	8001e7c <MCM_Sqrt>
        if (Vqd.q < 0)
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	daf0      	bge.n	80074b0 <Circle_Limitation+0x3c>
          new_q = -new_q;
 80074ce:	4240      	negs	r0, r0
 80074d0:	e7ee      	b.n	80074b0 <Circle_Limitation+0x3c>
 80074d2:	bf00      	nop

080074d4 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80074d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80074d6:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80074d8:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80074da:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80074de:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80074e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80074e6:	b083      	sub	sp, #12
 80074e8:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80074ea:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80074ec:	d04f      	beq.n	800758e <MCP_ReceivedPacket+0xba>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 80074ee:	4f59      	ldr	r7, [pc, #356]	; (8007654 <MCP_ReceivedPacket+0x180>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80074f0:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80074f2:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80074f6:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80074f8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80074fc:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80074fe:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007500:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007502:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007506:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007508:	f10c 3cff 	add.w	ip, ip, #4294967295
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800750c:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 800750e:	2600      	movs	r6, #0

    switch (command)
 8007510:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007512:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8007514:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007516:	fa1f f18c 	uxth.w	r1, ip
 800751a:	fa0f f28c 	sxth.w	r2, ip
    switch (command)
 800751e:	d829      	bhi.n	8007574 <MCP_ReceivedPacket+0xa0>
 8007520:	2b38      	cmp	r3, #56	; 0x38
 8007522:	d81e      	bhi.n	8007562 <MCP_ReceivedPacket+0x8e>
 8007524:	e8df f003 	tbb	[pc, r3]
 8007528:	1d1d1d5c 	.word	0x1d1d1d5c
 800752c:	1d1d1d1d 	.word	0x1d1d1d1d
 8007530:	1d1d1d64 	.word	0x1d1d1d64
 8007534:	1d1d1d1d 	.word	0x1d1d1d1d
 8007538:	1d1d1d57 	.word	0x1d1d1d57
 800753c:	1d1d1d1d 	.word	0x1d1d1d1d
 8007540:	1d1d1d4f 	.word	0x1d1d1d4f
 8007544:	1d1d1d1d 	.word	0x1d1d1d1d
 8007548:	1d1d1d49 	.word	0x1d1d1d49
 800754c:	1d1d1d1d 	.word	0x1d1d1d1d
 8007550:	1d1d1d69 	.word	0x1d1d1d69
 8007554:	1d1d1d1d 	.word	0x1d1d1d1d
 8007558:	1d1d1d45 	.word	0x1d1d1d45
 800755c:	1d1d1d1d 	.word	0x1d1d1d1d
 8007560:	74          	.byte	0x74
 8007561:	00          	.byte	0x00
 8007562:	2300      	movs	r3, #0
 8007564:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007566:	68a2      	ldr	r2, [r4, #8]
 8007568:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800756a:	89e3      	ldrh	r3, [r4, #14]
 800756c:	3301      	adds	r3, #1
 800756e:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8007570:	b003      	add	sp, #12
 8007572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8007574:	2b68      	cmp	r3, #104	; 0x68
 8007576:	d062      	beq.n	800763e <MCP_ReceivedPacket+0x16a>
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d068      	beq.n	8007650 <MCP_ReceivedPacket+0x17c>
 800757e:	2b48      	cmp	r3, #72	; 0x48
 8007580:	d1ef      	bne.n	8007562 <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 8007582:	4638      	mov	r0, r7
 8007584:	f7fa fbcc 	bl	8001d20 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007588:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800758a:	4630      	mov	r0, r6
        break;
 800758c:	e7eb      	b.n	8007566 <MCP_ReceivedPacket+0x92>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800758e:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007590:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007592:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8007594:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007598:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800759a:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 800759c:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 800759e:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80075a2:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80075a4:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80075a6:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 80075a8:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80075aa:	d037      	beq.n	800761c <MCP_ReceivedPacket+0x148>
        MCPResponse = MCP_CMD_OK;
 80075ac:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80075ae:	200d      	movs	r0, #13
 80075b0:	e7d9      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        if (IDLE == MCI_GetSTMState(pMCI))
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7fa faec 	bl	8001b90 <MCI_GetSTMState>
 80075b8:	b128      	cbz	r0, 80075c6 <MCP_ReceivedPacket+0xf2>
          (void)MCI_StopMotor(pMCI);
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7fa fb04 	bl	8001bc8 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80075c0:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 80075c2:	2000      	movs	r0, #0
 80075c4:	e7cf      	b.n	8007566 <MCP_ReceivedPacket+0x92>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7fa fae8 	bl	8001b9c <MCI_StartMotor>
 80075cc:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80075d0:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80075d2:	b2c0      	uxtb	r0, r0
 80075d4:	e7c7      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7fb fc80 	bl	8002edc <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80075dc:	89e3      	ldrh	r3, [r4, #14]
        break;
 80075de:	e7c2      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80075e0:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 80075e2:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80075e4:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 80075e6:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80075e8:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80075ea:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80075ec:	2000      	movs	r0, #0
      break;
 80075ee:	e7ba      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7fb f997 	bl	8002924 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80075f6:	89e3      	ldrh	r3, [r4, #14]
        break;
 80075f8:	e7b5      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        if (RUN == MCI_GetSTMState(pMCI))
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7fa fac8 	bl	8001b90 <MCI_GetSTMState>
 8007600:	2806      	cmp	r0, #6
 8007602:	d1dd      	bne.n	80075c0 <MCP_ReceivedPacket+0xec>
          MCI_StopRamp(pMCI);
 8007604:	4638      	mov	r0, r7
 8007606:	f7fa fb23 	bl	8001c50 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800760a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800760c:	2000      	movs	r0, #0
 800760e:	e7aa      	b.n	8007566 <MCP_ReceivedPacket+0x92>
        (void)MCI_FaultAcknowledged(pMCI);
 8007610:	4638      	mov	r0, r7
 8007612:	f7fa faf9 	bl	8001c08 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007616:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007618:	2000      	movs	r0, #0
        break;
 800761a:	e7a4      	b.n	8007566 <MCP_ReceivedPacket+0x92>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800761c:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 800761e:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007622:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007624:	490c      	ldr	r1, [pc, #48]	; (8007658 <MCP_ReceivedPacket+0x184>)
 8007626:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 800762a:	2e00      	cmp	r6, #0
 800762c:	d0be      	beq.n	80075ac <MCP_ReceivedPacket+0xd8>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	4629      	mov	r1, r5
 8007634:	f104 030e 	add.w	r3, r4, #14
 8007638:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800763a:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800763c:	e793      	b.n	8007566 <MCP_ReceivedPacket+0x92>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4629      	mov	r1, r5
 8007644:	f104 030e 	add.w	r3, r4, #14
 8007648:	f7fa fa26 	bl	8001a98 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800764c:	89e3      	ldrh	r3, [r4, #14]
        break;
 800764e:	e78a      	b.n	8007566 <MCP_ReceivedPacket+0x92>
    switch (command)
 8007650:	4633      	mov	r3, r6
 8007652:	e7e7      	b.n	8007624 <MCP_ReceivedPacket+0x150>
 8007654:	2000073c 	.word	0x2000073c
 8007658:	200018b8 	.word	0x200018b8

0800765c <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800765e:	7fc3      	ldrb	r3, [r0, #31]
 8007660:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007664:	429a      	cmp	r2, r3
{
 8007666:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007668:	d002      	beq.n	8007670 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 800766a:	3301      	adds	r3, #1
 800766c:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800766e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007670:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007676:	b1a5      	cbz	r5, 80076a2 <MCPA_dataLog+0x46>
 8007678:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800767a:	8ba2      	ldrh	r2, [r4, #28]
 800767c:	42aa      	cmp	r2, r5
 800767e:	d24e      	bcs.n	800771e <MCPA_dataLog+0xc2>
 8007680:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007684:	2bfe      	cmp	r3, #254	; 0xfe
 8007686:	d066      	beq.n	8007756 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007688:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800768c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 800768e:	8b22      	ldrh	r2, [r4, #24]
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	3202      	adds	r2, #2
 8007694:	2309      	movs	r3, #9
 8007696:	6845      	ldr	r5, [r0, #4]
 8007698:	b292      	uxth	r2, r2
 800769a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	8323      	strh	r3, [r4, #24]
}
 80076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80076a2:	4601      	mov	r1, r0
 80076a4:	2209      	movs	r2, #9
 80076a6:	f851 0b14 	ldr.w	r0, [r1], #20
 80076aa:	6803      	ldr	r3, [r0, #0]
 80076ac:	4798      	blx	r3
 80076ae:	b390      	cbz	r0, 8007716 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80076b0:	4b4b      	ldr	r3, [pc, #300]	; (80077e0 <MCPA_dataLog+0x184>)
 80076b2:	6961      	ldr	r1, [r4, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80076b8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80076bc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 80076c0:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 80076c4:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 80076c6:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 80076c8:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 80076ca:	d101      	bne.n	80076d0 <MCPA_dataLog+0x74>
 80076cc:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80076ce:	e7d4      	b.n	800767a <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 80076d0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 80076d4:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 80076d8:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 80076dc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 80076e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80076e4:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 80076e6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80076ea:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 80076ec:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 80076f0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80076f4:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 80076f6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80076fa:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 80076fc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8007700:	f001 fba2 	bl	8008e48 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8007704:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8007708:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800770c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8007710:	441a      	add	r2, r3
 8007712:	f001 fb99 	bl	8008e48 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007716:	8b25      	ldrh	r5, [r4, #24]
 8007718:	2d00      	cmp	r5, #0
 800771a:	d1ad      	bne.n	8007678 <MCPA_dataLog+0x1c>
}
 800771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800771e:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007722:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007724:	b36e      	cbz	r6, 8007782 <MCPA_dataLog+0x126>
 8007726:	68a2      	ldr	r2, [r4, #8]
 8007728:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 800772c:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800772e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007732:	8800      	ldrh	r0, [r0, #0]
 8007734:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007738:	8b25      	ldrh	r5, [r4, #24]
 800773a:	3502      	adds	r5, #2
 800773c:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800773e:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007740:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007742:	d1f4      	bne.n	800772e <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8007744:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007748:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800774a:	2bfd      	cmp	r3, #253	; 0xfd
 800774c:	4618      	mov	r0, r3
 800774e:	d91d      	bls.n	800778c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007750:	4295      	cmp	r5, r2
 8007752:	d897      	bhi.n	8007684 <MCPA_dataLog+0x28>
}
 8007754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007756:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800775a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800775e:	4418      	add	r0, r3
 8007760:	4298      	cmp	r0, r3
 8007762:	dd91      	ble.n	8007688 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007764:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007766:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007768:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007770:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007772:	5cf3      	ldrb	r3, [r6, r3]
 8007774:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007776:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007778:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800777a:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800777c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800777e:	dbf3      	blt.n	8007768 <MCPA_dataLog+0x10c>
 8007780:	e782      	b.n	8007688 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8007782:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8007786:	28fd      	cmp	r0, #253	; 0xfd
 8007788:	f63f af71 	bhi.w	800766e <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 800778c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007790:	4283      	cmp	r3, r0
 8007792:	d007      	beq.n	80077a4 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8007794:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007796:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8007798:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800779c:	42aa      	cmp	r2, r5
 800779e:	f4ff af73 	bcc.w	8007688 <MCPA_dataLog+0x2c>
}
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077a4:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80077a8:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80077aa:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077ac:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 80077ae:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077b2:	dd12      	ble.n	80077da <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80077b4:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80077b8:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80077bc:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80077be:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80077c6:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077ca:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80077cc:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077ce:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80077d0:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077d2:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80077d4:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80077d6:	dbf2      	blt.n	80077be <MCPA_dataLog+0x162>
 80077d8:	e7e0      	b.n	800779c <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80077da:	8b25      	ldrh	r5, [r4, #24]
 80077dc:	e7de      	b.n	800779c <MCPA_dataLog+0x140>
 80077de:	bf00      	nop
 80077e0:	20001988 	.word	0x20001988

080077e4 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 80077e4:	8b03      	ldrh	r3, [r0, #24]
 80077e6:	b19b      	cbz	r3, 8007810 <MCPA_flushDataLog+0x2c>
{
 80077e8:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 80077ea:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80077ee:	2afe      	cmp	r2, #254	; 0xfe
 80077f0:	4604      	mov	r4, r0
 80077f2:	d00e      	beq.n	8007812 <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80077f4:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80077f6:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80077fa:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 80077fc:	8b22      	ldrh	r2, [r4, #24]
 80077fe:	6820      	ldr	r0, [r4, #0]
 8007800:	3202      	adds	r2, #2
 8007802:	2309      	movs	r3, #9
 8007804:	6845      	ldr	r5, [r0, #4]
 8007806:	b292      	uxth	r2, r2
 8007808:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	8323      	strh	r3, [r4, #24]
  }   
}
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007812:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8007816:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800781a:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800781c:	4494      	add	ip, r2
 800781e:	4562      	cmp	r2, ip
 8007820:	dae9      	bge.n	80077f6 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007822:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007824:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007826:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800782e:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007830:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007832:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007834:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007836:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007838:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800783a:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800783c:	dbf3      	blt.n	8007826 <MCPA_flushDataLog+0x42>
 800783e:	e7da      	b.n	80077f6 <MCPA_flushDataLog+0x12>

08007840 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007844:	880f      	ldrh	r7, [r1, #0]
{
 8007846:	4604      	mov	r4, r0

    if (buffSize == 0)
 8007848:	2f00      	cmp	r7, #0
 800784a:	d044      	beq.n	80078d6 <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 800784c:	6803      	ldr	r3, [r0, #0]
 800784e:	89db      	ldrh	r3, [r3, #14]
 8007850:	42bb      	cmp	r3, r7
 8007852:	d33d      	bcc.n	80078d0 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007854:	788b      	ldrb	r3, [r1, #2]
 8007856:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 800785a:	78ca      	ldrb	r2, [r1, #3]
 800785c:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8007860:	790b      	ldrb	r3, [r1, #4]
 8007862:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8007866:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007868:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 800786a:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 800786e:	4416      	add	r6, r2
 8007870:	429e      	cmp	r6, r3
 8007872:	dc52      	bgt.n	800791a <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8007874:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007876:	2e00      	cmp	r6, #0
 8007878:	d056      	beq.n	8007928 <MCPA_cfgLog+0xe8>
 800787a:	2500      	movs	r5, #0
 800787c:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 800787e:	462e      	mov	r6, r5
 8007880:	e011      	b.n	80078a6 <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8007886:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007888:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800788c:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8007890:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007892:	f105 0c01 	add.w	ip, r5, #1
 8007896:	fa5f f58c 	uxtb.w	r5, ip
 800789a:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 800789c:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800789e:	429d      	cmp	r5, r3
        pCfgData++;
 80078a0:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 80078a2:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80078a4:	da11      	bge.n	80078ca <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 80078a6:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 80078aa:	6861      	ldr	r1, [r4, #4]
 80078ac:	4648      	mov	r0, r9
 80078ae:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80078b2:	f7fb fead 	bl	8003610 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 80078b6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	f04f 0002 	mov.w	r0, #2
 80078c0:	d8df      	bhi.n	8007882 <MCPA_cfgLog+0x42>
 80078c2:	4648      	mov	r0, r9
 80078c4:	f7fb fe98 	bl	80035f8 <RI_GetIDSize>
 80078c8:	e7db      	b.n	8007882 <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 80078ca:	1db3      	adds	r3, r6, #6
 80078cc:	429f      	cmp	r7, r3
 80078ce:	d21a      	bcs.n	8007906 <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80078d0:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80078d6:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 80078d8:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80078dc:	b153      	cbz	r3, 80078f4 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80078de:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80078e0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80078e4:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 80078e6:	8b22      	ldrh	r2, [r4, #24]
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	3202      	adds	r2, #2
 80078ec:	6845      	ldr	r5, [r0, #4]
 80078ee:	b292      	uxth	r2, r2
 80078f0:	2309      	movs	r3, #9
 80078f2:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 80078f4:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 80078f6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 80078fa:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 80078fc:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8007900:	8320      	strh	r0, [r4, #24]
}
 8007902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8007906:	1eba      	subs	r2, r7, #2
 8007908:	1b92      	subs	r2, r2, r6
 800790a:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 800790c:	780b      	ldrb	r3, [r1, #0]
 800790e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8007912:	b12b      	cbz	r3, 8007920 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8007914:	2000      	movs	r0, #0
}
 8007916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 800791a:	200a      	movs	r0, #10
}
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007920:	8b23      	ldrh	r3, [r4, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0e6      	beq.n	80078f4 <MCPA_cfgLog+0xb4>
 8007926:	e7da      	b.n	80078de <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007928:	2306      	movs	r3, #6
 800792a:	e7cf      	b.n	80078cc <MCPA_cfgLog+0x8c>

0800792c <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 800792c:	8a03      	ldrh	r3, [r0, #16]
 800792e:	8b42      	ldrh	r2, [r0, #26]
 8007930:	429a      	cmp	r2, r3
 8007932:	d306      	bcc.n	8007942 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8007934:	8b82      	ldrh	r2, [r0, #28]
 8007936:	429a      	cmp	r2, r3
 8007938:	d901      	bls.n	800793e <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 800793a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 800793c:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 800793e:	8ac0      	ldrh	r0, [r0, #22]
 8007940:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8007942:	2008      	movs	r0, #8
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop

08007948 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop

08007950 <NTC_Init>:
{
 8007950:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8007952:	7803      	ldrb	r3, [r0, #0]
{
 8007954:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8007956:	b123      	cbz	r3, 8007962 <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007958:	8a43      	ldrh	r3, [r0, #18]
 800795a:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 800795c:	2200      	movs	r2, #0
 800795e:	82c2      	strh	r2, [r0, #22]
}
 8007960:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8007962:	3004      	adds	r0, #4
 8007964:	f7fb fee4 	bl	8003730 <RCM_RegisterRegConv>
 8007968:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff ffeb 	bl	8007948 <NTC_Clear>
}
 8007972:	bd10      	pop	{r4, pc}

08007974 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8007974:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8007976:	7803      	ldrb	r3, [r0, #0]
{
 8007978:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800797a:	b113      	cbz	r3, 8007982 <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 800797c:	2000      	movs	r0, #0
 800797e:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8007980:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007982:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007986:	f7fb ffbb 	bl	8003900 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 800798a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800798e:	4298      	cmp	r0, r3
 8007990:	d007      	beq.n	80079a2 <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8007992:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8007994:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8007996:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8007998:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800799c:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80079a0:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff ffc2 	bl	800792c <NTC_SetFaultState>
 80079a8:	82e0      	strh	r0, [r4, #22]
}
 80079aa:	bd10      	pop	{r4, pc}

080079ac <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80079ac:	7803      	ldrb	r3, [r0, #0]
 80079ae:	b95b      	cbnz	r3, 80079c8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80079b0:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 80079b2:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 80079b4:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80079b8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 80079ba:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80079c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80079c4:	b200      	sxth	r0, r0
 80079c6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80079c8:	8a80      	ldrh	r0, [r0, #20]
}
 80079ca:	b200      	sxth	r0, r0
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop

080079d0 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80079d0:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80079d2:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80079d4:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80079d6:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80079d8:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 80079da:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80079dc:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80079de:	4770      	bx	lr

080079e0 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80079e0:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80079e2:	4770      	bx	lr

080079e4 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80079e4:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80079e6:	4770      	bx	lr

080079e8 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80079e8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop

080079f0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80079f0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop

080079f8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80079f8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80079fa:	4770      	bx	lr

080079fc <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80079fc:	8b80      	ldrh	r0, [r0, #28]
 80079fe:	4770      	bx	lr

08007a00 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007a00:	2301      	movs	r3, #1
 8007a02:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8007a04:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007a06:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop

08007a0c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8007a0c:	8bc0      	ldrh	r0, [r0, #30]
 8007a0e:	4770      	bx	lr

08007a10 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8007a10:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007a12:	4770      	bx	lr

08007a14 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8007a14:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007a16:	4770      	bx	lr

08007a18 <PID_SetKIDivisorPOW2>:
{
 8007a18:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007a1a:	2301      	movs	r3, #1
{
 8007a1c:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007a1e:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007a20:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007a24:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8007a26:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8007a28:	8343      	strh	r3, [r0, #26]
{
 8007a2a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007a2c:	f7ff fff2 	bl	8007a14 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8007a30:	4902      	ldr	r1, [pc, #8]	; (8007a3c <PID_SetKIDivisorPOW2+0x24>)
 8007a32:	4628      	mov	r0, r5
 8007a34:	40a1      	lsls	r1, r4
 8007a36:	f7ff ffeb 	bl	8007a10 <PID_SetLowerIntegralTermLimit>
}
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	ffff8001 	.word	0xffff8001

08007a40 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8007a40:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007a42:	4770      	bx	lr

08007a44 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007a44:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop

08007a4c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007a4c:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8007a4e:	4770      	bx	lr

08007a50 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007a50:	2301      	movs	r3, #1
 8007a52:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007a54:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007a56:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop

08007a5c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007a5c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007a60:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007a64:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8007a68:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007a6e:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 8007a72:	b162      	cbz	r2, 8007a8e <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007a74:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007a78:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8007a7a:	188c      	adds	r4, r1, r2
 8007a7c:	d420      	bmi.n	8007ac0 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8007a7e:	2900      	cmp	r1, #0
 8007a80:	db2a      	blt.n	8007ad8 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8007a82:	68c2      	ldr	r2, [r0, #12]
 8007a84:	42a2      	cmp	r2, r4
 8007a86:	db02      	blt.n	8007a8e <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8007a88:	6902      	ldr	r2, [r0, #16]
 8007a8a:	42a2      	cmp	r2, r4
 8007a8c:	dd22      	ble.n	8007ad4 <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8007a8e:	8b81      	ldrh	r1, [r0, #28]
 8007a90:	410b      	asrs	r3, r1
 8007a92:	8bc1      	ldrh	r1, [r0, #30]
 8007a94:	fa42 f101 	asr.w	r1, r2, r1
 8007a98:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8007a9a:	459c      	cmp	ip, r3
 8007a9c:	da05      	bge.n	8007aaa <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8007a9e:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8007aa2:	441a      	add	r2, r3
 8007aa4:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007aa6:	4660      	mov	r0, ip
 8007aa8:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8007aaa:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8007aac:	bfc9      	itett	gt
 8007aae:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 8007ab2:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8007ab6:	18d2      	addgt	r2, r2, r3
 8007ab8:	46f4      	movgt	ip, lr
 8007aba:	6082      	str	r2, [r0, #8]
}
 8007abc:	4660      	mov	r0, ip
 8007abe:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	ddde      	ble.n	8007a82 <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	dddc      	ble.n	8007a82 <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8007ac8:	68c2      	ldr	r2, [r0, #12]
 8007aca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ace:	428a      	cmp	r2, r1
 8007ad0:	d1dd      	bne.n	8007a8e <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	e7da      	b.n	8007a8e <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8007ad8:	4902      	ldr	r1, [pc, #8]	; (8007ae4 <PI_Controller+0x88>)
 8007ada:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8007ade:	bf28      	it	cs
 8007ae0:	460c      	movcs	r4, r1
 8007ae2:	e7ce      	b.n	8007a82 <PI_Controller+0x26>
 8007ae4:	80000001 	.word	0x80000001

08007ae8 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007ae8:	6882      	ldr	r2, [r0, #8]
{
 8007aea:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007aec:	89d1      	ldrh	r1, [r2, #14]
 8007aee:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8007af2:	8993      	ldrh	r3, [r2, #12]
 8007af4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007af8:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8007afc:	fb13 230c 	smlabb	r3, r3, ip, r2
 8007b00:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8007b02:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8007b06:	bfbc      	itt	lt
 8007b08:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007b0c:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8007b0e:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8007b12:	eb02 1323 	add.w	r3, r2, r3, asr #4
 8007b16:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8007b18:	f85d fb04 	ldr.w	pc, [sp], #4

08007b1c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop

08007b24 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007b24:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007b26:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8007b2a:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007b2c:	68c0      	ldr	r0, [r0, #12]
 8007b2e:	f7ff fc9b 	bl	8007468 <VBS_GetAvBusVoltage_V>
 8007b32:	fb05 f300 	mul.w	r3, r5, r0
 8007b36:	ee00 3a10 	vmov	s0, r3
 8007b3a:	edd4 7a01 	vldr	s15, [r4, #4]
 8007b3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8007b42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b46:	bd38      	pop	{r3, r4, r5, pc}

08007b48 <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)					// usually TIM1 is for motor1, TIM8 is for motor2, if two motor are controlled
{
 8007b48:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007b4a:	4b18      	ldr	r3, [pc, #96]	; (8007bac <startTimers+0x64>)
 8007b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b4e:	07d2      	lsls	r2, r2, #31
 8007b50:	b082      	sub	sp, #8
 8007b52:	d415      	bmi.n	8007b80 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007b54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007b62:	f002 0201 	and.w	r2, r2, #1
 8007b66:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007b68:	9a01      	ldr	r2, [sp, #4]
 8007b6a:	694a      	ldr	r2, [r1, #20]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;			// save previous settings
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);			// set TRGO as update event
    LL_TIM_GenerateEvent_UPDATE(TIM2);							// create update event, update register settings, and trigger TRGO output
    LL_TIM_SetTriggerOutput(TIM2, trigOut);						// restore previous settings
  }
}
 8007b7a:	b002      	add	sp, #8
 8007b7c:	bc30      	pop	{r4, r5}
 8007b7e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;			// save previous settings
 8007b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b84:	4c0a      	ldr	r4, [pc, #40]	; (8007bb0 <startTimers+0x68>)
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	6859      	ldr	r1, [r3, #4]
 8007b8a:	4d0a      	ldr	r5, [pc, #40]	; (8007bb4 <startTimers+0x6c>)
 8007b8c:	4021      	ands	r1, r4
 8007b8e:	f041 0120 	orr.w	r1, r1, #32
 8007b92:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b94:	6958      	ldr	r0, [r3, #20]
 8007b96:	f040 0001 	orr.w	r0, r0, #1
 8007b9a:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b9c:	6859      	ldr	r1, [r3, #4]
 8007b9e:	402a      	ands	r2, r5
 8007ba0:	4021      	ands	r1, r4
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
}
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bc30      	pop	{r4, r5}
 8007baa:	4770      	bx	lr
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	fdffff8f 	.word	0xfdffff8f
 8007bb4:	02000070 	.word	0x02000070

08007bb8 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007bb8:	3201      	adds	r2, #1
{
 8007bba:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8007bbc:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bbe:	f06f 0602 	mvn.w	r6, #2
 8007bc2:	0155      	lsls	r5, r2, #5
 8007bc4:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8007bc6:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8007bc8:	f893 c000 	ldrb.w	ip, [r3]
 8007bcc:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8007bd0:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8007bd4:	d80c      	bhi.n	8007bf0 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007bd6:	6904      	ldr	r4, [r0, #16]
 8007bd8:	07a4      	lsls	r4, r4, #30
 8007bda:	d5f5      	bpl.n	8007bc8 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8007bdc:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007be0:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007be2:	6106      	str	r6, [r0, #16]
 8007be4:	d8f0      	bhi.n	8007bc8 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8007be6:	781c      	ldrb	r4, [r3, #0]
 8007be8:	2c0f      	cmp	r4, #15
 8007bea:	d8ed      	bhi.n	8007bc8 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8007bec:	2301      	movs	r3, #1
 8007bee:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	bf00      	nop

08007bf4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007bf4:	6883      	ldr	r3, [r0, #8]
 8007bf6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007bfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bfe:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c00:	6883      	ldr	r3, [r0, #8]
 8007c02:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8007c04:	b082      	sub	sp, #8
 8007c06:	d418      	bmi.n	8007c3a <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8007c0a:	6882      	ldr	r2, [r0, #8]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4924      	ldr	r1, [pc, #144]	; (8007ca0 <R3_2_ADCxInit+0xac>)
 8007c10:	099b      	lsrs	r3, r3, #6
 8007c12:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8007c16:	fba1 1303 	umull	r1, r3, r1, r3
 8007c1a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007c1e:	099b      	lsrs	r3, r3, #6
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c26:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8007c28:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	b12b      	cbz	r3, 8007c3a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f9      	bne.n	8007c2e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8007c3a:	6883      	ldr	r3, [r0, #8]
 8007c3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c48:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007c4a:	6883      	ldr	r3, [r0, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dbfc      	blt.n	8007c4a <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007c50:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
  * following a calibration phase, could have no effect on ADC
  * within certain AHB/ADC clock ratio.
  */
  while (0U == LL_ADC_IsActiveFlag_ADRDY(ADCx))
 8007c52:	07da      	lsls	r2, r3, #31
 8007c54:	d408      	bmi.n	8007c68 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8007c56:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <R3_2_ADCxInit+0xb0>)
 8007c58:	6883      	ldr	r3, [r0, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007c62:	6803      	ldr	r3, [r0, #0]
 8007c64:	07db      	lsls	r3, r3, #31
 8007c66:	d5f7      	bpl.n	8007c58 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8007c68:	6882      	ldr	r2, [r0, #8]
 8007c6a:	490e      	ldr	r1, [pc, #56]	; (8007ca4 <R3_2_ADCxInit+0xb0>)
 8007c6c:	400a      	ands	r2, r1
 8007c6e:	f042 0208 	orr.w	r2, r2, #8
 8007c72:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007c74:	6882      	ldr	r2, [r0, #8]
 8007c76:	400a      	ands	r2, r1
 8007c78:	f042 0220 	orr.w	r2, r2, #32
 8007c7c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007c7e:	68c3      	ldr	r3, [r0, #12]
 8007c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c8c:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8007c8e:	6883      	ldr	r3, [r0, #8]
 8007c90:	400b      	ands	r3, r1
 8007c92:	f043 0304 	orr.w	r3, r3, #4
 8007c96:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 8007c98:	b002      	add	sp, #8
 8007c9a:	4770      	bx	lr
 8007c9c:	2000042c 	.word	0x2000042c
 8007ca0:	053e2d63 	.word	0x053e2d63
 8007ca4:	7fffffc0 	.word	0x7fffffc0

08007ca8 <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007ca8:	b1d9      	cbz	r1, 8007ce2 <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007caa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8007cae:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 8007cb2:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007cb4:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8007cb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007cba:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8007cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8007cbe:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8007cc2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007cc6:	6863      	ldr	r3, [r4, #4]
 8007cc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8007cd2:	2a05      	cmp	r2, #5
 8007cd4:	f200 80a0 	bhi.w	8007e18 <R3_2_GetPhaseCurrents+0x170>
 8007cd8:	e8df f002 	tbb	[pc, r2]
 8007cdc:	043b3b1d 	.word	0x043b3b1d
 8007ce0:	1d04      	.short	0x1d04
 8007ce2:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007ce4:	6f04      	ldr	r4, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8007ce6:	4b50      	ldr	r3, [pc, #320]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007ce8:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	db05      	blt.n	8007cfa <R3_2_GetPhaseCurrents+0x52>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8007cee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007cf2:	f2c0 808f 	blt.w	8007e14 <R3_2_GetPhaseCurrents+0x16c>
        {
          Iab->a = INT16_MAX;
 8007cf6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007cfa:	800b      	strh	r3, [r1, #0]
        {
          Iab->a = (int16_t)Aux;
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007cfc:	6f42      	ldr	r2, [r0, #116]	; 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8007cfe:	4d4a      	ldr	r5, [pc, #296]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007d00:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8007d02:	42aa      	cmp	r2, r5
 8007d04:	da5d      	bge.n	8007dc2 <R3_2_GetPhaseCurrents+0x11a>

      default:
        break;
    }

    pHandle->_Super.Ia = Iab->a;
 8007d06:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = -INT16_MAX;
 8007d0a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007d0c:	fa1f f38c 	uxth.w	r3, ip
 8007d10:	f248 0201 	movw	r2, #32769	; 0x8001
 8007d14:	e013      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007d16:	6f44      	ldr	r4, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8007d18:	4b43      	ldr	r3, [pc, #268]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007d1a:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	da46      	bge.n	8007dae <R3_2_GetPhaseCurrents+0x106>
          Iab->b = -INT16_MAX;
 8007d20:	804b      	strh	r3, [r1, #2]
 8007d22:	461c      	mov	r4, r3
 8007d24:	f248 0201 	movw	r2, #32769	; 0x8001
 8007d28:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007d2a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007d2c:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8007d2e:	1b1c      	subs	r4, r3, r4
        if (Aux > INT16_MAX)
 8007d30:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007d34:	db22      	blt.n	8007d7c <R3_2_GetPhaseCurrents+0xd4>
          Iab->a = INT16_MAX;
 8007d36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007d3a:	800b      	strh	r3, [r1, #0]
 8007d3c:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007d3e:	4413      	add	r3, r2
 8007d40:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8007d42:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->_Super.Ia = Iab->a;
 8007d46:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
  }
}
 8007d4a:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007d4c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8007d50:	4770      	bx	lr
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007d52:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 8007d54:	4b34      	ldr	r3, [pc, #208]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007d56:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	da1e      	bge.n	8007d9a <R3_2_GetPhaseCurrents+0xf2>
          Iab->a = -INT16_MAX;
 8007d5c:	461c      	mov	r4, r3
 8007d5e:	800b      	strh	r3, [r1, #0]
 8007d60:	46a4      	mov	ip, r4
 8007d62:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007d66:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007d68:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8007d6a:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8007d6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d70:	db0c      	blt.n	8007d8c <R3_2_GetPhaseCurrents+0xe4>
          Iab->b = INT16_MAX;
 8007d72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007d76:	804a      	strh	r2, [r1, #2]
 8007d78:	4615      	mov	r5, r2
 8007d7a:	e7e0      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8007d7c:	4e2a      	ldr	r6, [pc, #168]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
 8007d7e:	42b4      	cmp	r4, r6
 8007d80:	da42      	bge.n	8007e08 <R3_2_GetPhaseCurrents+0x160>
          Iab->a = -INT16_MAX;
 8007d82:	800e      	strh	r6, [r1, #0]
 8007d84:	f248 0301 	movw	r3, #32769	; 0x8001
 8007d88:	46b4      	mov	ip, r6
 8007d8a:	e7d8      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8007d8c:	4d26      	ldr	r5, [pc, #152]	; (8007e28 <R3_2_GetPhaseCurrents+0x180>)
 8007d8e:	42aa      	cmp	r2, r5
 8007d90:	da36      	bge.n	8007e00 <R3_2_GetPhaseCurrents+0x158>
          Iab->b = -INT16_MAX;
 8007d92:	804d      	strh	r5, [r1, #2]
 8007d94:	f248 0201 	movw	r2, #32769	; 0x8001
 8007d98:	e7d1      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux > INT16_MAX)
 8007d9a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007d9e:	db29      	blt.n	8007df4 <R3_2_GetPhaseCurrents+0x14c>
          Iab->a = INT16_MAX;
 8007da0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007da4:	4613      	mov	r3, r2
 8007da6:	800a      	strh	r2, [r1, #0]
 8007da8:	4614      	mov	r4, r2
 8007daa:	4694      	mov	ip, r2
 8007dac:	e7db      	b.n	8007d66 <R3_2_GetPhaseCurrents+0xbe>
        else  if (Aux > INT16_MAX)
 8007dae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007db2:	db1b      	blt.n	8007dec <R3_2_GetPhaseCurrents+0x144>
          Iab->b = INT16_MAX;
 8007db4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007db8:	461a      	mov	r2, r3
 8007dba:	804b      	strh	r3, [r1, #2]
 8007dbc:	461c      	mov	r4, r3
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	e7b3      	b.n	8007d2a <R3_2_GetPhaseCurrents+0x82>
        else  if (Aux > INT16_MAX)
 8007dc2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007dc6:	db09      	blt.n	8007ddc <R3_2_GetPhaseCurrents+0x134>
          Iab->b = INT16_MAX;
 8007dc8:	f647 73ff 	movw	r3, #32767	; 0x7fff
    pHandle->_Super.Ia = Iab->a;
 8007dcc:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = INT16_MAX;
 8007dd0:	804b      	strh	r3, [r1, #2]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007dd6:	fa1f f38c 	uxth.w	r3, ip
 8007dda:	e7b0      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
    pHandle->_Super.Ia = Iab->a;
 8007ddc:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = (int16_t)Aux;
 8007de0:	b215      	sxth	r5, r2
 8007de2:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007de4:	fa1f f38c 	uxth.w	r3, ip
 8007de8:	b292      	uxth	r2, r2
 8007dea:	e7a8      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
          Iab->b = (int16_t)Aux;
 8007dec:	b225      	sxth	r5, r4
 8007dee:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007df0:	b2a2      	uxth	r2, r4
 8007df2:	e79a      	b.n	8007d2a <R3_2_GetPhaseCurrents+0x82>
          Iab->a = (int16_t)Aux;
 8007df4:	fa0f fc84 	sxth.w	ip, r4
 8007df8:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007dfc:	b2a3      	uxth	r3, r4
 8007dfe:	e7b2      	b.n	8007d66 <R3_2_GetPhaseCurrents+0xbe>
          Iab->b = (int16_t)Aux;
 8007e00:	b215      	sxth	r5, r2
 8007e02:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007e04:	b292      	uxth	r2, r2
 8007e06:	e79a      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 8007e08:	fa0f fc84 	sxth.w	ip, r4
 8007e0c:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007e10:	b2a3      	uxth	r3, r4
 8007e12:	e794      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 8007e14:	800c      	strh	r4, [r1, #0]
 8007e16:	e771      	b.n	8007cfc <R3_2_GetPhaseCurrents+0x54>
    pHandle->_Super.Ia = Iab->a;
 8007e18:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8007e1c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007e20:	880b      	ldrh	r3, [r1, #0]
 8007e22:	884a      	ldrh	r2, [r1, #2]
 8007e24:	e78b      	b.n	8007d3e <R3_2_GetPhaseCurrents+0x96>
 8007e26:	bf00      	nop
 8007e28:	ffff8001 	.word	0xffff8001

08007e2c <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007e2c:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e2e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007e32:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007e36:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007e3a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e3e:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007e40:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e42:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007e44:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007e46:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007e4a:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e4e:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007e50:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e52:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007e54:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007e56:	4904      	ldr	r1, [pc, #16]	; (8007e68 <R3_2_SetADCSampPointPolarization+0x3c>)
 8007e58:	685b      	ldr	r3, [r3, #4]
}
 8007e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007e5e:	420b      	tst	r3, r1
}
 8007e60:	bf14      	ite	ne
 8007e62:	2001      	movne	r0, #1
 8007e64:	2000      	moveq	r0, #0
 8007e66:	4770      	bx	lr
 8007e68:	02000070 	.word	0x02000070

08007e6c <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007e6c:	b341      	cbz	r1, 8007ec0 <R3_2_HFCurrentsPolarizationAB+0x54>
{
 8007e6e:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e70:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007e74:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8007e78:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007e7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e7e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007e80:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007e82:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007e86:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007e8a:	6853      	ldr	r3, [r2, #4]
 8007e8c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e94:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007e96:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 8007e9a:	f1bc 0f0f 	cmp.w	ip, #15
 8007e9e:	d80b      	bhi.n	8007eb8 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007ea0:	6f03      	ldr	r3, [r0, #112]	; 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007ea2:	6f42      	ldr	r2, [r0, #116]	; 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007ea4:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8007ea6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007eaa:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007eac:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007eae:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007eb8:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8007eba:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8007ebc:	600b      	str	r3, [r1, #0]
}
 8007ebe:	4770      	bx	lr
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop

08007ec4 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007ec4:	b311      	cbz	r1, 8007f0c <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ec6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007eca:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ece:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007ed0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8007ed4:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007edc:	6853      	ldr	r3, [r2, #4]
 8007ede:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee6:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007ee8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d808      	bhi.n	8007f02 <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007ef0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007ef4:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8007ef6:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007ef8:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007efa:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007efc:	6782      	str	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8007efe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007f02:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8007f04:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8007f08:	600b      	str	r3, [r1, #0]
}
 8007f0a:	4770      	bx	lr
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8007f10:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f12:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007f16:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f18:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007f1a:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007f1e:	f06f 0301 	mvn.w	r3, #1
 8007f22:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f24:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f26:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f28:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007f2a:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, ticks);
  LL_TIM_OC_SetCompareCH2(TIMx, ticks);
  LL_TIM_OC_SetCompareCH3(TIMx, ticks);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8007f2c:	07db      	lsls	r3, r3, #31
 8007f2e:	d5fc      	bpl.n	8007f2a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007f30:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f36:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8007f38:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d10b      	bne.n	8007f58 <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007f40:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007f44:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f4a:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007f4c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007f50:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
 8007f54:	6188      	str	r0, [r1, #24]
 8007f56:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 8007f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop

08007f60 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f60:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007f64:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f68:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 8007f6a:	f04f 0c01 	mov.w	ip, #1
{
 8007f6e:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked = true;
 8007f70:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007f74:	f04f 0c00 	mov.w	ip, #0
 8007f78:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007f7c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f7e:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8007f80:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f82:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f84:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007f86:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007f8c:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007f8e:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8007f90:	07d2      	lsls	r2, r2, #31
 8007f92:	d5fc      	bpl.n	8007f8e <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007f94:	f06f 0201 	mvn.w	r2, #1
 8007f98:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fa0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 8007faa:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8007fae:	2a02      	cmp	r2, #2
 8007fb0:	d008      	beq.n	8007fc4 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007fb2:	f06f 0201 	mvn.w	r2, #1
 8007fb6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8007fbe:	bc30      	pop	{r4, r5}
 8007fc0:	60da      	str	r2, [r3, #12]
 8007fc2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007fc4:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007fc6:	6a0c      	ldr	r4, [r1, #32]
 8007fc8:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007fcc:	f240 5255 	movw	r2, #1365	; 0x555
 8007fd0:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007fd2:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007fd6:	d007      	beq.n	8007fe8 <R3_2_SwitchOnPWM+0x88>
 8007fd8:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007fda:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007fde:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007fe2:	6184      	str	r4, [r0, #24]
 8007fe4:	6191      	str	r1, [r2, #24]
}
 8007fe6:	e7e4      	b.n	8007fb2 <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007fe8:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007fea:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007fee:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007ff2:	6284      	str	r4, [r0, #40]	; 0x28
 8007ff4:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007ff6:	e7dc      	b.n	8007fb2 <R3_2_SwitchOnPWM+0x52>

08007ff8 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ff8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8007ffc:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007ffe:	68d3      	ldr	r3, [r2, #12]
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008006:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008008:	f04f 0c00 	mov.w	ip, #0
 800800c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008010:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
 8008014:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 8008016:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800801a:	b91b      	cbnz	r3, 8008024 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 800801c:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008020:	2b02      	cmp	r3, #2
 8008022:	d00c      	beq.n	800803e <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008024:	f06f 0301 	mvn.w	r3, #1
 8008028:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800802a:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 800802c:	07db      	lsls	r3, r3, #31
 800802e:	d5fc      	bpl.n	800802a <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008030:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8008034:	2300      	movs	r3, #0
 8008036:	6111      	str	r1, [r2, #16]
 8008038:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 800803c:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800803e:	6a0b      	ldr	r3, [r1, #32]
{
 8008040:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8008042:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8008046:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008048:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800804a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 800804e:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008050:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008052:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008056:	6299      	str	r1, [r3, #40]	; 0x28
 8008058:	f06f 0301 	mvn.w	r3, #1
 800805c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800805e:	6913      	ldr	r3, [r2, #16]
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008060:	07d9      	lsls	r1, r3, #31
 8008062:	d5fc      	bpl.n	800805e <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008064:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8008068:	2300      	movs	r3, #0
 800806a:	6111      	str	r1, [r2, #16]
}
 800806c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 8008070:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop

08008078 <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 8008078:	b329      	cbz	r1, 80080c6 <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800807a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 800807e:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008080:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808c:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800808e:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8008092:	6f43      	ldr	r3, [r0, #116]	; 0x74

    /* Check saturation */
    if (wAux > -INT16_MAX)
 8008094:	480e      	ldr	r0, [pc, #56]	; (80080d0 <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8008096:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800809a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800809c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80080a0:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 80080a2:	4283      	cmp	r3, r0
 80080a4:	da09      	bge.n	80080ba <R3_2_RLGetPhaseCurrents+0x42>
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <R3_2_RLGetPhaseCurrents+0x5c>)
    }

    pStator_Currents->a = (int16_t)wAux;
    pStator_Currents->b = (int16_t)wAux;
  }
}
 80080a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 80080ac:	2200      	movs	r2, #0
 80080ae:	f363 020f 	bfi	r2, r3, #0, #16
 80080b2:	f363 421f 	bfi	r2, r3, #16, #16
 80080b6:	600a      	str	r2, [r1, #0]
}
 80080b8:	4770      	bx	lr
      if (wAux < INT16_MAX)
 80080ba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80080be:	4293      	cmp	r3, r2
 80080c0:	dc02      	bgt.n	80080c8 <R3_2_RLGetPhaseCurrents+0x50>
    pStator_Currents->a = (int16_t)wAux;
 80080c2:	b21b      	sxth	r3, r3
 80080c4:	e7f0      	b.n	80080a8 <R3_2_RLGetPhaseCurrents+0x30>
 80080c6:	4770      	bx	lr
 80080c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80080cc:	e7ec      	b.n	80080a8 <R3_2_RLGetPhaseCurrents+0x30>
 80080ce:	bf00      	nop
 80080d0:	ffff8002 	.word	0xffff8002
 80080d4:	ffff8001 	.word	0xffff8001

080080d8 <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80080d8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 80080dc:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80080de:	688a      	ldr	r2, [r1, #8]
{
 80080e0:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 80080e2:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80080e6:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80080e8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80080ec:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80080ee:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80080f0:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 80080f2:	07db      	lsls	r3, r3, #31
 80080f4:	d5fc      	bpl.n	80080f0 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80080f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80080f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080fc:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80080fe:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008102:	2b02      	cmp	r3, #2
 8008104:	d10b      	bne.n	800811e <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008106:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800810a:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800810e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008110:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8008112:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8008116:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 800811a:	6284      	str	r4, [r0, #40]	; 0x28
 800811c:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 800811e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008122:	4770      	bx	lr

08008124 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8008124:	2800      	cmp	r0, #0
 8008126:	d04c      	beq.n	80081c2 <R3_2_RLSwitchOnPWM+0x9e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008128:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 800812c:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800812e:	688b      	ldr	r3, [r1, #8]
{
 8008130:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008132:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 8008136:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800813a:	f06f 0201 	mvn.w	r2, #1
 800813e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008140:	691a      	ldr	r2, [r3, #16]
    /* wait for a new PWM period */
    LL_TIM_ClearFlag_UPDATE(TIMx);
    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8008142:	07d6      	lsls	r6, r2, #31
 8008144:	d5fc      	bpl.n	8008140 <R3_2_RLSwitchOnPWM+0x1c>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008146:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800814a:	f06f 0601 	mvn.w	r6, #1
 800814e:	611e      	str	r6, [r3, #16]
 8008150:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008152:	2601      	movs	r6, #1
 8008154:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008156:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008158:	691a      	ldr	r2, [r3, #16]

    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 800815a:	07d2      	lsls	r2, r2, #31
 800815c:	d5fc      	bpl.n	8008158 <R3_2_RLSwitchOnPWM+0x34>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	f042 0201 	orr.w	r2, r2, #1
 8008164:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800816c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800816e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008174:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8008176:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 800817a:	2a02      	cmp	r2, #2
 800817c:	d00f      	beq.n	800819e <R3_2_RLSwitchOnPWM+0x7a>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800817e:	2303      	movs	r3, #3
 8008180:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 8008184:	68aa      	ldr	r2, [r5, #8]
 8008186:	4913      	ldr	r1, [pc, #76]	; (80081d4 <R3_2_RLSwitchOnPWM+0xb0>)
 8008188:	400a      	ands	r2, r1
 800818a:	f042 0208 	orr.w	r2, r2, #8
 800818e:	60aa      	str	r2, [r5, #8]
 8008190:	68a3      	ldr	r3, [r4, #8]
 8008192:	400b      	ands	r3, r1
 8008194:	f043 0308 	orr.w	r3, r3, #8
 8008198:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 800819a:	bcf0      	pop	{r4, r5, r6, r7}
 800819c:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800819e:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80081a0:	6a0e      	ldr	r6, [r1, #32]
 80081a2:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80081a6:	f240 5355 	movw	r3, #1365	; 0x555
 80081aa:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80081ac:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80081b0:	d008      	beq.n	80081c4 <R3_2_RLSwitchOnPWM+0xa0>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80081b2:	61b7      	str	r7, [r6, #24]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80081b4:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80081b8:	6196      	str	r6, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80081ba:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80081be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80081c0:	e7dd      	b.n	800817e <R3_2_RLSwitchOnPWM+0x5a>
 80081c2:	4770      	bx	lr
  WRITE_REG(GPIOx->BRR, PinMask);
 80081c4:	62b7      	str	r7, [r6, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80081c6:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80081ca:	6296      	str	r6, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80081cc:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80081d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80081d2:	e7d4      	b.n	800817e <R3_2_RLSwitchOnPWM+0x5a>
 80081d4:	7fffffc0 	.word	0x7fffffc0

080081d8 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80081d8:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80081dc:	b510      	push	{r4, lr}
 80081de:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 80081e2:	f101 0e08 	add.w	lr, r1, #8
 80081e6:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80081e8:	f85c 300e 	ldr.w	r3, [ip, lr]
 80081ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f4:	431a      	orrs	r2, r3
 80081f6:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 80081fa:	684a      	ldr	r2, [r1, #4]
 80081fc:	f000 0303 	and.w	r3, r0, #3
 8008200:	4313      	orrs	r3, r2
 8008202:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8008204:	680a      	ldr	r2, [r1, #0]
 8008206:	2301      	movs	r3, #1
 8008208:	f000 0010 	and.w	r0, r0, #16
 800820c:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008210:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <R3_2_SetAOReferenceVoltage+0x90>)
 8008216:	d013      	beq.n	8008240 <R3_2_SetAOReferenceVoltage+0x68>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4c14      	ldr	r4, [pc, #80]	; (800826c <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 800821c:	680a      	ldr	r2, [r1, #0]
 800821e:	fba4 4303 	umull	r4, r3, r4, r3
 8008222:	0cdb      	lsrs	r3, r3, #19
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	4310      	orrs	r0, r2
 8008228:	6008      	str	r0, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800822a:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800822c:	9b00      	ldr	r3, [sp, #0]
 800822e:	b12b      	cbz	r3, 800823c <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8008230:	9b00      	ldr	r3, [sp, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f9      	bne.n	8008230 <R3_2_SetAOReferenceVoltage+0x58>
}
 800823c:	b002      	add	sp, #8
 800823e:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <R3_2_SetAOReferenceVoltage+0x94>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	0cdb      	lsrs	r3, r3, #19
 800824a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800824e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f2      	beq.n	800823c <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	3b01      	subs	r3, #1
 800825a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f9      	bne.n	8008256 <R3_2_SetAOReferenceVoltage+0x7e>
}
 8008262:	b002      	add	sp, #8
 8008264:	bd10      	pop	{r4, pc}
 8008266:	bf00      	nop
 8008268:	2000042c 	.word	0x2000042c
 800826c:	431bde83 	.word	0x431bde83

08008270 <R3_2_Init>:
  if (MC_NULL == pHandle)
 8008270:	2800      	cmp	r0, #0
 8008272:	f000 80fc 	beq.w	800846e <R3_2_Init+0x1fe>
{
 8008276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800827a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 800827e:	681f      	ldr	r7, [r3, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008280:	685e      	ldr	r6, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008282:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008284:	689c      	ldr	r4, [r3, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8008286:	f8d3 a014 	ldr.w	sl, [r3, #20]
 800828a:	4605      	mov	r5, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800828c:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 8008290:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008292:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008294:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008298:	9001      	str	r0, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800829a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800829c:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800829e:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80082a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80082a4:	9003      	str	r0, [sp, #12]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80082a6:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80082aa:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80082ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80082ae:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80082b0:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80082b2:	f022 0220 	bic.w	r2, r2, #32
 80082b6:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80082b8:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80082ba:	6872      	ldr	r2, [r6, #4]
 80082bc:	f022 0204 	bic.w	r2, r2, #4
 80082c0:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80082c2:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80082c4:	6872      	ldr	r2, [r6, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80082c6:	498f      	ldr	r1, [pc, #572]	; (8008504 <R3_2_Init+0x294>)
 80082c8:	f022 0220 	bic.w	r2, r2, #32
 80082cc:	6072      	str	r2, [r6, #4]
      if (TIM1 ==  TIMx)
 80082ce:	4a8e      	ldr	r2, [pc, #568]	; (8008508 <R3_2_Init+0x298>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80082d0:	6030      	str	r0, [r6, #0]
 80082d2:	4294      	cmp	r4, r2
 80082d4:	690a      	ldr	r2, [r1, #16]
 80082d6:	bf0c      	ite	eq
 80082d8:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80082dc:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80082e0:	610a      	str	r2, [r1, #16]
      if (OPAMPParams != NULL)
 80082e2:	f1bc 0f00 	cmp.w	ip, #0
 80082e6:	d011      	beq.n	800830c <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 80082e8:	e9dc 0103 	ldrd	r0, r1, [ip, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80082ec:	6802      	ldr	r2, [r0, #0]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 80082ee:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	6002      	str	r2, [r0, #0]
 80082f8:	680a      	ldr	r2, [r1, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	600a      	str	r2, [r1, #0]
 8008300:	f8dc 2000 	ldr.w	r2, [ip]
 8008304:	f042 0201 	orr.w	r2, r2, #1
 8008308:	f8cc 2000 	str.w	r2, [ip]
      if (COMP_OCPAx != NULL)
 800830c:	f1bb 0f00 	cmp.w	fp, #0
 8008310:	d018      	beq.n	8008344 <R3_2_Init+0xd4>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8008312:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8008316:	2a01      	cmp	r2, #1
 8008318:	d008      	beq.n	800832c <R3_2_Init+0xbc>
 800831a:	f1be 0f00 	cmp.w	lr, #0
 800831e:	d005      	beq.n	800832c <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8008320:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8008324:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008326:	4671      	mov	r1, lr
 8008328:	f7ff ff56 	bl	80081d8 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800832c:	f8db 3000 	ldr.w	r3, [fp]
 8008330:	f043 0301 	orr.w	r3, r3, #1
 8008334:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008338:	f8db 3000 	ldr.w	r3, [fp]
 800833c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008340:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPBx != NULL)
 8008344:	f1ba 0f00 	cmp.w	sl, #0
 8008348:	d019      	beq.n	800837e <R3_2_Init+0x10e>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800834a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800834e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8008352:	2a01      	cmp	r2, #1
 8008354:	d007      	beq.n	8008366 <R3_2_Init+0xf6>
 8008356:	9a01      	ldr	r2, [sp, #4]
 8008358:	b12a      	cbz	r2, 8008366 <R3_2_Init+0xf6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800835a:	4611      	mov	r1, r2
 800835c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800835e:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8008362:	f7ff ff39 	bl	80081d8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008366:	f8da 3000 	ldr.w	r3, [sl]
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008372:	f8da 3000 	ldr.w	r3, [sl]
 8008376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800837a:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	d019      	beq.n	80083b8 <R3_2_Init+0x148>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8008384:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8008388:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 800838c:	2a01      	cmp	r2, #1
 800838e:	d007      	beq.n	80083a0 <R3_2_Init+0x130>
 8008390:	9a02      	ldr	r2, [sp, #8]
 8008392:	b12a      	cbz	r2, 80083a0 <R3_2_Init+0x130>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8008394:	4611      	mov	r1, r2
 8008396:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008398:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 800839c:	f7ff ff1c 	bl	80081d8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80083a0:	f8d9 3000 	ldr.w	r3, [r9]
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80083ac:	f8d9 3000 	ldr.w	r3, [r9]
 80083b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d019      	beq.n	80083f2 <R3_2_Init+0x182>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 80083be:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80083c2:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	d007      	beq.n	80083da <R3_2_Init+0x16a>
 80083ca:	9a03      	ldr	r2, [sp, #12]
 80083cc:	b12a      	cbz	r2, 80083da <R3_2_Init+0x16a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 80083ce:	4611      	mov	r1, r2
 80083d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80083d2:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 80083d6:	f7ff feff 	bl	80081d8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80083da:	f8d8 3000 	ldr.w	r3, [r8]
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083ee:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80083f2:	68bb      	ldr	r3, [r7, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_1))
 80083f4:	07d9      	lsls	r1, r3, #31
 80083f6:	d56a      	bpl.n	80084ce <R3_2_Init+0x25e>
 80083f8:	68b3      	ldr	r3, [r6, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_2))
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d563      	bpl.n	80084c6 <R3_2_Init+0x256>
  volatile uint32_t Brk2Timeout = 1000;
 80083fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008402:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008404:	6823      	ldr	r3, [r4, #0]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008406:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800841c:	69a3      	ldr	r3, [r4, #24]
 800841e:	f043 0308 	orr.w	r3, r3, #8
 8008422:	61a3      	str	r3, [r4, #24]
 8008424:	69a3      	ldr	r3, [r4, #24]
 8008426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800842a:	61a3      	str	r3, [r4, #24]
 800842c:	69e3      	ldr	r3, [r4, #28]
 800842e:	f043 0308 	orr.w	r3, r3, #8
 8008432:	61e3      	str	r3, [r4, #28]
 8008434:	69e3      	ldr	r3, [r4, #28]
 8008436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800843a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800843c:	6963      	ldr	r3, [r4, #20]
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 8008448:	2b02      	cmp	r3, #2
 800844a:	d011      	beq.n	8008470 <R3_2_Init+0x200>
    if (M1 == pHandle->_Super.Motor)
 800844c:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8008450:	b9b3      	cbnz	r3, 8008480 <R3_2_Init+0x210>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8008452:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008456:	2b01      	cmp	r3, #1
 8008458:	d00e      	beq.n	8008478 <R3_2_Init+0x208>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800845a:	2b03      	cmp	r3, #3
 800845c:	d110      	bne.n	8008480 <R3_2_Init+0x210>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800845e:	2101      	movs	r1, #1
 8008460:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008462:	6961      	ldr	r1, [r4, #20]
 8008464:	f041 0101 	orr.w	r1, r1, #1
 8008468:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800846a:	6323      	str	r3, [r4, #48]	; 0x30
}
 800846c:	e008      	b.n	8008480 <R3_2_Init+0x210>
 800846e:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8008470:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8008474:	2b01      	cmp	r3, #1
 8008476:	d039      	beq.n	80084ec <R3_2_Init+0x27c>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008478:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 800847c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800847e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008480:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008484:	6123      	str	r3, [r4, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 8008486:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 800848a:	b17b      	cbz	r3, 80084ac <R3_2_Init+0x23c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	05db      	lsls	r3, r3, #23
 8008490:	d52a      	bpl.n	80084e8 <R3_2_Init+0x278>
    while ((Brk2Timeout != 0u) && (1U == result))
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	b153      	cbz	r3, 80084ac <R3_2_Init+0x23c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800849a:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	3b01      	subs	r3, #1
 80084a0:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	d11a      	bne.n	80084e2 <R3_2_Init+0x272>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80084ac:	68e3      	ldr	r3, [r4, #12]
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80084b4:	6a23      	ldr	r3, [r4, #32]
 80084b6:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80084ba:	f043 0305 	orr.w	r3, r3, #5
 80084be:	6223      	str	r3, [r4, #32]
}
 80084c0:	b007      	add	sp, #28
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff fb94 	bl	8007bf4 <R3_2_ADCxInit>
 80084cc:	e797      	b.n	80083fe <R3_2_Init+0x18e>
        R3_2_ADCxInit(ADCx_1);
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7ff fb90 	bl	8007bf4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	e78a      	b.n	80083f8 <R3_2_Init+0x188>
    while ((Brk2Timeout != 0u) && (1U == result))
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1d9      	bne.n	800849a <R3_2_Init+0x22a>
 80084e6:	e7e1      	b.n	80084ac <R3_2_Init+0x23c>
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	e7df      	b.n	80084ac <R3_2_Init+0x23c>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 80084ec:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 80084f0:	2903      	cmp	r1, #3
 80084f2:	d1c1      	bne.n	8008478 <R3_2_Init+0x208>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80084f4:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80084f6:	6963      	ldr	r3, [r4, #20]
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80084fe:	6321      	str	r1, [r4, #48]	; 0x30
}
 8008500:	e7ba      	b.n	8008478 <R3_2_Init+0x208>
 8008502:	bf00      	nop
 8008504:	e0042000 	.word	0xe0042000
 8008508:	40012c00 	.word	0x40012c00

0800850c <R3_2_SetOffsetCalib>:
{
 800850c:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800850e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008512:	680b      	ldr	r3, [r1, #0]
 8008514:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 8008516:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8008518:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 800851c:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop

08008528 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8008528:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 800852c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800852e:	608b      	str	r3, [r1, #8]
 8008530:	e9c1 0200 	strd	r0, r2, [r1]
}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <R3_2_CurrentReadingPolarization>:
{
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800853a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  if (true == pHandle->_Super.offsetCalibStatus)
 800853e:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008542:	e9d3 7600 	ldrd	r7, r6, [r3]
{
 8008546:	b085      	sub	sp, #20
 8008548:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800854a:	b1aa      	cbz	r2, 8008578 <R3_2_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	494f      	ldr	r1, [pc, #316]	; (800868c <R3_2_CurrentReadingPolarization+0x154>)
 8008550:	400a      	ands	r2, r1
 8008552:	f042 0208 	orr.w	r2, r2, #8
 8008556:	60ba      	str	r2, [r7, #8]
 8008558:	68b3      	ldr	r3, [r6, #8]
 800855a:	400b      	ands	r3, r1
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800855c:	2280      	movs	r2, #128	; 0x80
 800855e:	f043 0308 	orr.w	r3, r3, #8
 8008562:	60b3      	str	r3, [r6, #8]
 8008564:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 8008568:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 800856a:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800856c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8008570:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008574:	b005      	add	sp, #20
 8008576:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008578:	689d      	ldr	r5, [r3, #8]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800857a:	6803      	ldr	r3, [r0, #0]
 800857c:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800857e:	6943      	ldr	r3, [r0, #20]
 8008580:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 8008582:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 8008586:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 8008588:	6782      	str	r2, [r0, #120]	; 0x78
 800858a:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800858e:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseBOffset = 0U;
 8008592:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8008596:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8008598:	2304      	movs	r3, #4
 800859a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 800859e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80085a2:	4b3b      	ldr	r3, [pc, #236]	; (8008690 <R3_2_CurrentReadingPolarization+0x158>)
 80085a4:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80085a6:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <R3_2_CurrentReadingPolarization+0x15c>)
 80085a8:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80085aa:	2380      	movs	r3, #128	; 0x80
 80085ac:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80085b0:	f7ff fcd6 	bl	8007f60 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 80085b4:	4a38      	ldr	r2, [pc, #224]	; (8008698 <R3_2_CurrentReadingPolarization+0x160>)
 80085b6:	686b      	ldr	r3, [r5, #4]
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b70      	cmp	r3, #112	; 0x70
 80085bc:	d1fb      	bne.n	80085b6 <R3_2_CurrentReadingPolarization+0x7e>
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	4932      	ldr	r1, [pc, #200]	; (800868c <R3_2_CurrentReadingPolarization+0x154>)
 80085c2:	400a      	ands	r2, r1
 80085c4:	f042 0208 	orr.w	r2, r2, #8
 80085c8:	60ba      	str	r2, [r7, #8]
 80085ca:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 80085cc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80085d0:	400b      	ands	r3, r1
 80085d2:	f043 0308 	orr.w	r3, r3, #8
 80085d6:	60b3      	str	r3, [r6, #8]
 80085d8:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80085dc:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80085e0:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 80085e4:	4628      	mov	r0, r5
 80085e6:	e9cd 1300 	strd	r1, r3, [sp]
 80085ea:	f7ff fae5 	bl	8007bb8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fd02 	bl	8007ff8 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 80085f4:	2200      	movs	r2, #0
 80085f6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 80085fa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 80085fe:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008602:	4a26      	ldr	r2, [pc, #152]	; (800869c <R3_2_CurrentReadingPolarization+0x164>)
 8008604:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff fcaa 	bl	8007f60 <R3_2_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 800860c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8008610:	9b01      	ldr	r3, [sp, #4]
 8008612:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8008616:	9900      	ldr	r1, [sp, #0]
 8008618:	4628      	mov	r0, r5
 800861a:	f7ff facd 	bl	8007bb8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800861e:	4620      	mov	r0, r4
 8008620:	f7ff fcea 	bl	8007ff8 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008624:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008628:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800862a:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800862c:	0912      	lsrs	r2, r2, #4
 800862e:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008632:	091b      	lsrs	r3, r3, #4
 8008634:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008636:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008638:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800863a:	69ab      	ldr	r3, [r5, #24]
 800863c:	6162      	str	r2, [r4, #20]
 800863e:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 8008642:	2001      	movs	r0, #1
 8008644:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008648:	6021      	str	r1, [r4, #0]
 800864a:	61ab      	str	r3, [r5, #24]
 800864c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800864e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8008652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008656:	61aa      	str	r2, [r5, #24]
 8008658:	69ea      	ldr	r2, [r5, #28]
 800865a:	f022 0208 	bic.w	r2, r2, #8
 800865e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008660:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008662:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008664:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008666:	69ab      	ldr	r3, [r5, #24]
 8008668:	f043 0308 	orr.w	r3, r3, #8
 800866c:	61ab      	str	r3, [r5, #24]
 800866e:	69ab      	ldr	r3, [r5, #24]
 8008670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008674:	61ab      	str	r3, [r5, #24]
 8008676:	69eb      	ldr	r3, [r5, #28]
 8008678:	f043 0308 	orr.w	r3, r3, #8
 800867c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800867e:	6a2b      	ldr	r3, [r5, #32]
 8008680:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008684:	f043 0305 	orr.w	r3, r3, #5
 8008688:	622b      	str	r3, [r5, #32]
}
 800868a:	e76d      	b.n	8008568 <R3_2_CurrentReadingPolarization+0x30>
 800868c:	7fffffc0 	.word	0x7fffffc0
 8008690:	08007e6d 	.word	0x08007e6d
 8008694:	08007e2d 	.word	0x08007e2d
 8008698:	02000070 	.word	0x02000070
 800869c:	08007ec5 	.word	0x08007ec5

080086a0 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d03a      	beq.n	800871a <R3_2_SetADCSampPointSectX+0x7a>
{
 80086a4:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 80086a6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80086aa:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 80086ae:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80086b2:	ebae 0203 	sub.w	r2, lr, r3
 80086b6:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 80086ba:	b292      	uxth	r2, r2
 80086bc:	42a2      	cmp	r2, r4
 80086be:	d916      	bls.n	80086ee <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 80086c0:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80086c2:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 80086c6:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 80086ca:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086cc:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80086ce:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80086d0:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80086d4:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80086d8:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80086da:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80086dc:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80086de:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80086e0:	6852      	ldr	r2, [r2, #4]
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <R3_2_SetADCSampPointSectX+0x88>)
 80086e4:	421a      	tst	r2, r3
    returnValue = 0U;
 80086e6:	bf14      	ite	ne
 80086e8:	2001      	movne	r0, #1
 80086ea:	2000      	moveq	r0, #0
}
 80086ec:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 80086ee:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 80086f2:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 80086f6:	fa1f fc8c 	uxth.w	ip, ip
 80086fa:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 80086fe:	d80d      	bhi.n	800871c <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008700:	4423      	add	r3, r4
 8008702:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8008704:	459e      	cmp	lr, r3
 8008706:	d8e1      	bhi.n	80086cc <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008708:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800870a:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800870e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8008712:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8008716:	b29b      	uxth	r3, r3
 8008718:	e7d8      	b.n	80086cc <R3_2_SetADCSampPointSectX+0x2c>
}
 800871a:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800871c:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	; 0xb6
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	b29b      	uxth	r3, r3
 8008724:	e7d2      	b.n	80086cc <R3_2_SetADCSampPointSectX+0x2c>
 8008726:	bf00      	nop
 8008728:	02000070 	.word	0x02000070

0800872c <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 800872c:	4602      	mov	r2, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d043      	beq.n	80087ba <R3_2_TIMx_UP_IRQHandler+0x8e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008732:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 8008736:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008738:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    if (OPAMPParams != NULL)
 800873c:	2c00      	cmp	r4, #0
 800873e:	d036      	beq.n	80087ae <R3_2_TIMx_UP_IRQHandler+0x82>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8008740:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
 8008744:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 8008748:	46e6      	mov	lr, ip
 800874a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800874c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1fc      	bne.n	800874c <R3_2_TIMx_UP_IRQHandler+0x20>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8008752:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 8008756:	6bde      	ldr	r6, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 8008758:	1c77      	adds	r7, r6, #1
 800875a:	d005      	beq.n	8008768 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800875c:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800875e:	683c      	ldr	r4, [r7, #0]
 8008760:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 8008764:	4334      	orrs	r4, r6
 8008766:	603c      	str	r4, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8008768:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 800876a:	1c66      	adds	r6, r4, #1
 800876c:	d005      	beq.n	800877a <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800876e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8008776:	4323      	orrs	r3, r4
 8008778:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800877a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800877e:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 8008782:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 8008784:	431c      	orrs	r4, r3
 8008786:	64c4      	str	r4, [r0, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008788:	6e48      	ldr	r0, [r1, #100]	; 0x64
 800878a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 800878e:	430b      	orrs	r3, r1
 8008790:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008792:	686b      	ldr	r3, [r5, #4]
 8008794:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800879c:	2180      	movs	r1, #128	; 0x80
 800879e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80087a2:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 80087a4:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80087a8:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 80087ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80087ae:	f890 e06a 	ldrb.w	lr, [r0, #106]	; 0x6a
 80087b2:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 80087b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80087b8:	e7df      	b.n	800877a <R3_2_TIMx_UP_IRQHandler+0x4e>
}
 80087ba:	4770      	bx	lr

080087bc <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 80087bc:	b168      	cbz	r0, 80087da <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 80087be:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80087c2:	b92b      	cbnz	r3, 80087d0 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 80087c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80087c8:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80087cc:	2a02      	cmp	r2, #2
 80087ce:	d005      	beq.n	80087dc <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 80087d6:	3068      	adds	r0, #104	; 0x68
 80087d8:	4770      	bx	lr
}
 80087da:	4770      	bx	lr
{
 80087dc:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80087de:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80087e2:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80087e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80087e8:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80087ea:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80087ee:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80087f2:	628c      	str	r4, [r1, #40]	; 0x28
 80087f4:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 80087f6:	2301      	movs	r3, #1
 80087f8:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 80087fc:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 80087fe:	3068      	adds	r0, #104	; 0x68
}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop

08008804 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 8008804:	4603      	mov	r3, r0
 8008806:	b160      	cbz	r0, 8008822 <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008808:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800880c:	6891      	ldr	r1, [r2, #8]
 800880e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 8008810:	f240 1c01 	movw	ip, #257	; 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008818:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 800881a:	3068      	adds	r0, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 800881c:	f8a3 c083 	strh.w	ip, [r3, #131]	; 0x83
    tempPointer = &(pHandle->_Super.Motor);
 8008820:	4770      	bx	lr
}
 8008822:	4770      	bx	lr

08008824 <R3_2_IsOverCurrentOccurred>:
  if (true == pHandle->OverVoltageFlag)
 8008824:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8008828:	b16b      	cbz	r3, 8008846 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 800882a:	2300      	movs	r3, #0
 800882c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8008830:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008832:	2302      	movs	r3, #2
  if (true == pHandle->OverCurrentFlag)
 8008834:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 8008838:	b11a      	cbz	r2, 8008842 <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 800883a:	2300      	movs	r3, #0
 800883c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    retVal |= MC_BREAK_IN;
 8008840:	460b      	mov	r3, r1
}
 8008842:	4618      	mov	r0, r3
 8008844:	4770      	bx	lr
 8008846:	2140      	movs	r1, #64	; 0x40
 8008848:	e7f4      	b.n	8008834 <R3_2_IsOverCurrentOccurred+0x10>
 800884a:	bf00      	nop

0800884c <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800884c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8008850:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8008852:	2900      	cmp	r1, #0
 8008854:	d13d      	bne.n	80088d2 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008856:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800885a:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008862:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008866:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800886a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	f022 0204 	bic.w	r2, r2, #4
 800887a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800887c:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 800887e:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
 8008882:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008884:	f103 0418 	add.w	r4, r3, #24
 8008888:	d030      	beq.n	80088ec <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 800888a:	2a02      	cmp	r2, #2
 800888c:	d10f      	bne.n	80088ae <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800888e:	699a      	ldr	r2, [r3, #24]
 8008890:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008894:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800889c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800889e:	6a1a      	ldr	r2, [r3, #32]
 80088a0:	f042 0210 	orr.w	r2, r2, #16
 80088a4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ac:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088b4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80088b8:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80088bc:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088be:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 80088c0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80088c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c6:	621a      	str	r2, [r3, #32]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ce:	621a      	str	r2, [r3, #32]
 80088d0:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 80088d4:	490f      	ldr	r1, [pc, #60]	; (8008914 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80088d6:	4a10      	ldr	r2, [pc, #64]	; (8008918 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80088d8:	4c10      	ldr	r4, [pc, #64]	; (800891c <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 80088da:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 80088dc:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 80088de:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 80088e0:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80088e4:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80088e6:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 80088ea:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80088f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80088f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80088fc:	6a1a      	ldr	r2, [r3, #32]
 80088fe:	f022 0210 	bic.w	r2, r2, #16
 8008902:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008904:	6a1a      	ldr	r2, [r3, #32]
 8008906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800890a:	621a      	str	r2, [r3, #32]
}
 800890c:	e7cf      	b.n	80088ae <R3_2_RLDetectionModeEnable+0x62>
 800890e:	bf00      	nop
 8008910:	080080d9 	.word	0x080080d9
 8008914:	08008125 	.word	0x08008125
 8008918:	08007ff9 	.word	0x08007ff9
 800891c:	08008079 	.word	0x08008079

08008920 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8008920:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 8008924:	2b00      	cmp	r3, #0
 8008926:	d03c      	beq.n	80089a2 <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008928:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800892c:	688b      	ldr	r3, [r1, #8]
{
 800892e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	4c43      	ldr	r4, [pc, #268]	; (8008a40 <R3_2_RLDetectionModeDisable+0x120>)
 8008934:	4022      	ands	r2, r4
 8008936:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800893a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800893c:	6a1a      	ldr	r2, [r3, #32]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8008944:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008948:	2a01      	cmp	r2, #1
 800894a:	d02b      	beq.n	80089a4 <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 800894c:	2a02      	cmp	r2, #2
 800894e:	d050      	beq.n	80089f2 <R3_2_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8008950:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8008954:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008956:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008958:	6999      	ldr	r1, [r3, #24]
 800895a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800895e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008962:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008966:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008968:	6a19      	ldr	r1, [r3, #32]
 800896a:	f041 0110 	orr.w	r1, r1, #16
 800896e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	400c      	ands	r4, r1
 8008976:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800897a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800897c:	6a19      	ldr	r1, [r3, #32]
 800897e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008982:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008984:	492f      	ldr	r1, [pc, #188]	; (8008a44 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008986:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008988:	4a2f      	ldr	r2, [pc, #188]	; (8008a48 <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800898a:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800898c:	492f      	ldr	r1, [pc, #188]	; (8008a4c <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800898e:	4c30      	ldr	r4, [pc, #192]	; (8008a50 <R3_2_RLDetectionModeDisable+0x130>)
 8008990:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8008992:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008994:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8008998:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800899c:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 80089a0:	4770      	bx	lr
 80089a2:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80089a4:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80089a6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80089aa:	f041 0104 	orr.w	r1, r1, #4
 80089ae:	0852      	lsrs	r2, r2, #1
 80089b0:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089b2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80089b4:	6999      	ldr	r1, [r3, #24]
 80089b6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80089ba:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80089be:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80089c2:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80089c4:	6a19      	ldr	r1, [r3, #32]
 80089c6:	f041 0110 	orr.w	r1, r1, #16
 80089ca:	6219      	str	r1, [r3, #32]
 80089cc:	6a19      	ldr	r1, [r3, #32]
 80089ce:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80089d2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80089d6:	69d9      	ldr	r1, [r3, #28]
 80089d8:	400c      	ands	r4, r1
 80089da:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80089de:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80089e0:	6a19      	ldr	r1, [r3, #32]
 80089e2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80089e6:	6219      	str	r1, [r3, #32]
 80089e8:	6a19      	ldr	r1, [r3, #32]
 80089ea:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80089ee:	6219      	str	r1, [r3, #32]
}
 80089f0:	e7c8      	b.n	8008984 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 80089f2:	6a19      	ldr	r1, [r3, #32]
 80089f4:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80089f8:	f021 0104 	bic.w	r1, r1, #4
 80089fc:	0852      	lsrs	r2, r2, #1
 80089fe:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a00:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a02:	6999      	ldr	r1, [r3, #24]
 8008a04:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008a08:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008a0c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008a10:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008a12:	6a19      	ldr	r1, [r3, #32]
 8008a14:	f041 0110 	orr.w	r1, r1, #16
 8008a18:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008a1a:	6a19      	ldr	r1, [r3, #32]
 8008a1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008a20:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a24:	69d9      	ldr	r1, [r3, #28]
 8008a26:	400c      	ands	r4, r1
 8008a28:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008a2c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008a2e:	6a19      	ldr	r1, [r3, #32]
 8008a30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008a34:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008a36:	6a19      	ldr	r1, [r3, #32]
 8008a38:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008a3c:	6219      	str	r1, [r3, #32]
}
 8008a3e:	e7a1      	b.n	8008984 <R3_2_RLDetectionModeDisable+0x64>
 8008a40:	fffeff8c 	.word	0xfffeff8c
 8008a44:	08007ca9 	.word	0x08007ca9
 8008a48:	08007ff9 	.word	0x08007ff9
 8008a4c:	08007f61 	.word	0x08007f61
 8008a50:	08007f11 	.word	0x08007f11

08008a54 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d03d      	beq.n	8008ad4 <R3_2_RLDetectionModeSetDuty+0x80>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a58:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008a5c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
{
 8008a60:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008a62:	689c      	ldr	r4, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008a64:	69e3      	ldr	r3, [r4, #28]
 8008a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008a6a:	fb02 f101 	mul.w	r1, r2, r1
 8008a6e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8008a72:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8008a74:	f04f 0c01 	mov.w	ip, #1
 8008a78:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 8008a7c:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 8008a7e:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
 8008a82:	61e3      	str	r3, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008a84:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8008a88:	1ad2      	subs	r2, r2, r3
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8008a8a:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008a8e:	6422      	str	r2, [r4, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008a90:	63e3      	str	r3, [r4, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a92:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a94:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008a96:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8008a9a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8008aa6:	2103      	movs	r1, #3
 8008aa8:	6063      	str	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008aaa:	4562      	cmp	r2, ip
    pHdl->Sector = SECTOR_4;
 8008aac:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008ab0:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008ab2:	d008      	beq.n	8008ac6 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008ab4:	4a08      	ldr	r2, [pc, #32]	; (8008ad8 <R3_2_RLDetectionModeSetDuty+0x84>)
}
 8008ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008aba:	4213      	tst	r3, r2
      hAux = MC_DURATION;
 8008abc:	bf14      	ite	ne
 8008abe:	4662      	movne	r2, ip
 8008ac0:	2200      	moveq	r2, #0
}
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8008acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4770      	bx	lr
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	02000070 	.word	0x02000070

08008adc <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008adc:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8008ae0:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008ae2:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008ae4:	4494      	add	ip, r2
{
 8008ae6:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008ae8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008aec:	b14b      	cbz	r3, 8008b02 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8008aee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008af0:	2300      	movs	r3, #0
 8008af2:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008af4:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8008af6:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008afa:	8b01      	ldrh	r1, [r0, #24]
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	4291      	cmp	r1, r2
 8008b00:	d8f7      	bhi.n	8008af2 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f36c 030f 	bfi	r3, ip, #0, #16
 8008b08:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8008b0c:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8008b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8008b12:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8008b14:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <RVBS_Init>:
{
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008b20:	300c      	adds	r0, #12
 8008b22:	f7fa fe05 	bl	8003730 <RCM_RegisterRegConv>
 8008b26:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7ff ffd6 	bl	8008adc <RVBS_Clear>
}
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop

08008b34 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008b34:	8b42      	ldrh	r2, [r0, #26]
 8008b36:	8b81      	ldrh	r1, [r0, #28]
 8008b38:	428a      	cmp	r2, r1
 8008b3a:	d00e      	beq.n	8008b5a <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008b3c:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8008b40:	8c03      	ldrh	r3, [r0, #32]
 8008b42:	4563      	cmp	r3, ip
 8008b44:	d807      	bhi.n	8008b56 <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8008b46:	7f83      	ldrb	r3, [r0, #30]
 8008b48:	b983      	cbnz	r3, 8008b6c <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8008b4a:	4561      	cmp	r1, ip
 8008b4c:	d912      	bls.n	8008b74 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8008b4e:	2201      	movs	r2, #1
 8008b50:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 8008b52:	4618      	mov	r0, r3
 8008b54:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8008b56:	2004      	movs	r0, #4
 8008b58:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008b5a:	88c3      	ldrh	r3, [r0, #6]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d309      	bcc.n	8008b74 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008b60:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 8008b62:	4298      	cmp	r0, r3
 8008b64:	bf8c      	ite	hi
 8008b66:	2004      	movhi	r0, #4
 8008b68:	2000      	movls	r0, #0
 8008b6a:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008b6c:	4562      	cmp	r2, ip
 8008b6e:	d303      	bcc.n	8008b78 <RVBS_CheckFaultState+0x44>
        fault = MC_NO_ERROR;
 8008b70:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8008b72:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8008b74:	2002      	movs	r0, #2
 8008b76:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8008b7c:	2002      	movs	r0, #2
 8008b7e:	4770      	bx	lr

08008b80 <RVBS_CalcAvVbus>:
{
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008b84:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8008b88:	f7fa feba 	bl	8003900 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8008b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b90:	4298      	cmp	r0, r3
 8008b92:	d024      	beq.n	8008bde <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b96:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8008b9a:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008b9e:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8008ba2:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8008ba6:	d00d      	beq.n	8008bc4 <RVBS_CalcAvVbus+0x44>
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8008bb0:	3b02      	subs	r3, #2
      wtemp = 0u;
 8008bb2:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8008bb4:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008bb8:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8008bba:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008bbc:	d1fa      	bne.n	8008bb4 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8008bbe:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008bc2:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008bc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008bc8:	4575      	cmp	r5, lr
        pHandle->index++;
 8008bca:	bf34      	ite	cc
 8008bcc:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8008bce:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008bd0:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8008bd2:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8008bd4:	bf34      	ite	cc
 8008bd6:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8008bda:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ffa8 	bl	8008b34 <RVBS_CheckFaultState>
 8008be4:	8120      	strh	r0, [r4, #8]
}
 8008be6:	bd38      	pop	{r3, r4, r5, pc}

08008be8 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8008be8:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8008bea:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8008bec:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8008bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8008bf4:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8008bf6:	4770      	bx	lr

08008bf8 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8008bf8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop

08008c00 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008c00:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8008c08:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop

08008c10 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008c10:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008c14:	8a81      	ldrh	r1, [r0, #20]
{
 8008c16:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8008c18:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8008c1a:	bfb8      	it	lt
 8008c1c:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008c1e:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008c22:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008c26:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8008c28:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008c2a:	459e      	cmp	lr, r3
 8008c2c:	d819      	bhi.n	8008c62 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008c2e:	4299      	cmp	r1, r3
 8008c30:	bf2c      	ite	cs
 8008c32:	2300      	movcs	r3, #0
 8008c34:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008c36:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008c3a:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8008c3e:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8008c40:	bfb8      	it	lt
 8008c42:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8008c44:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008c46:	458e      	cmp	lr, r1
 8008c48:	d300      	bcc.n	8008c4c <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8008c4a:	b163      	cbz	r3, 8008c66 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008c4c:	4594      	cmp	ip, r2
 8008c4e:	d901      	bls.n	8008c54 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8008c50:	3201      	adds	r2, #1
 8008c52:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008c54:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008c56:	ebb2 000c 	subs.w	r0, r2, ip
 8008c5a:	bf18      	it	ne
 8008c5c:	2001      	movne	r0, #1
 8008c5e:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e7e7      	b.n	8008c36 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8008c66:	4594      	cmp	ip, r2
 8008c68:	bf88      	it	hi
 8008c6a:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008c6c:	7002      	strb	r2, [r0, #0]
}
 8008c6e:	ebb2 000c 	subs.w	r0, r2, ip
 8008c72:	bf18      	it	ne
 8008c74:	2001      	movne	r0, #1
 8008c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c7a:	bf00      	nop

08008c7c <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8008c7c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008c80:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8008c84:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8008c88:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8008c8c:	b200      	sxth	r0, r0
 8008c8e:	4770      	bx	lr

08008c90 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008c90:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8008c94:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008c96:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8008c9a:	6142      	str	r2, [r0, #20]
{
 8008c9c:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8008c9e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8008ca2:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8008ca4:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008ca6:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008caa:	0409      	lsls	r1, r1, #16
 8008cac:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8008cb0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8008cb6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008cb8:	6183      	str	r3, [r0, #24]
}
 8008cba:	4770      	bx	lr

08008cbc <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8008cbc:	6940      	ldr	r0, [r0, #20]
 8008cbe:	4770      	bx	lr

08008cc0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008cc0:	7803      	ldrb	r3, [r0, #0]
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d000      	beq.n	8008cc8 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008cc6:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008cc8:	6900      	ldr	r0, [r0, #16]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f7fe be94 	b.w	80079f8 <PID_SetIntegralTerm>

08008cd0 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8008cd0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8008cd8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop

08008ce0 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008ce0:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8008ce2:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008ce4:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008ce6:	4770      	bx	lr

08008ce8 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8008ce8:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008cea:	7803      	ldrb	r3, [r0, #0]
 8008cec:	2b04      	cmp	r3, #4
{
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460e      	mov	r6, r1
 8008cf2:	4615      	mov	r5, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008cf4:	d01e      	beq.n	8008d34 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008cf6:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008cf8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008cfc:	4299      	cmp	r1, r3
 8008cfe:	dd01      	ble.n	8008d04 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8008d00:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008d04:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	dcf9      	bgt.n	8008d00 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8008d0c:	8c23      	ldrh	r3, [r4, #32]
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	da03      	bge.n	8008d1a <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008d12:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008d16:	428b      	cmp	r3, r1
 8008d18:	dbf2      	blt.n	8008d00 <STC_ExecRamp+0x18>
      if (0U == hDurationms)								// when the duration is 0,
 8008d1a:	b9ad      	cbnz	r5, 8008d48 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008d1c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008d1e:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008d20:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8008d22:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008d26:	bf0c      	ite	eq
 8008d28:	6066      	streq	r6, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8008d2a:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8008d2c:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8008d2e:	61a3      	str	r3, [r4, #24]
 8008d30:	2001      	movs	r0, #1
}
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8008d34:	f7ff ffd0 	bl	8008cd8 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8008d38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008d3a:	429e      	cmp	r6, r3
 8008d3c:	dce0      	bgt.n	8008d00 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8008d3e:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008d42:	42b3      	cmp	r3, r6
 8008d44:	dcdc      	bgt.n	8008d00 <STC_ExecRamp+0x18>
 8008d46:	e7e8      	b.n	8008d1a <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008d48:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8008d4a:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008d4c:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 8008d50:	4d06      	ldr	r5, [pc, #24]	; (8008d6c <STC_ExecRamp+0x84>)
 8008d52:	fba5 2303 	umull	r2, r3, r5, r3
 8008d56:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008d58:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008d5a:	1a30      	subs	r0, r6, r0
 8008d5c:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8008d5e:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008d60:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8008d64:	61a0      	str	r0, [r4, #24]
 8008d66:	2001      	movs	r0, #1
}
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	bf00      	nop
 8008d6c:	10624dd3 	.word	0x10624dd3

08008d70 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008d74:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008d76:	4770      	bx	lr

08008d78 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008d78:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8008d7a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008d7e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8008d80:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8008d82:	2a04      	cmp	r2, #4
 8008d84:	bf08      	it	eq
 8008d86:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8008d88:	2b01      	cmp	r3, #1
{
 8008d8a:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8008d8c:	d908      	bls.n	8008da0 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8008d8e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008d90:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8008d92:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8008d94:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8008d96:	2a03      	cmp	r2, #3
 8008d98:	d00b      	beq.n	8008db2 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8008d9a:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8008d9c:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8008da0:	d1f9      	bne.n	8008d96 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008da2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8008da6:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008da8:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008daa:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8008dae:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008db0:	d1f3      	bne.n	8008d9a <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8008db2:	6960      	ldr	r0, [r4, #20]
 8008db4:	f7ff ff24 	bl	8008c00 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8008db8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008dbc:	b209      	sxth	r1, r1
 8008dbe:	6920      	ldr	r0, [r4, #16]
 8008dc0:	f7fe fe4c 	bl	8007a5c <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8008dc4:	0403      	lsls	r3, r0, #16
 8008dc6:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8008dca:	bd38      	pop	{r3, r4, r5, pc}

08008dcc <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8008dcc:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008dd4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8008dd8:	2200      	movs	r2, #0
 8008dda:	b299      	uxth	r1, r3
 8008ddc:	f361 020f 	bfi	r2, r1, #0, #16
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008de6:	b082      	sub	sp, #8
}
 8008de8:	4610      	mov	r0, r2
 8008dea:	b002      	add	sp, #8
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop

08008df0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008df0:	b510      	push	{r4, lr}
 8008df2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008df4:	6940      	ldr	r0, [r0, #20]
 8008df6:	f7ff ff03 	bl	8008c00 <SPD_GetAvrgMecSpeedUnit>
 8008dfa:	0400      	lsls	r0, r0, #16
 8008dfc:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <__libc_init_array>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	4d0d      	ldr	r5, [pc, #52]	; (8008e38 <__libc_init_array+0x38>)
 8008e04:	4c0d      	ldr	r4, [pc, #52]	; (8008e3c <__libc_init_array+0x3c>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	d109      	bne.n	8008e24 <__libc_init_array+0x24>
 8008e10:	4d0b      	ldr	r5, [pc, #44]	; (8008e40 <__libc_init_array+0x40>)
 8008e12:	4c0c      	ldr	r4, [pc, #48]	; (8008e44 <__libc_init_array+0x44>)
 8008e14:	f000 f82e 	bl	8008e74 <_init>
 8008e18:	1b64      	subs	r4, r4, r5
 8008e1a:	10a4      	asrs	r4, r4, #2
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	d105      	bne.n	8008e2e <__libc_init_array+0x2e>
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e28:	4798      	blx	r3
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7ee      	b.n	8008e0c <__libc_init_array+0xc>
 8008e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e32:	4798      	blx	r3
 8008e34:	3601      	adds	r6, #1
 8008e36:	e7f2      	b.n	8008e1e <__libc_init_array+0x1e>
 8008e38:	08009280 	.word	0x08009280
 8008e3c:	08009280 	.word	0x08009280
 8008e40:	08009280 	.word	0x08009280
 8008e44:	08009284 	.word	0x08009284

08008e48 <memcpy>:
 8008e48:	440a      	add	r2, r1
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e50:	d100      	bne.n	8008e54 <memcpy+0xc>
 8008e52:	4770      	bx	lr
 8008e54:	b510      	push	{r4, lr}
 8008e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	d1f9      	bne.n	8008e56 <memcpy+0xe>
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <memset>:
 8008e64:	4402      	add	r2, r0
 8008e66:	4603      	mov	r3, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
